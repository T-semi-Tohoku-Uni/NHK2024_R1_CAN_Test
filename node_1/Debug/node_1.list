
node_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049f4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08004bd4  08004bd4  00014bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c78  08004c78  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004c78  08004c78  00014c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c80  08004c80  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c80  08004c80  00014c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c84  08004c84  00014c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004c88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000068  08004cf0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08004cf0  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f229  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fe1  00000000  00000000  0002f304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c58  00000000  00000000  000312e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000096d  00000000  00000000  00031f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026276  00000000  00000000  000328ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000df3e  00000000  00000000  00058b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0348  00000000  00000000  00066a61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003aa0  00000000  00000000  00156dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0015a84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004bbc 	.word	0x08004bbc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08004bbc 	.word	0x08004bbc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	230a      	movs	r3, #10
 80005ce:	68b9      	ldr	r1, [r7, #8]
 80005d0:	4803      	ldr	r0, [pc, #12]	; (80005e0 <_write+0x24>)
 80005d2:	f002 fcb7 	bl	8002f44 <HAL_UART_Transmit>
	return len;
 80005d6:	687b      	ldr	r3, [r7, #4]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	200000e8 	.word	0x200000e8

080005e4 <HAL_FDCAN_RxFifo0Callback>:
    // Wait until buffer size smaller than 3
    while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {} // To do : Check can transceiver size
}

// CAN Callback settings
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan1, uint32_t RxFifo0ITs) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d011      	beq.n	800061c <HAL_FDCAN_RxFifo0Callback+0x38>
        /* Retrieve Rx messages from RX FIFO0 */
        if (HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <HAL_FDCAN_RxFifo0Callback+0x40>)
 80005fa:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <HAL_FDCAN_RxFifo0Callback+0x44>)
 80005fc:	2140      	movs	r1, #64	; 0x40
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f000 fec6 	bl	8001390 <HAL_FDCAN_GetRxMessage>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <HAL_FDCAN_RxFifo0Callback+0x2a>
            Error_Handler();
 800060a:	f000 f953 	bl	80008b4 <Error_Handler>
        }

        if ((RxHeader.Identifier == 0x004)) {
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <HAL_FDCAN_RxFifo0Callback+0x44>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b04      	cmp	r3, #4
 8000614:	d102      	bne.n	800061c <HAL_FDCAN_RxFifo0Callback+0x38>
        	printf("Get Message!!!\r\n");
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <HAL_FDCAN_RxFifo0Callback+0x48>)
 8000618:	f003 fc68 	bl	8003eec <puts>
        }
    }
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200001bc 	.word	0x200001bc
 8000628:	2000017c 	.word	0x2000017c
 800062c:	08004bd4 	.word	0x08004bd4

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000636:	f000 fb1c 	bl	8000c72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063a:	f000 f845 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063e:	f000 f921 	bl	8000884 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000642:	f000 f8d3 	bl	80007ec <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 8000646:	f000 f88b 	bl	8000760 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  // CAN Filter Settings
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800064a:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <main+0x90>)
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIndex = 0;
 8000650:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <main+0x90>)
 8000652:	2200      	movs	r2, #0
 8000654:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000656:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <main+0x90>)
 8000658:	2202      	movs	r2, #2
 800065a:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800065c:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <main+0x90>)
 800065e:	2201      	movs	r2, #1
 8000660:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterID1 = 0x000;
 8000662:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <main+0x90>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterID2 = 0x000;
 8000668:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <main+0x90>)
 800066a:	2200      	movs	r2, #0
 800066c:	615a      	str	r2, [r3, #20]

  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK){
 800066e:	4914      	ldr	r1, [pc, #80]	; (80006c0 <main+0x90>)
 8000670:	4814      	ldr	r0, [pc, #80]	; (80006c4 <main+0x94>)
 8000672:	f000 fdd9 	bl	8001228 <HAL_FDCAN_ConfigFilter>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <main+0x50>
	  Error_Handler();
 800067c:	f000 f91a 	bl	80008b4 <Error_Handler>
  }
  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
 8000680:	2300      	movs	r3, #0
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2300      	movs	r3, #0
 8000686:	2202      	movs	r2, #2
 8000688:	2102      	movs	r1, #2
 800068a:	480e      	ldr	r0, [pc, #56]	; (80006c4 <main+0x94>)
 800068c:	f000 fe26 	bl	80012dc <HAL_FDCAN_ConfigGlobalFilter>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <main+0x6a>
      Error_Handler();
 8000696:	f000 f90d 	bl	80008b4 <Error_Handler>
  }

  // start CAN
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK){ Error_Handler();}
 800069a:	480a      	ldr	r0, [pc, #40]	; (80006c4 <main+0x94>)
 800069c:	f000 fe4f 	bl	800133e <HAL_FDCAN_Start>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <main+0x7a>
 80006a6:	f000 f905 	bl	80008b4 <Error_Handler>

  // CAN reception settings
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006aa:	2200      	movs	r2, #0
 80006ac:	2101      	movs	r1, #1
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <main+0x94>)
 80006b0:	f000 ff76 	bl	80015a0 <HAL_FDCAN_ActivateNotification>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <main+0x8e>
  {
     Error_Handler();
 80006ba:	f000 f8fb 	bl	80008b4 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006be:	e7fe      	b.n	80006be <main+0x8e>
 80006c0:	200001a4 	.word	0x200001a4
 80006c4:	20000084 	.word	0x20000084

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0318 	add.w	r3, r7, #24
 80006d2:	2238      	movs	r2, #56	; 0x38
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 fc10 	bl	8003efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ee:	f001 fbb9 	bl	8001e64 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f2:	2302      	movs	r3, #2
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2340      	movs	r3, #64	; 0x40
 80006fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2302      	movs	r3, #2
 8000706:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000708:	2301      	movs	r3, #1
 800070a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 800070c:	230a      	movs	r3, #10
 800070e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000714:	2302      	movs	r3, #2
 8000716:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000718:	2302      	movs	r3, #2
 800071a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 0318 	add.w	r3, r7, #24
 8000720:	4618      	mov	r0, r3
 8000722:	f001 fc43 	bl	8001fac <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800072c:	f000 f8c2 	bl	80008b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000734:	2303      	movs	r3, #3
 8000736:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2102      	movs	r1, #2
 8000748:	4618      	mov	r0, r3
 800074a:	f001 ff41 	bl	80025d0 <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000754:	f000 f8ae 	bl	80008b4 <Error_Handler>
  }
}
 8000758:	bf00      	nop
 800075a:	3750      	adds	r7, #80	; 0x50
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000764:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <MX_FDCAN1_Init+0x84>)
 8000766:	4a20      	ldr	r2, [pc, #128]	; (80007e8 <MX_FDCAN1_Init+0x88>)
 8000768:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800076a:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <MX_FDCAN1_Init+0x84>)
 800076c:	2200      	movs	r2, #0
 800076e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000770:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <MX_FDCAN1_Init+0x84>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000776:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_FDCAN1_Init+0x84>)
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800077c:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <MX_FDCAN1_Init+0x84>)
 800077e:	2200      	movs	r2, #0
 8000780:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000782:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <MX_FDCAN1_Init+0x84>)
 8000784:	2200      	movs	r2, #0
 8000786:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000788:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_FDCAN1_Init+0x84>)
 800078a:	2200      	movs	r2, #0
 800078c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <MX_FDCAN1_Init+0x84>)
 8000790:	2204      	movs	r2, #4
 8000792:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000794:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_FDCAN1_Init+0x84>)
 8000796:	2201      	movs	r2, #1
 8000798:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 15;
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_FDCAN1_Init+0x84>)
 800079c:	220f      	movs	r2, #15
 800079e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 80007a0:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_FDCAN1_Init+0x84>)
 80007a2:	2204      	movs	r2, #4
 80007a4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_FDCAN1_Init+0x84>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80007ac:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <MX_FDCAN1_Init+0x84>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_FDCAN1_Init+0x84>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <MX_FDCAN1_Init+0x84>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_FDCAN1_Init+0x84>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <MX_FDCAN1_Init+0x84>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_FDCAN1_Init+0x84>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_FDCAN1_Init+0x84>)
 80007d2:	f000 fbcf 	bl	8000f74 <HAL_FDCAN_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80007dc:	f000 f86a 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000084 	.word	0x20000084
 80007e8:	40006400 	.word	0x40006400

080007ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f0:	4b22      	ldr	r3, [pc, #136]	; (800087c <MX_USART2_UART_Init+0x90>)
 80007f2:	4a23      	ldr	r2, [pc, #140]	; (8000880 <MX_USART2_UART_Init+0x94>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007f6:	4b21      	ldr	r3, [pc, #132]	; (800087c <MX_USART2_UART_Init+0x90>)
 80007f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_USART2_UART_Init+0x90>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_USART2_UART_Init+0x90>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_USART2_UART_Init+0x90>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_USART2_UART_Init+0x90>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <MX_USART2_UART_Init+0x90>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_USART2_UART_Init+0x90>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_USART2_UART_Init+0x90>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_USART2_UART_Init+0x90>)
 800082a:	2200      	movs	r2, #0
 800082c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_USART2_UART_Init+0x90>)
 8000830:	2200      	movs	r2, #0
 8000832:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000834:	4811      	ldr	r0, [pc, #68]	; (800087c <MX_USART2_UART_Init+0x90>)
 8000836:	f002 fb35 	bl	8002ea4 <HAL_UART_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000840:	f000 f838 	bl	80008b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000844:	2100      	movs	r1, #0
 8000846:	480d      	ldr	r0, [pc, #52]	; (800087c <MX_USART2_UART_Init+0x90>)
 8000848:	f003 f95e 	bl	8003b08 <HAL_UARTEx_SetTxFifoThreshold>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000852:	f000 f82f 	bl	80008b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000856:	2100      	movs	r1, #0
 8000858:	4808      	ldr	r0, [pc, #32]	; (800087c <MX_USART2_UART_Init+0x90>)
 800085a:	f003 f993 	bl	8003b84 <HAL_UARTEx_SetRxFifoThreshold>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000864:	f000 f826 	bl	80008b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_USART2_UART_Init+0x90>)
 800086a:	f003 f914 	bl	8003a96 <HAL_UARTEx_DisableFifoMode>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000874:	f000 f81e 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200000e8 	.word	0x200000e8
 8000880:	40004400 	.word	0x40004400

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_GPIO_Init+0x2c>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <MX_GPIO_Init+0x2c>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_GPIO_Init+0x2c>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40021000 	.word	0x40021000

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
}
 80008ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error Handler");
 80008bc:	4801      	ldr	r0, [pc, #4]	; (80008c4 <Error_Handler+0x10>)
 80008be:	f003 faaf 	bl	8003e20 <iprintf>
 80008c2:	e7fb      	b.n	80008bc <Error_Handler+0x8>
 80008c4:	08004be4 	.word	0x08004be4

080008c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <HAL_MspInit+0x44>)
 80008d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d2:	4a0e      	ldr	r2, [pc, #56]	; (800090c <HAL_MspInit+0x44>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6613      	str	r3, [r2, #96]	; 0x60
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <HAL_MspInit+0x44>)
 80008dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <HAL_MspInit+0x44>)
 80008e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ea:	4a08      	ldr	r2, [pc, #32]	; (800090c <HAL_MspInit+0x44>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f0:	6593      	str	r3, [r2, #88]	; 0x58
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_MspInit+0x44>)
 80008f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	40021000 	.word	0x40021000

08000910 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b09e      	sub	sp, #120	; 0x78
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	2254      	movs	r2, #84	; 0x54
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f003 fae3 	bl	8003efc <memset>
  if(hfdcan->Instance==FDCAN1)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a24      	ldr	r2, [pc, #144]	; (80009cc <HAL_FDCAN_MspInit+0xbc>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d141      	bne.n	80009c4 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000944:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000946:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800094a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800094c:	f107 0310 	add.w	r3, r7, #16
 8000950:	4618      	mov	r0, r3
 8000952:	f002 f859 	bl	8002a08 <HAL_RCCEx_PeriphCLKConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800095c:	f7ff ffaa 	bl	80008b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000960:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <HAL_FDCAN_MspInit+0xc0>)
 8000962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000964:	4a1a      	ldr	r2, [pc, #104]	; (80009d0 <HAL_FDCAN_MspInit+0xc0>)
 8000966:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800096a:	6593      	str	r3, [r2, #88]	; 0x58
 800096c:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <HAL_FDCAN_MspInit+0xc0>)
 800096e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000978:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <HAL_FDCAN_MspInit+0xc0>)
 800097a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097c:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <HAL_FDCAN_MspInit+0xc0>)
 800097e:	f043 0301 	orr.w	r3, r3, #1
 8000982:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <HAL_FDCAN_MspInit+0xc0>)
 8000986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000990:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000994:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80009a2:	2309      	movs	r3, #9
 80009a4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009aa:	4619      	mov	r1, r3
 80009ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b0:	f001 f8d6 	bl	8001b60 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2100      	movs	r1, #0
 80009b8:	2015      	movs	r0, #21
 80009ba:	f000 faa6 	bl	8000f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80009be:	2015      	movs	r0, #21
 80009c0:	f000 fabd 	bl	8000f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80009c4:	bf00      	nop
 80009c6:	3778      	adds	r7, #120	; 0x78
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40006400 	.word	0x40006400
 80009d0:	40021000 	.word	0x40021000

080009d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b09e      	sub	sp, #120	; 0x78
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	2254      	movs	r2, #84	; 0x54
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f003 fa81 	bl	8003efc <memset>
  if(huart->Instance==USART2)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a1f      	ldr	r2, [pc, #124]	; (8000a7c <HAL_UART_MspInit+0xa8>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d136      	bne.n	8000a72 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a04:	2302      	movs	r3, #2
 8000a06:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a0c:	f107 0310 	add.w	r3, r7, #16
 8000a10:	4618      	mov	r0, r3
 8000a12:	f001 fff9 	bl	8002a08 <HAL_RCCEx_PeriphCLKConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a1c:	f7ff ff4a 	bl	80008b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a20:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <HAL_UART_MspInit+0xac>)
 8000a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a24:	4a16      	ldr	r2, [pc, #88]	; (8000a80 <HAL_UART_MspInit+0xac>)
 8000a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a2a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <HAL_UART_MspInit+0xac>)
 8000a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <HAL_UART_MspInit+0xac>)
 8000a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3c:	4a10      	ldr	r2, [pc, #64]	; (8000a80 <HAL_UART_MspInit+0xac>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a44:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <HAL_UART_MspInit+0xac>)
 8000a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a50:	230c      	movs	r3, #12
 8000a52:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a60:	2307      	movs	r3, #7
 8000a62:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6e:	f001 f877 	bl	8001b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a72:	bf00      	nop
 8000a74:	3778      	adds	r7, #120	; 0x78
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40004400 	.word	0x40004400
 8000a80:	40021000 	.word	0x40021000

08000a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <NMI_Handler+0x4>

08000a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <HardFault_Handler+0x4>

08000a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <MemManage_Handler+0x4>

08000a96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <BusFault_Handler+0x4>

08000a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <UsageFault_Handler+0x4>

08000aa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad0:	f000 f922 	bl	8000d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <FDCAN1_IT0_IRQHandler+0x10>)
 8000ade:	f000 fe45 	bl	800176c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000084 	.word	0x20000084

08000aec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	e00a      	b.n	8000b14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000afe:	f3af 8000 	nop.w
 8000b02:	4601      	mov	r1, r0
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	1c5a      	adds	r2, r3, #1
 8000b08:	60ba      	str	r2, [r7, #8]
 8000b0a:	b2ca      	uxtb	r2, r1
 8000b0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	3301      	adds	r3, #1
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	dbf0      	blt.n	8000afe <_read+0x12>
  }

  return len;
 8000b1c:	687b      	ldr	r3, [r7, #4]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
 8000b46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b4e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <_isatty>:

int _isatty(int file)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b66:	2301      	movs	r3, #1
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b98:	4a14      	ldr	r2, [pc, #80]	; (8000bec <_sbrk+0x5c>)
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <_sbrk+0x60>)
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <_sbrk+0x64>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <_sbrk+0x68>)
 8000bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d207      	bcs.n	8000bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc0:	f003 f9a4 	bl	8003f0c <__errno>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bce:	e009      	b.n	8000be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <_sbrk+0x64>)
 8000be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20020000 	.word	0x20020000
 8000bf0:	00000400 	.word	0x00000400
 8000bf4:	200001c4 	.word	0x200001c4
 8000bf8:	20000318 	.word	0x20000318

08000bfc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <SystemInit+0x20>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <SystemInit+0x20>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c20:	480d      	ldr	r0, [pc, #52]	; (8000c58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c22:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c24:	f7ff ffea 	bl	8000bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c28:	480c      	ldr	r0, [pc, #48]	; (8000c5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c2a:	490d      	ldr	r1, [pc, #52]	; (8000c60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <LoopForever+0xe>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c40:	4c0a      	ldr	r4, [pc, #40]	; (8000c6c <LoopForever+0x16>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f003 f963 	bl	8003f18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c52:	f7ff fced 	bl	8000630 <main>

08000c56 <LoopForever>:

LoopForever:
    b LoopForever
 8000c56:	e7fe      	b.n	8000c56 <LoopForever>
  ldr   r0, =_estack
 8000c58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c64:	08004c88 	.word	0x08004c88
  ldr r2, =_sbss
 8000c68:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c6c:	20000318 	.word	0x20000318

08000c70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC1_2_IRQHandler>

08000c72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f000 f939 	bl	8000ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c82:	200f      	movs	r0, #15
 8000c84:	f000 f80e 	bl	8000ca4 <HAL_InitTick>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d002      	beq.n	8000c94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	71fb      	strb	r3, [r7, #7]
 8000c92:	e001      	b.n	8000c98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c94:	f7ff fe18 	bl	80008c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c98:	79fb      	ldrb	r3, [r7, #7]

}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cac:	2300      	movs	r3, #0
 8000cae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000cb0:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <HAL_InitTick+0x68>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d022      	beq.n	8000cfe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000cb8:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <HAL_InitTick+0x6c>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <HAL_InitTick+0x68>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 f944 	bl	8000f5a <HAL_SYSTICK_Config>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d10f      	bne.n	8000cf8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b0f      	cmp	r3, #15
 8000cdc:	d809      	bhi.n	8000cf2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	6879      	ldr	r1, [r7, #4]
 8000ce2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ce6:	f000 f910 	bl	8000f0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_InitTick+0x70>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6013      	str	r3, [r2, #0]
 8000cf0:	e007      	b.n	8000d02 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	73fb      	strb	r3, [r7, #15]
 8000cf6:	e004      	b.n	8000d02 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	73fb      	strb	r3, [r7, #15]
 8000cfc:	e001      	b.n	8000d02 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	20000000 	.word	0x20000000
 8000d14:	20000004 	.word	0x20000004

08000d18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <HAL_IncTick+0x1c>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <HAL_IncTick+0x20>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4413      	add	r3, r2
 8000d26:	4a03      	ldr	r2, [pc, #12]	; (8000d34 <HAL_IncTick+0x1c>)
 8000d28:	6013      	str	r3, [r2, #0]
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	200001c8 	.word	0x200001c8
 8000d38:	20000008 	.word	0x20000008

08000d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <HAL_GetTick+0x14>)
 8000d42:	681b      	ldr	r3, [r3, #0]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	200001c8 	.word	0x200001c8

08000d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d70:	4013      	ands	r3, r2
 8000d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d86:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	60d3      	str	r3, [r2, #12]
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <__NVIC_GetPriorityGrouping+0x18>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	0a1b      	lsrs	r3, r3, #8
 8000da6:	f003 0307 	and.w	r3, r3, #7
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	db0b      	blt.n	8000de2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f003 021f 	and.w	r2, r3, #31
 8000dd0:	4907      	ldr	r1, [pc, #28]	; (8000df0 <__NVIC_EnableIRQ+0x38>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	095b      	lsrs	r3, r3, #5
 8000dd8:	2001      	movs	r0, #1
 8000dda:	fa00 f202 	lsl.w	r2, r0, r2
 8000dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000e100 	.word	0xe000e100

08000df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	db0a      	blt.n	8000e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	490c      	ldr	r1, [pc, #48]	; (8000e40 <__NVIC_SetPriority+0x4c>)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	0112      	lsls	r2, r2, #4
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	440b      	add	r3, r1
 8000e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e1c:	e00a      	b.n	8000e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4908      	ldr	r1, [pc, #32]	; (8000e44 <__NVIC_SetPriority+0x50>)
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	3b04      	subs	r3, #4
 8000e2c:	0112      	lsls	r2, r2, #4
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	440b      	add	r3, r1
 8000e32:	761a      	strb	r2, [r3, #24]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000e100 	.word	0xe000e100
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	; 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f1c3 0307 	rsb	r3, r3, #7
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	bf28      	it	cs
 8000e66:	2304      	movcs	r3, #4
 8000e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	2b06      	cmp	r3, #6
 8000e70:	d902      	bls.n	8000e78 <NVIC_EncodePriority+0x30>
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3b03      	subs	r3, #3
 8000e76:	e000      	b.n	8000e7a <NVIC_EncodePriority+0x32>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43da      	mvns	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	43d9      	mvns	r1, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	4313      	orrs	r3, r2
         );
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3724      	adds	r7, #36	; 0x24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
	...

08000eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec0:	d301      	bcc.n	8000ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e00f      	b.n	8000ee6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <SysTick_Config+0x40>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ece:	210f      	movs	r1, #15
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ed4:	f7ff ff8e 	bl	8000df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <SysTick_Config+0x40>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ede:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <SysTick_Config+0x40>)
 8000ee0:	2207      	movs	r2, #7
 8000ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	e000e010 	.word	0xe000e010

08000ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ff29 	bl	8000d54 <__NVIC_SetPriorityGrouping>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b086      	sub	sp, #24
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
 8000f16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f18:	f7ff ff40 	bl	8000d9c <__NVIC_GetPriorityGrouping>
 8000f1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	6978      	ldr	r0, [r7, #20]
 8000f24:	f7ff ff90 	bl	8000e48 <NVIC_EncodePriority>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ff5f 	bl	8000df4 <__NVIC_SetPriority>
}
 8000f36:	bf00      	nop
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff33 	bl	8000db8 <__NVIC_EnableIRQ>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ffa4 	bl	8000eb0 <SysTick_Config>
 8000f68:	4603      	mov	r3, r0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d101      	bne.n	8000f86 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e147      	b.n	8001216 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d106      	bne.n	8000fa0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff fcb8 	bl	8000910 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	699a      	ldr	r2, [r3, #24]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f022 0210 	bic.w	r2, r2, #16
 8000fae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fb0:	f7ff fec4 	bl	8000d3c <HAL_GetTick>
 8000fb4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000fb6:	e012      	b.n	8000fde <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000fb8:	f7ff fec0 	bl	8000d3c <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	2b0a      	cmp	r3, #10
 8000fc4:	d90b      	bls.n	8000fde <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fca:	f043 0201 	orr.w	r2, r3, #1
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e11b      	b.n	8001216 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f003 0308 	and.w	r3, r3, #8
 8000fe8:	2b08      	cmp	r3, #8
 8000fea:	d0e5      	beq.n	8000fb8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	699a      	ldr	r2, [r3, #24]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f042 0201 	orr.w	r2, r2, #1
 8000ffa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ffc:	f7ff fe9e 	bl	8000d3c <HAL_GetTick>
 8001000:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001002:	e012      	b.n	800102a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001004:	f7ff fe9a 	bl	8000d3c <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b0a      	cmp	r3, #10
 8001010:	d90b      	bls.n	800102a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001016:	f043 0201 	orr.w	r2, r3, #1
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2203      	movs	r2, #3
 8001022:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e0f5      	b.n	8001216 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	2b00      	cmp	r3, #0
 8001036:	d0e5      	beq.n	8001004 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	699a      	ldr	r2, [r3, #24]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f042 0202 	orr.w	r2, r2, #2
 8001046:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a74      	ldr	r2, [pc, #464]	; (8001220 <HAL_FDCAN_Init+0x2ac>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d103      	bne.n	800105a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001052:	4a74      	ldr	r2, [pc, #464]	; (8001224 <HAL_FDCAN_Init+0x2b0>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7c1b      	ldrb	r3, [r3, #16]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d108      	bne.n	8001074 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	699a      	ldr	r2, [r3, #24]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001070:	619a      	str	r2, [r3, #24]
 8001072:	e007      	b.n	8001084 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	699a      	ldr	r2, [r3, #24]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001082:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	7c5b      	ldrb	r3, [r3, #17]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d108      	bne.n	800109e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	699a      	ldr	r2, [r3, #24]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800109a:	619a      	str	r2, [r3, #24]
 800109c:	e007      	b.n	80010ae <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	699a      	ldr	r2, [r3, #24]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80010ac:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	7c9b      	ldrb	r3, [r3, #18]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d108      	bne.n	80010c8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	699a      	ldr	r2, [r3, #24]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80010c4:	619a      	str	r2, [r3, #24]
 80010c6:	e007      	b.n	80010d8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	699a      	ldr	r2, [r3, #24]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80010d6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	430a      	orrs	r2, r1
 80010ec:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	699a      	ldr	r2, [r3, #24]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80010fc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	691a      	ldr	r2, [r3, #16]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 0210 	bic.w	r2, r2, #16
 800110c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d108      	bne.n	8001128 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	699a      	ldr	r2, [r3, #24]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f042 0204 	orr.w	r2, r2, #4
 8001124:	619a      	str	r2, [r3, #24]
 8001126:	e02c      	b.n	8001182 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d028      	beq.n	8001182 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	2b02      	cmp	r3, #2
 8001136:	d01c      	beq.n	8001172 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	699a      	ldr	r2, [r3, #24]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001146:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	691a      	ldr	r2, [r3, #16]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f042 0210 	orr.w	r2, r2, #16
 8001156:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	2b03      	cmp	r3, #3
 800115e:	d110      	bne.n	8001182 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	699a      	ldr	r2, [r3, #24]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f042 0220 	orr.w	r2, r2, #32
 800116e:	619a      	str	r2, [r3, #24]
 8001170:	e007      	b.n	8001182 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	699a      	ldr	r2, [r3, #24]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f042 0220 	orr.w	r2, r2, #32
 8001180:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	3b01      	subs	r3, #1
 8001188:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	3b01      	subs	r3, #1
 8001190:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001192:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800119a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80011aa:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80011ac:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80011b6:	d115      	bne.n	80011e4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011bc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c2:	3b01      	subs	r3, #1
 80011c4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80011c6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	3b01      	subs	r3, #1
 80011ce:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80011d0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d8:	3b01      	subs	r3, #1
 80011da:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80011e0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80011e2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	430a      	orrs	r2, r1
 80011f6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 fc44 	bl	8001a88 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2201      	movs	r2, #1
 8001210:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40006400 	.word	0x40006400
 8001224:	40006500 	.word	0x40006500

08001228 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001228:	b480      	push	{r7}
 800122a:	b087      	sub	sp, #28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001238:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800123a:	7dfb      	ldrb	r3, [r7, #23]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d002      	beq.n	8001246 <HAL_FDCAN_ConfigFilter+0x1e>
 8001240:	7dfb      	ldrb	r3, [r7, #23]
 8001242:	2b02      	cmp	r3, #2
 8001244:	d13d      	bne.n	80012c2 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d119      	bne.n	8001282 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800125a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001262:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	4413      	add	r3, r2
 8001278:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	e01d      	b.n	80012be <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	075a      	lsls	r2, r3, #29
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	691b      	ldr	r3, [r3, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	079a      	lsls	r2, r3, #30
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	4313      	orrs	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	4413      	add	r3, r2
 80012aa:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	3304      	adds	r3, #4
 80012b6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80012be:	2300      	movs	r3, #0
 80012c0:	e006      	b.n	80012d0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c6:	f043 0202 	orr.w	r2, r3, #2
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
  }
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	371c      	adds	r7, #28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d116      	bne.n	8001324 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012fe:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	011a      	lsls	r2, r3, #4
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	431a      	orrs	r2, r3
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	431a      	orrs	r2, r3
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	431a      	orrs	r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	430a      	orrs	r2, r1
 800131c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8001320:	2300      	movs	r3, #0
 8001322:	e006      	b.n	8001332 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001328:	f043 0204 	orr.w	r2, r3, #4
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
  }
}
 8001332:	4618      	mov	r0, r3
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b01      	cmp	r3, #1
 8001350:	d110      	bne.n	8001374 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2202      	movs	r2, #2
 8001356:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	699a      	ldr	r2, [r3, #24]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 0201 	bic.w	r2, r2, #1
 8001368:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	e006      	b.n	8001382 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001378:	f043 0204 	orr.w	r2, r3, #4
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
  }
}
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001390:	b480      	push	{r7}
 8001392:	b08b      	sub	sp, #44	; 0x2c
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
 800139c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80013a8:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80013aa:	7efb      	ldrb	r3, [r7, #27]
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	f040 80e8 	bne.w	8001582 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	2b40      	cmp	r3, #64	; 0x40
 80013b6:	d137      	bne.n	8001428 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013c0:	f003 030f 	and.w	r3, r3, #15
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d107      	bne.n	80013d8 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e0db      	b.n	8001590 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013e0:	0e1b      	lsrs	r3, r3, #24
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d10a      	bne.n	8001400 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013f2:	0a5b      	lsrs	r3, r3, #9
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d101      	bne.n	8001400 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80013fc:	2301      	movs	r3, #1
 80013fe:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001408:	0a1b      	lsrs	r3, r3, #8
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	69fa      	ldr	r2, [r7, #28]
 8001410:	4413      	add	r3, r2
 8001412:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001418:	69fa      	ldr	r2, [r7, #28]
 800141a:	4613      	mov	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	4413      	add	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	440b      	add	r3, r1
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
 8001426:	e036      	b.n	8001496 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001430:	f003 030f 	and.w	r3, r3, #15
 8001434:	2b00      	cmp	r3, #0
 8001436:	d107      	bne.n	8001448 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e0a3      	b.n	8001590 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001450:	0e1b      	lsrs	r3, r3, #24
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b01      	cmp	r3, #1
 8001458:	d10a      	bne.n	8001470 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001462:	0a1b      	lsrs	r3, r3, #8
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b01      	cmp	r3, #1
 800146a:	d101      	bne.n	8001470 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800146c:	2301      	movs	r3, #1
 800146e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001478:	0a1b      	lsrs	r3, r3, #8
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	69fa      	ldr	r2, [r7, #28]
 8001480:	4413      	add	r3, r2
 8001482:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001488:	69fa      	ldr	r2, [r7, #28]
 800148a:	4613      	mov	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	4413      	add	r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	440b      	add	r3, r1
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d107      	bne.n	80014ba <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	0c9b      	lsrs	r3, r3, #18
 80014b0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	e005      	b.n	80014c6 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	3304      	adds	r3, #4
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80014e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80014ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	0c1b      	lsrs	r3, r3, #16
 80014f4:	f003 020f 	and.w	r2, r3, #15
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	0e1b      	lsrs	r3, r3, #24
 800151a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	0fda      	lsrs	r2, r3, #31
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	3304      	adds	r3, #4
 8001530:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001536:	2300      	movs	r3, #0
 8001538:	623b      	str	r3, [r7, #32]
 800153a:	e00a      	b.n	8001552 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	6a3b      	ldr	r3, [r7, #32]
 8001540:	441a      	add	r2, r3
 8001542:	6839      	ldr	r1, [r7, #0]
 8001544:	6a3b      	ldr	r3, [r7, #32]
 8001546:	440b      	add	r3, r1
 8001548:	7812      	ldrb	r2, [r2, #0]
 800154a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800154c:	6a3b      	ldr	r3, [r7, #32]
 800154e:	3301      	adds	r3, #1
 8001550:	623b      	str	r3, [r7, #32]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	4a11      	ldr	r2, [pc, #68]	; (800159c <HAL_FDCAN_GetRxMessage+0x20c>)
 8001558:	5cd3      	ldrb	r3, [r2, r3]
 800155a:	461a      	mov	r2, r3
 800155c:	6a3b      	ldr	r3, [r7, #32]
 800155e:	4293      	cmp	r3, r2
 8001560:	d3ec      	bcc.n	800153c <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	2b40      	cmp	r3, #64	; 0x40
 8001566:	d105      	bne.n	8001574 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	69fa      	ldr	r2, [r7, #28]
 800156e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001572:	e004      	b.n	800157e <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	69fa      	ldr	r2, [r7, #28]
 800157a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	e006      	b.n	8001590 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001586:	f043 0208 	orr.w	r2, r3, #8
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
  }
}
 8001590:	4618      	mov	r0, r3
 8001592:	372c      	adds	r7, #44	; 0x2c
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	08004c0c 	.word	0x08004c0c

080015a0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b087      	sub	sp, #28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80015b2:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80015b4:	7dfb      	ldrb	r3, [r7, #23]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d003      	beq.n	80015c2 <HAL_FDCAN_ActivateNotification+0x22>
 80015ba:	7dfb      	ldrb	r3, [r7, #23]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	f040 80c8 	bne.w	8001752 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c8:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d004      	beq.n	80015de <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d03b      	beq.n	8001656 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d004      	beq.n	80015f2 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d031      	beq.n	8001656 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d004      	beq.n	8001606 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	2b00      	cmp	r3, #0
 8001604:	d027      	beq.n	8001656 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800160c:	2b00      	cmp	r3, #0
 800160e:	d004      	beq.n	800161a <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	2b00      	cmp	r3, #0
 8001618:	d01d      	beq.n	8001656 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001620:	2b00      	cmp	r3, #0
 8001622:	d004      	beq.n	800162e <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	f003 0310 	and.w	r3, r3, #16
 800162a:	2b00      	cmp	r3, #0
 800162c:	d013      	beq.n	8001656 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001634:	2b00      	cmp	r3, #0
 8001636:	d004      	beq.n	8001642 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	f003 0320 	and.w	r3, r3, #32
 800163e:	2b00      	cmp	r3, #0
 8001640:	d009      	beq.n	8001656 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00c      	beq.n	8001666 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001652:	2b00      	cmp	r3, #0
 8001654:	d107      	bne.n	8001666 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f042 0201 	orr.w	r2, r2, #1
 8001664:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	2b00      	cmp	r3, #0
 800166e:	d004      	beq.n	800167a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	d13b      	bne.n	80016f2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001680:	2b00      	cmp	r3, #0
 8001682:	d004      	beq.n	800168e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d131      	bne.n	80016f2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001694:	2b00      	cmp	r3, #0
 8001696:	d004      	beq.n	80016a2 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d127      	bne.n	80016f2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d004      	beq.n	80016b6 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d11d      	bne.n	80016f2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d004      	beq.n	80016ca <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d113      	bne.n	80016f2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d004      	beq.n	80016de <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	f003 0320 	and.w	r3, r3, #32
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d109      	bne.n	80016f2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00c      	beq.n	8001702 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d007      	beq.n	8001702 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f042 0202 	orr.w	r2, r2, #2
 8001700:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001708:	2b00      	cmp	r3, #0
 800170a:	d009      	beq.n	8001720 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	430a      	orrs	r2, r1
 800171c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001726:	2b00      	cmp	r3, #0
 8001728:	d009      	beq.n	800173e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	430a      	orrs	r2, r1
 800173a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	68ba      	ldr	r2, [r7, #8]
 800174a:	430a      	orrs	r2, r1
 800174c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	e006      	b.n	8001760 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001756:	f043 0202 	orr.w	r2, r3, #2
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
  }
}
 8001760:	4618      	mov	r0, r3
 8001762:	371c      	adds	r7, #28
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800177a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001788:	4013      	ands	r3, r2
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017a0:	4013      	ands	r3, r2
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b8:	4013      	ands	r3, r2
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017c2:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80017c6:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ce:	6a3a      	ldr	r2, [r7, #32]
 80017d0:	4013      	ands	r3, r2
 80017d2:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017da:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80017de:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e6:	69fa      	ldr	r2, [r7, #28]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f2:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017fa:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00b      	beq.n	800181e <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800180c:	2b00      	cmp	r3, #0
 800180e:	d006      	beq.n	800181e <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2240      	movs	r2, #64	; 0x40
 8001816:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f916 	bl	8001a4a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001824:	2b00      	cmp	r3, #0
 8001826:	d019      	beq.n	800185c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182e:	2b00      	cmp	r3, #0
 8001830:	d014      	beq.n	800185c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800183a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001852:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001854:	6939      	ldr	r1, [r7, #16]
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f8d8 	bl	8001a0c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800185c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185e:	2b00      	cmp	r3, #0
 8001860:	d007      	beq.n	8001872 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001868:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800186a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 f8a2 	bl	80019b6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001874:	2b00      	cmp	r3, #0
 8001876:	d007      	beq.n	8001888 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800187e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7fe feae 	bl	80005e4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	2b00      	cmp	r3, #0
 800188c:	d007      	beq.n	800189e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001894:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001896:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f897 	bl	80019cc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d00c      	beq.n	80018c2 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d007      	beq.n	80018c2 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ba:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f890 	bl	80019e2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d018      	beq.n	80018fe <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d013      	beq.n	80018fe <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018de:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	4013      	ands	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2280      	movs	r2, #128	; 0x80
 80018f4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80018f6:	68f9      	ldr	r1, [r7, #12]
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 f87c 	bl	80019f6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00c      	beq.n	8001922 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d007      	beq.n	8001922 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800191a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 f880 	bl	8001a22 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d00c      	beq.n	8001946 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d007      	beq.n	8001946 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800193e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f878 	bl	8001a36 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d00f      	beq.n	8001970 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00a      	beq.n	8001970 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001962:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001968:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d007      	beq.n	8001986 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	69fa      	ldr	r2, [r7, #28]
 800197c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800197e:	69f9      	ldr	r1, [r7, #28]
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 f876 	bl	8001a72 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001986:	6a3b      	ldr	r3, [r7, #32]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d009      	beq.n	80019a0 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6a3a      	ldr	r2, [r7, #32]
 8001992:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001998:	6a3b      	ldr	r3, [r7, #32]
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d002      	beq.n	80019ae <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 f858 	bl	8001a5e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80019ae:	bf00      	nop
 80019b0:	3730      	adds	r7, #48	; 0x30
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001a90:	4b30      	ldr	r3, [pc, #192]	; (8001b54 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001a92:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a2f      	ldr	r2, [pc, #188]	; (8001b58 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d103      	bne.n	8001aa6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001aa4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a2c      	ldr	r2, [pc, #176]	; (8001b5c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d103      	bne.n	8001ab8 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8001ab6:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ac6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ace:	041a      	lsls	r2, r3, #16
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001aec:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af4:	061a      	lsls	r2, r3, #24
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	e005      	b.n	8001b3a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	3304      	adds	r3, #4
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d3f3      	bcc.n	8001b2e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001b46:	bf00      	nop
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	4000a400 	.word	0x4000a400
 8001b58:	40006800 	.word	0x40006800
 8001b5c:	40006c00 	.word	0x40006c00

08001b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b087      	sub	sp, #28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b6e:	e15a      	b.n	8001e26 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	2101      	movs	r1, #1
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 814c 	beq.w	8001e20 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d005      	beq.n	8001ba0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d130      	bne.n	8001c02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	2203      	movs	r2, #3
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	091b      	lsrs	r3, r3, #4
 8001bec:	f003 0201 	and.w	r2, r3, #1
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d017      	beq.n	8001c3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	2203      	movs	r2, #3
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d123      	bne.n	8001c92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	08da      	lsrs	r2, r3, #3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3208      	adds	r2, #8
 8001c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	220f      	movs	r2, #15
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	691a      	ldr	r2, [r3, #16]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	08da      	lsrs	r2, r3, #3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3208      	adds	r2, #8
 8001c8c:	6939      	ldr	r1, [r7, #16]
 8001c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 0203 	and.w	r2, r3, #3
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 80a6 	beq.w	8001e20 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd4:	4b5b      	ldr	r3, [pc, #364]	; (8001e44 <HAL_GPIO_Init+0x2e4>)
 8001cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd8:	4a5a      	ldr	r2, [pc, #360]	; (8001e44 <HAL_GPIO_Init+0x2e4>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	6613      	str	r3, [r2, #96]	; 0x60
 8001ce0:	4b58      	ldr	r3, [pc, #352]	; (8001e44 <HAL_GPIO_Init+0x2e4>)
 8001ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cec:	4a56      	ldr	r2, [pc, #344]	; (8001e48 <HAL_GPIO_Init+0x2e8>)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	089b      	lsrs	r3, r3, #2
 8001cf2:	3302      	adds	r3, #2
 8001cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	220f      	movs	r2, #15
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d16:	d01f      	beq.n	8001d58 <HAL_GPIO_Init+0x1f8>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a4c      	ldr	r2, [pc, #304]	; (8001e4c <HAL_GPIO_Init+0x2ec>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d019      	beq.n	8001d54 <HAL_GPIO_Init+0x1f4>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a4b      	ldr	r2, [pc, #300]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d013      	beq.n	8001d50 <HAL_GPIO_Init+0x1f0>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a4a      	ldr	r2, [pc, #296]	; (8001e54 <HAL_GPIO_Init+0x2f4>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d00d      	beq.n	8001d4c <HAL_GPIO_Init+0x1ec>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a49      	ldr	r2, [pc, #292]	; (8001e58 <HAL_GPIO_Init+0x2f8>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d007      	beq.n	8001d48 <HAL_GPIO_Init+0x1e8>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a48      	ldr	r2, [pc, #288]	; (8001e5c <HAL_GPIO_Init+0x2fc>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d101      	bne.n	8001d44 <HAL_GPIO_Init+0x1e4>
 8001d40:	2305      	movs	r3, #5
 8001d42:	e00a      	b.n	8001d5a <HAL_GPIO_Init+0x1fa>
 8001d44:	2306      	movs	r3, #6
 8001d46:	e008      	b.n	8001d5a <HAL_GPIO_Init+0x1fa>
 8001d48:	2304      	movs	r3, #4
 8001d4a:	e006      	b.n	8001d5a <HAL_GPIO_Init+0x1fa>
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e004      	b.n	8001d5a <HAL_GPIO_Init+0x1fa>
 8001d50:	2302      	movs	r3, #2
 8001d52:	e002      	b.n	8001d5a <HAL_GPIO_Init+0x1fa>
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <HAL_GPIO_Init+0x1fa>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	f002 0203 	and.w	r2, r2, #3
 8001d60:	0092      	lsls	r2, r2, #2
 8001d62:	4093      	lsls	r3, r2
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d6a:	4937      	ldr	r1, [pc, #220]	; (8001e48 <HAL_GPIO_Init+0x2e8>)
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	089b      	lsrs	r3, r3, #2
 8001d70:	3302      	adds	r3, #2
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d78:	4b39      	ldr	r3, [pc, #228]	; (8001e60 <HAL_GPIO_Init+0x300>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4013      	ands	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d9c:	4a30      	ldr	r2, [pc, #192]	; (8001e60 <HAL_GPIO_Init+0x300>)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001da2:	4b2f      	ldr	r3, [pc, #188]	; (8001e60 <HAL_GPIO_Init+0x300>)
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	43db      	mvns	r3, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dc6:	4a26      	ldr	r2, [pc, #152]	; (8001e60 <HAL_GPIO_Init+0x300>)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001dcc:	4b24      	ldr	r3, [pc, #144]	; (8001e60 <HAL_GPIO_Init+0x300>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001df0:	4a1b      	ldr	r2, [pc, #108]	; (8001e60 <HAL_GPIO_Init+0x300>)
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <HAL_GPIO_Init+0x300>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e1a:	4a11      	ldr	r2, [pc, #68]	; (8001e60 <HAL_GPIO_Init+0x300>)
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	3301      	adds	r3, #1
 8001e24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f47f ae9d 	bne.w	8001b70 <HAL_GPIO_Init+0x10>
  }
}
 8001e36:	bf00      	nop
 8001e38:	bf00      	nop
 8001e3a:	371c      	adds	r7, #28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40010000 	.word	0x40010000
 8001e4c:	48000400 	.word	0x48000400
 8001e50:	48000800 	.word	0x48000800
 8001e54:	48000c00 	.word	0x48000c00
 8001e58:	48001000 	.word	0x48001000
 8001e5c:	48001400 	.word	0x48001400
 8001e60:	40010400 	.word	0x40010400

08001e64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d141      	bne.n	8001ef6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e72:	4b4b      	ldr	r3, [pc, #300]	; (8001fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e7e:	d131      	bne.n	8001ee4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e80:	4b47      	ldr	r3, [pc, #284]	; (8001fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e86:	4a46      	ldr	r2, [pc, #280]	; (8001fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e90:	4b43      	ldr	r3, [pc, #268]	; (8001fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e98:	4a41      	ldr	r2, [pc, #260]	; (8001fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ea0:	4b40      	ldr	r3, [pc, #256]	; (8001fa4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2232      	movs	r2, #50	; 0x32
 8001ea6:	fb02 f303 	mul.w	r3, r2, r3
 8001eaa:	4a3f      	ldr	r2, [pc, #252]	; (8001fa8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001eac:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb0:	0c9b      	lsrs	r3, r3, #18
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eb6:	e002      	b.n	8001ebe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ebe:	4b38      	ldr	r3, [pc, #224]	; (8001fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eca:	d102      	bne.n	8001ed2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f2      	bne.n	8001eb8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ed2:	4b33      	ldr	r3, [pc, #204]	; (8001fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ede:	d158      	bne.n	8001f92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e057      	b.n	8001f94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ee4:	4b2e      	ldr	r3, [pc, #184]	; (8001fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eea:	4a2d      	ldr	r2, [pc, #180]	; (8001fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ef0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ef4:	e04d      	b.n	8001f92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001efc:	d141      	bne.n	8001f82 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001efe:	4b28      	ldr	r3, [pc, #160]	; (8001fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f0a:	d131      	bne.n	8001f70 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f0c:	4b24      	ldr	r3, [pc, #144]	; (8001fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f12:	4a23      	ldr	r2, [pc, #140]	; (8001fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f1c:	4b20      	ldr	r3, [pc, #128]	; (8001fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f24:	4a1e      	ldr	r2, [pc, #120]	; (8001fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f2c:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2232      	movs	r2, #50	; 0x32
 8001f32:	fb02 f303 	mul.w	r3, r2, r3
 8001f36:	4a1c      	ldr	r2, [pc, #112]	; (8001fa8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f38:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3c:	0c9b      	lsrs	r3, r3, #18
 8001f3e:	3301      	adds	r3, #1
 8001f40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f42:	e002      	b.n	8001f4a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f56:	d102      	bne.n	8001f5e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f2      	bne.n	8001f44 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f5e:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f6a:	d112      	bne.n	8001f92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e011      	b.n	8001f94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f70:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f76:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f80:	e007      	b.n	8001f92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f82:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f8a:	4a05      	ldr	r2, [pc, #20]	; (8001fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f90:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	40007000 	.word	0x40007000
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	431bde83 	.word	0x431bde83

08001fac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b088      	sub	sp, #32
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e2fe      	b.n	80025bc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d075      	beq.n	80020b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fca:	4b97      	ldr	r3, [pc, #604]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 030c 	and.w	r3, r3, #12
 8001fd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fd4:	4b94      	ldr	r3, [pc, #592]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	2b0c      	cmp	r3, #12
 8001fe2:	d102      	bne.n	8001fea <HAL_RCC_OscConfig+0x3e>
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2b03      	cmp	r3, #3
 8001fe8:	d002      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x44>
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d10b      	bne.n	8002008 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff0:	4b8d      	ldr	r3, [pc, #564]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d05b      	beq.n	80020b4 <HAL_RCC_OscConfig+0x108>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d157      	bne.n	80020b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e2d9      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002010:	d106      	bne.n	8002020 <HAL_RCC_OscConfig+0x74>
 8002012:	4b85      	ldr	r3, [pc, #532]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a84      	ldr	r2, [pc, #528]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	e01d      	b.n	800205c <HAL_RCC_OscConfig+0xb0>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002028:	d10c      	bne.n	8002044 <HAL_RCC_OscConfig+0x98>
 800202a:	4b7f      	ldr	r3, [pc, #508]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a7e      	ldr	r2, [pc, #504]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	4b7c      	ldr	r3, [pc, #496]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a7b      	ldr	r2, [pc, #492]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 800203c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	e00b      	b.n	800205c <HAL_RCC_OscConfig+0xb0>
 8002044:	4b78      	ldr	r3, [pc, #480]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a77      	ldr	r2, [pc, #476]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 800204a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	4b75      	ldr	r3, [pc, #468]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a74      	ldr	r2, [pc, #464]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800205a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d013      	beq.n	800208c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002064:	f7fe fe6a 	bl	8000d3c <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800206c:	f7fe fe66 	bl	8000d3c <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b64      	cmp	r3, #100	; 0x64
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e29e      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800207e:	4b6a      	ldr	r3, [pc, #424]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f0      	beq.n	800206c <HAL_RCC_OscConfig+0xc0>
 800208a:	e014      	b.n	80020b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208c:	f7fe fe56 	bl	8000d3c <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002094:	f7fe fe52 	bl	8000d3c <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b64      	cmp	r3, #100	; 0x64
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e28a      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020a6:	4b60      	ldr	r3, [pc, #384]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0xe8>
 80020b2:	e000      	b.n	80020b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d075      	beq.n	80021ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020c2:	4b59      	ldr	r3, [pc, #356]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 030c 	and.w	r3, r3, #12
 80020ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020cc:	4b56      	ldr	r3, [pc, #344]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	2b0c      	cmp	r3, #12
 80020da:	d102      	bne.n	80020e2 <HAL_RCC_OscConfig+0x136>
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d002      	beq.n	80020e8 <HAL_RCC_OscConfig+0x13c>
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d11f      	bne.n	8002128 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020e8:	4b4f      	ldr	r3, [pc, #316]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d005      	beq.n	8002100 <HAL_RCC_OscConfig+0x154>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e25d      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002100:	4b49      	ldr	r3, [pc, #292]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	061b      	lsls	r3, r3, #24
 800210e:	4946      	ldr	r1, [pc, #280]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002110:	4313      	orrs	r3, r2
 8002112:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002114:	4b45      	ldr	r3, [pc, #276]	; (800222c <HAL_RCC_OscConfig+0x280>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe fdc3 	bl	8000ca4 <HAL_InitTick>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d043      	beq.n	80021ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e249      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d023      	beq.n	8002178 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002130:	4b3d      	ldr	r3, [pc, #244]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a3c      	ldr	r2, [pc, #240]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7fe fdfe 	bl	8000d3c <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002144:	f7fe fdfa 	bl	8000d3c <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e232      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002156:	4b34      	ldr	r3, [pc, #208]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f0      	beq.n	8002144 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002162:	4b31      	ldr	r3, [pc, #196]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	061b      	lsls	r3, r3, #24
 8002170:	492d      	ldr	r1, [pc, #180]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002172:	4313      	orrs	r3, r2
 8002174:	604b      	str	r3, [r1, #4]
 8002176:	e01a      	b.n	80021ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002178:	4b2b      	ldr	r3, [pc, #172]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a2a      	ldr	r2, [pc, #168]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 800217e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7fe fdda 	bl	8000d3c <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218c:	f7fe fdd6 	bl	8000d3c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e20e      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800219e:	4b22      	ldr	r3, [pc, #136]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x1e0>
 80021aa:	e000      	b.n	80021ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d041      	beq.n	800223e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d01c      	beq.n	80021fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021c2:	4b19      	ldr	r3, [pc, #100]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 80021c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c8:	4a17      	ldr	r2, [pc, #92]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d2:	f7fe fdb3 	bl	8000d3c <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021da:	f7fe fdaf 	bl	8000d3c <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e1e7      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021ec:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 80021ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0ef      	beq.n	80021da <HAL_RCC_OscConfig+0x22e>
 80021fa:	e020      	b.n	800223e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 80021fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002202:	4a09      	ldr	r2, [pc, #36]	; (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002204:	f023 0301 	bic.w	r3, r3, #1
 8002208:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220c:	f7fe fd96 	bl	8000d3c <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002212:	e00d      	b.n	8002230 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002214:	f7fe fd92 	bl	8000d3c <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d906      	bls.n	8002230 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e1ca      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000
 800222c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002230:	4b8c      	ldr	r3, [pc, #560]	; (8002464 <HAL_RCC_OscConfig+0x4b8>)
 8002232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1ea      	bne.n	8002214 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 80a6 	beq.w	8002398 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800224c:	2300      	movs	r3, #0
 800224e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002250:	4b84      	ldr	r3, [pc, #528]	; (8002464 <HAL_RCC_OscConfig+0x4b8>)
 8002252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_RCC_OscConfig+0x2b4>
 800225c:	2301      	movs	r3, #1
 800225e:	e000      	b.n	8002262 <HAL_RCC_OscConfig+0x2b6>
 8002260:	2300      	movs	r3, #0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00d      	beq.n	8002282 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002266:	4b7f      	ldr	r3, [pc, #508]	; (8002464 <HAL_RCC_OscConfig+0x4b8>)
 8002268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226a:	4a7e      	ldr	r2, [pc, #504]	; (8002464 <HAL_RCC_OscConfig+0x4b8>)
 800226c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002270:	6593      	str	r3, [r2, #88]	; 0x58
 8002272:	4b7c      	ldr	r3, [pc, #496]	; (8002464 <HAL_RCC_OscConfig+0x4b8>)
 8002274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800227e:	2301      	movs	r3, #1
 8002280:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002282:	4b79      	ldr	r3, [pc, #484]	; (8002468 <HAL_RCC_OscConfig+0x4bc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228a:	2b00      	cmp	r3, #0
 800228c:	d118      	bne.n	80022c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800228e:	4b76      	ldr	r3, [pc, #472]	; (8002468 <HAL_RCC_OscConfig+0x4bc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a75      	ldr	r2, [pc, #468]	; (8002468 <HAL_RCC_OscConfig+0x4bc>)
 8002294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800229a:	f7fe fd4f 	bl	8000d3c <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a2:	f7fe fd4b 	bl	8000d3c <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e183      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b4:	4b6c      	ldr	r3, [pc, #432]	; (8002468 <HAL_RCC_OscConfig+0x4bc>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d108      	bne.n	80022da <HAL_RCC_OscConfig+0x32e>
 80022c8:	4b66      	ldr	r3, [pc, #408]	; (8002464 <HAL_RCC_OscConfig+0x4b8>)
 80022ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ce:	4a65      	ldr	r2, [pc, #404]	; (8002464 <HAL_RCC_OscConfig+0x4b8>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022d8:	e024      	b.n	8002324 <HAL_RCC_OscConfig+0x378>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2b05      	cmp	r3, #5
 80022e0:	d110      	bne.n	8002304 <HAL_RCC_OscConfig+0x358>
 80022e2:	4b60      	ldr	r3, [pc, #384]	; (8002464 <HAL_RCC_OscConfig+0x4b8>)
 80022e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e8:	4a5e      	ldr	r2, [pc, #376]	; (8002464 <HAL_RCC_OscConfig+0x4b8>)
 80022ea:	f043 0304 	orr.w	r3, r3, #4
 80022ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022f2:	4b5c      	ldr	r3, [pc, #368]	; (8002464 <HAL_RCC_OscConfig+0x4b8>)
 80022f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f8:	4a5a      	ldr	r2, [pc, #360]	; (8002464 <HAL_RCC_OscConfig+0x4b8>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002302:	e00f      	b.n	8002324 <HAL_RCC_OscConfig+0x378>
 8002304:	4b57      	ldr	r3, [pc, #348]	; (8002464 <HAL_RCC_OscConfig+0x4b8>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230a:	4a56      	ldr	r2, [pc, #344]	; (8002464 <HAL_RCC_OscConfig+0x4b8>)
 800230c:	f023 0301 	bic.w	r3, r3, #1
 8002310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002314:	4b53      	ldr	r3, [pc, #332]	; (8002464 <HAL_RCC_OscConfig+0x4b8>)
 8002316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231a:	4a52      	ldr	r2, [pc, #328]	; (8002464 <HAL_RCC_OscConfig+0x4b8>)
 800231c:	f023 0304 	bic.w	r3, r3, #4
 8002320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d016      	beq.n	800235a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232c:	f7fe fd06 	bl	8000d3c <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002332:	e00a      	b.n	800234a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002334:	f7fe fd02 	bl	8000d3c <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e138      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800234a:	4b46      	ldr	r3, [pc, #280]	; (8002464 <HAL_RCC_OscConfig+0x4b8>)
 800234c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0ed      	beq.n	8002334 <HAL_RCC_OscConfig+0x388>
 8002358:	e015      	b.n	8002386 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235a:	f7fe fcef 	bl	8000d3c <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002360:	e00a      	b.n	8002378 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002362:	f7fe fceb 	bl	8000d3c <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002370:	4293      	cmp	r3, r2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e121      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002378:	4b3a      	ldr	r3, [pc, #232]	; (8002464 <HAL_RCC_OscConfig+0x4b8>)
 800237a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1ed      	bne.n	8002362 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002386:	7ffb      	ldrb	r3, [r7, #31]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d105      	bne.n	8002398 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800238c:	4b35      	ldr	r3, [pc, #212]	; (8002464 <HAL_RCC_OscConfig+0x4b8>)
 800238e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002390:	4a34      	ldr	r2, [pc, #208]	; (8002464 <HAL_RCC_OscConfig+0x4b8>)
 8002392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002396:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0320 	and.w	r3, r3, #32
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d03c      	beq.n	800241e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d01c      	beq.n	80023e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023ac:	4b2d      	ldr	r3, [pc, #180]	; (8002464 <HAL_RCC_OscConfig+0x4b8>)
 80023ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023b2:	4a2c      	ldr	r2, [pc, #176]	; (8002464 <HAL_RCC_OscConfig+0x4b8>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023bc:	f7fe fcbe 	bl	8000d3c <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023c4:	f7fe fcba 	bl	8000d3c <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e0f2      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023d6:	4b23      	ldr	r3, [pc, #140]	; (8002464 <HAL_RCC_OscConfig+0x4b8>)
 80023d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0ef      	beq.n	80023c4 <HAL_RCC_OscConfig+0x418>
 80023e4:	e01b      	b.n	800241e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023e6:	4b1f      	ldr	r3, [pc, #124]	; (8002464 <HAL_RCC_OscConfig+0x4b8>)
 80023e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023ec:	4a1d      	ldr	r2, [pc, #116]	; (8002464 <HAL_RCC_OscConfig+0x4b8>)
 80023ee:	f023 0301 	bic.w	r3, r3, #1
 80023f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f6:	f7fe fca1 	bl	8000d3c <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023fe:	f7fe fc9d 	bl	8000d3c <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e0d5      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002410:	4b14      	ldr	r3, [pc, #80]	; (8002464 <HAL_RCC_OscConfig+0x4b8>)
 8002412:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1ef      	bne.n	80023fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 80c9 	beq.w	80025ba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002428:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <HAL_RCC_OscConfig+0x4b8>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 030c 	and.w	r3, r3, #12
 8002430:	2b0c      	cmp	r3, #12
 8002432:	f000 8083 	beq.w	800253c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d15e      	bne.n	80024fc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243e:	4b09      	ldr	r3, [pc, #36]	; (8002464 <HAL_RCC_OscConfig+0x4b8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a08      	ldr	r2, [pc, #32]	; (8002464 <HAL_RCC_OscConfig+0x4b8>)
 8002444:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244a:	f7fe fc77 	bl	8000d3c <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002450:	e00c      	b.n	800246c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002452:	f7fe fc73 	bl	8000d3c <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d905      	bls.n	800246c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e0ab      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
 8002464:	40021000 	.word	0x40021000
 8002468:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800246c:	4b55      	ldr	r3, [pc, #340]	; (80025c4 <HAL_RCC_OscConfig+0x618>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1ec      	bne.n	8002452 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002478:	4b52      	ldr	r3, [pc, #328]	; (80025c4 <HAL_RCC_OscConfig+0x618>)
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	4b52      	ldr	r3, [pc, #328]	; (80025c8 <HAL_RCC_OscConfig+0x61c>)
 800247e:	4013      	ands	r3, r2
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6a11      	ldr	r1, [r2, #32]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002488:	3a01      	subs	r2, #1
 800248a:	0112      	lsls	r2, r2, #4
 800248c:	4311      	orrs	r1, r2
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002492:	0212      	lsls	r2, r2, #8
 8002494:	4311      	orrs	r1, r2
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800249a:	0852      	lsrs	r2, r2, #1
 800249c:	3a01      	subs	r2, #1
 800249e:	0552      	lsls	r2, r2, #21
 80024a0:	4311      	orrs	r1, r2
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024a6:	0852      	lsrs	r2, r2, #1
 80024a8:	3a01      	subs	r2, #1
 80024aa:	0652      	lsls	r2, r2, #25
 80024ac:	4311      	orrs	r1, r2
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024b2:	06d2      	lsls	r2, r2, #27
 80024b4:	430a      	orrs	r2, r1
 80024b6:	4943      	ldr	r1, [pc, #268]	; (80025c4 <HAL_RCC_OscConfig+0x618>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024bc:	4b41      	ldr	r3, [pc, #260]	; (80025c4 <HAL_RCC_OscConfig+0x618>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a40      	ldr	r2, [pc, #256]	; (80025c4 <HAL_RCC_OscConfig+0x618>)
 80024c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024c8:	4b3e      	ldr	r3, [pc, #248]	; (80025c4 <HAL_RCC_OscConfig+0x618>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4a3d      	ldr	r2, [pc, #244]	; (80025c4 <HAL_RCC_OscConfig+0x618>)
 80024ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d4:	f7fe fc32 	bl	8000d3c <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024dc:	f7fe fc2e 	bl	8000d3c <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e066      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ee:	4b35      	ldr	r3, [pc, #212]	; (80025c4 <HAL_RCC_OscConfig+0x618>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0x530>
 80024fa:	e05e      	b.n	80025ba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fc:	4b31      	ldr	r3, [pc, #196]	; (80025c4 <HAL_RCC_OscConfig+0x618>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a30      	ldr	r2, [pc, #192]	; (80025c4 <HAL_RCC_OscConfig+0x618>)
 8002502:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7fe fc18 	bl	8000d3c <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002510:	f7fe fc14 	bl	8000d3c <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e04c      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002522:	4b28      	ldr	r3, [pc, #160]	; (80025c4 <HAL_RCC_OscConfig+0x618>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800252e:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <HAL_RCC_OscConfig+0x618>)
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	4924      	ldr	r1, [pc, #144]	; (80025c4 <HAL_RCC_OscConfig+0x618>)
 8002534:	4b25      	ldr	r3, [pc, #148]	; (80025cc <HAL_RCC_OscConfig+0x620>)
 8002536:	4013      	ands	r3, r2
 8002538:	60cb      	str	r3, [r1, #12]
 800253a:	e03e      	b.n	80025ba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e039      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002548:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <HAL_RCC_OscConfig+0x618>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f003 0203 	and.w	r2, r3, #3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	429a      	cmp	r2, r3
 800255a:	d12c      	bne.n	80025b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	3b01      	subs	r3, #1
 8002568:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256a:	429a      	cmp	r2, r3
 800256c:	d123      	bne.n	80025b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002578:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800257a:	429a      	cmp	r2, r3
 800257c:	d11b      	bne.n	80025b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800258a:	429a      	cmp	r2, r3
 800258c:	d113      	bne.n	80025b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	085b      	lsrs	r3, r3, #1
 800259a:	3b01      	subs	r3, #1
 800259c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800259e:	429a      	cmp	r2, r3
 80025a0:	d109      	bne.n	80025b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ac:	085b      	lsrs	r3, r3, #1
 80025ae:	3b01      	subs	r3, #1
 80025b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d001      	beq.n	80025ba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3720      	adds	r7, #32
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	019f800c 	.word	0x019f800c
 80025cc:	feeefffc 	.word	0xfeeefffc

080025d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e11e      	b.n	8002826 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025e8:	4b91      	ldr	r3, [pc, #580]	; (8002830 <HAL_RCC_ClockConfig+0x260>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 030f 	and.w	r3, r3, #15
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d910      	bls.n	8002618 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f6:	4b8e      	ldr	r3, [pc, #568]	; (8002830 <HAL_RCC_ClockConfig+0x260>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 020f 	bic.w	r2, r3, #15
 80025fe:	498c      	ldr	r1, [pc, #560]	; (8002830 <HAL_RCC_ClockConfig+0x260>)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002606:	4b8a      	ldr	r3, [pc, #552]	; (8002830 <HAL_RCC_ClockConfig+0x260>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e106      	b.n	8002826 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d073      	beq.n	800270c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b03      	cmp	r3, #3
 800262a:	d129      	bne.n	8002680 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800262c:	4b81      	ldr	r3, [pc, #516]	; (8002834 <HAL_RCC_ClockConfig+0x264>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0f4      	b.n	8002826 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800263c:	f000 f99e 	bl	800297c <RCC_GetSysClockFreqFromPLLSource>
 8002640:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4a7c      	ldr	r2, [pc, #496]	; (8002838 <HAL_RCC_ClockConfig+0x268>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d93f      	bls.n	80026ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800264a:	4b7a      	ldr	r3, [pc, #488]	; (8002834 <HAL_RCC_ClockConfig+0x264>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d009      	beq.n	800266a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800265e:	2b00      	cmp	r3, #0
 8002660:	d033      	beq.n	80026ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002666:	2b00      	cmp	r3, #0
 8002668:	d12f      	bne.n	80026ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800266a:	4b72      	ldr	r3, [pc, #456]	; (8002834 <HAL_RCC_ClockConfig+0x264>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002672:	4a70      	ldr	r2, [pc, #448]	; (8002834 <HAL_RCC_ClockConfig+0x264>)
 8002674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002678:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800267a:	2380      	movs	r3, #128	; 0x80
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	e024      	b.n	80026ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b02      	cmp	r3, #2
 8002686:	d107      	bne.n	8002698 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002688:	4b6a      	ldr	r3, [pc, #424]	; (8002834 <HAL_RCC_ClockConfig+0x264>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d109      	bne.n	80026a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0c6      	b.n	8002826 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002698:	4b66      	ldr	r3, [pc, #408]	; (8002834 <HAL_RCC_ClockConfig+0x264>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0be      	b.n	8002826 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80026a8:	f000 f8ce 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 80026ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4a61      	ldr	r2, [pc, #388]	; (8002838 <HAL_RCC_ClockConfig+0x268>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d909      	bls.n	80026ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026b6:	4b5f      	ldr	r3, [pc, #380]	; (8002834 <HAL_RCC_ClockConfig+0x264>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026be:	4a5d      	ldr	r2, [pc, #372]	; (8002834 <HAL_RCC_ClockConfig+0x264>)
 80026c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026ca:	4b5a      	ldr	r3, [pc, #360]	; (8002834 <HAL_RCC_ClockConfig+0x264>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f023 0203 	bic.w	r2, r3, #3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	4957      	ldr	r1, [pc, #348]	; (8002834 <HAL_RCC_ClockConfig+0x264>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026dc:	f7fe fb2e 	bl	8000d3c <HAL_GetTick>
 80026e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e2:	e00a      	b.n	80026fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e4:	f7fe fb2a 	bl	8000d3c <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e095      	b.n	8002826 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fa:	4b4e      	ldr	r3, [pc, #312]	; (8002834 <HAL_RCC_ClockConfig+0x264>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 020c 	and.w	r2, r3, #12
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	429a      	cmp	r2, r3
 800270a:	d1eb      	bne.n	80026e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d023      	beq.n	8002760 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002724:	4b43      	ldr	r3, [pc, #268]	; (8002834 <HAL_RCC_ClockConfig+0x264>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	4a42      	ldr	r2, [pc, #264]	; (8002834 <HAL_RCC_ClockConfig+0x264>)
 800272a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800272e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	2b00      	cmp	r3, #0
 800273a:	d007      	beq.n	800274c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800273c:	4b3d      	ldr	r3, [pc, #244]	; (8002834 <HAL_RCC_ClockConfig+0x264>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002744:	4a3b      	ldr	r2, [pc, #236]	; (8002834 <HAL_RCC_ClockConfig+0x264>)
 8002746:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800274a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800274c:	4b39      	ldr	r3, [pc, #228]	; (8002834 <HAL_RCC_ClockConfig+0x264>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	4936      	ldr	r1, [pc, #216]	; (8002834 <HAL_RCC_ClockConfig+0x264>)
 800275a:	4313      	orrs	r3, r2
 800275c:	608b      	str	r3, [r1, #8]
 800275e:	e008      	b.n	8002772 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	2b80      	cmp	r3, #128	; 0x80
 8002764:	d105      	bne.n	8002772 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002766:	4b33      	ldr	r3, [pc, #204]	; (8002834 <HAL_RCC_ClockConfig+0x264>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	4a32      	ldr	r2, [pc, #200]	; (8002834 <HAL_RCC_ClockConfig+0x264>)
 800276c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002770:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002772:	4b2f      	ldr	r3, [pc, #188]	; (8002830 <HAL_RCC_ClockConfig+0x260>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d21d      	bcs.n	80027bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002780:	4b2b      	ldr	r3, [pc, #172]	; (8002830 <HAL_RCC_ClockConfig+0x260>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f023 020f 	bic.w	r2, r3, #15
 8002788:	4929      	ldr	r1, [pc, #164]	; (8002830 <HAL_RCC_ClockConfig+0x260>)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	4313      	orrs	r3, r2
 800278e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002790:	f7fe fad4 	bl	8000d3c <HAL_GetTick>
 8002794:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002796:	e00a      	b.n	80027ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002798:	f7fe fad0 	bl	8000d3c <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e03b      	b.n	8002826 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ae:	4b20      	ldr	r3, [pc, #128]	; (8002830 <HAL_RCC_ClockConfig+0x260>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d1ed      	bne.n	8002798 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d008      	beq.n	80027da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c8:	4b1a      	ldr	r3, [pc, #104]	; (8002834 <HAL_RCC_ClockConfig+0x264>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	4917      	ldr	r1, [pc, #92]	; (8002834 <HAL_RCC_ClockConfig+0x264>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d009      	beq.n	80027fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027e6:	4b13      	ldr	r3, [pc, #76]	; (8002834 <HAL_RCC_ClockConfig+0x264>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	490f      	ldr	r1, [pc, #60]	; (8002834 <HAL_RCC_ClockConfig+0x264>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027fa:	f000 f825 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 80027fe:	4602      	mov	r2, r0
 8002800:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <HAL_RCC_ClockConfig+0x264>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	490c      	ldr	r1, [pc, #48]	; (800283c <HAL_RCC_ClockConfig+0x26c>)
 800280c:	5ccb      	ldrb	r3, [r1, r3]
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	fa22 f303 	lsr.w	r3, r2, r3
 8002816:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <HAL_RCC_ClockConfig+0x270>)
 8002818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800281a:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <HAL_RCC_ClockConfig+0x274>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe fa40 	bl	8000ca4 <HAL_InitTick>
 8002824:	4603      	mov	r3, r0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40022000 	.word	0x40022000
 8002834:	40021000 	.word	0x40021000
 8002838:	04c4b400 	.word	0x04c4b400
 800283c:	08004bf4 	.word	0x08004bf4
 8002840:	20000000 	.word	0x20000000
 8002844:	20000004 	.word	0x20000004

08002848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800284e:	4b2c      	ldr	r3, [pc, #176]	; (8002900 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	2b04      	cmp	r3, #4
 8002858:	d102      	bne.n	8002860 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800285a:	4b2a      	ldr	r3, [pc, #168]	; (8002904 <HAL_RCC_GetSysClockFreq+0xbc>)
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	e047      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002860:	4b27      	ldr	r3, [pc, #156]	; (8002900 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 030c 	and.w	r3, r3, #12
 8002868:	2b08      	cmp	r3, #8
 800286a:	d102      	bne.n	8002872 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800286c:	4b26      	ldr	r3, [pc, #152]	; (8002908 <HAL_RCC_GetSysClockFreq+0xc0>)
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	e03e      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002872:	4b23      	ldr	r3, [pc, #140]	; (8002900 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b0c      	cmp	r3, #12
 800287c:	d136      	bne.n	80028ec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800287e:	4b20      	ldr	r3, [pc, #128]	; (8002900 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002888:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <HAL_RCC_GetSysClockFreq+0xb8>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	091b      	lsrs	r3, r3, #4
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	3301      	adds	r3, #1
 8002894:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2b03      	cmp	r3, #3
 800289a:	d10c      	bne.n	80028b6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800289c:	4a1a      	ldr	r2, [pc, #104]	; (8002908 <HAL_RCC_GetSysClockFreq+0xc0>)
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a4:	4a16      	ldr	r2, [pc, #88]	; (8002900 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028a6:	68d2      	ldr	r2, [r2, #12]
 80028a8:	0a12      	lsrs	r2, r2, #8
 80028aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80028ae:	fb02 f303 	mul.w	r3, r2, r3
 80028b2:	617b      	str	r3, [r7, #20]
      break;
 80028b4:	e00c      	b.n	80028d0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028b6:	4a13      	ldr	r2, [pc, #76]	; (8002904 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80028be:	4a10      	ldr	r2, [pc, #64]	; (8002900 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028c0:	68d2      	ldr	r2, [r2, #12]
 80028c2:	0a12      	lsrs	r2, r2, #8
 80028c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80028c8:	fb02 f303 	mul.w	r3, r2, r3
 80028cc:	617b      	str	r3, [r7, #20]
      break;
 80028ce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	0e5b      	lsrs	r3, r3, #25
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	3301      	adds	r3, #1
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e8:	613b      	str	r3, [r7, #16]
 80028ea:	e001      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80028f0:	693b      	ldr	r3, [r7, #16]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	371c      	adds	r7, #28
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000
 8002904:	00f42400 	.word	0x00f42400
 8002908:	007a1200 	.word	0x007a1200

0800290c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002910:	4b03      	ldr	r3, [pc, #12]	; (8002920 <HAL_RCC_GetHCLKFreq+0x14>)
 8002912:	681b      	ldr	r3, [r3, #0]
}
 8002914:	4618      	mov	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	20000000 	.word	0x20000000

08002924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002928:	f7ff fff0 	bl	800290c <HAL_RCC_GetHCLKFreq>
 800292c:	4602      	mov	r2, r0
 800292e:	4b06      	ldr	r3, [pc, #24]	; (8002948 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	0a1b      	lsrs	r3, r3, #8
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	4904      	ldr	r1, [pc, #16]	; (800294c <HAL_RCC_GetPCLK1Freq+0x28>)
 800293a:	5ccb      	ldrb	r3, [r1, r3]
 800293c:	f003 031f 	and.w	r3, r3, #31
 8002940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002944:	4618      	mov	r0, r3
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40021000 	.word	0x40021000
 800294c:	08004c04 	.word	0x08004c04

08002950 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002954:	f7ff ffda 	bl	800290c <HAL_RCC_GetHCLKFreq>
 8002958:	4602      	mov	r2, r0
 800295a:	4b06      	ldr	r3, [pc, #24]	; (8002974 <HAL_RCC_GetPCLK2Freq+0x24>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	0adb      	lsrs	r3, r3, #11
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	4904      	ldr	r1, [pc, #16]	; (8002978 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002966:	5ccb      	ldrb	r3, [r1, r3]
 8002968:	f003 031f 	and.w	r3, r3, #31
 800296c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002970:	4618      	mov	r0, r3
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40021000 	.word	0x40021000
 8002978:	08004c04 	.word	0x08004c04

0800297c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800297c:	b480      	push	{r7}
 800297e:	b087      	sub	sp, #28
 8002980:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002982:	4b1e      	ldr	r3, [pc, #120]	; (80029fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800298c:	4b1b      	ldr	r3, [pc, #108]	; (80029fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	3301      	adds	r3, #1
 8002998:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	2b03      	cmp	r3, #3
 800299e:	d10c      	bne.n	80029ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029a0:	4a17      	ldr	r2, [pc, #92]	; (8002a00 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a8:	4a14      	ldr	r2, [pc, #80]	; (80029fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029aa:	68d2      	ldr	r2, [r2, #12]
 80029ac:	0a12      	lsrs	r2, r2, #8
 80029ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029b2:	fb02 f303 	mul.w	r3, r2, r3
 80029b6:	617b      	str	r3, [r7, #20]
    break;
 80029b8:	e00c      	b.n	80029d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029ba:	4a12      	ldr	r2, [pc, #72]	; (8002a04 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c2:	4a0e      	ldr	r2, [pc, #56]	; (80029fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029c4:	68d2      	ldr	r2, [r2, #12]
 80029c6:	0a12      	lsrs	r2, r2, #8
 80029c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029cc:	fb02 f303 	mul.w	r3, r2, r3
 80029d0:	617b      	str	r3, [r7, #20]
    break;
 80029d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029d4:	4b09      	ldr	r3, [pc, #36]	; (80029fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	0e5b      	lsrs	r3, r3, #25
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	3301      	adds	r3, #1
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80029ee:	687b      	ldr	r3, [r7, #4]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	371c      	adds	r7, #28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	40021000 	.word	0x40021000
 8002a00:	007a1200 	.word	0x007a1200
 8002a04:	00f42400 	.word	0x00f42400

08002a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a10:	2300      	movs	r3, #0
 8002a12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a14:	2300      	movs	r3, #0
 8002a16:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 8098 	beq.w	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a26:	2300      	movs	r3, #0
 8002a28:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a2a:	4b43      	ldr	r3, [pc, #268]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10d      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a36:	4b40      	ldr	r3, [pc, #256]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3a:	4a3f      	ldr	r2, [pc, #252]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a40:	6593      	str	r3, [r2, #88]	; 0x58
 8002a42:	4b3d      	ldr	r3, [pc, #244]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a52:	4b3a      	ldr	r3, [pc, #232]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a39      	ldr	r2, [pc, #228]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a5e:	f7fe f96d 	bl	8000d3c <HAL_GetTick>
 8002a62:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a64:	e009      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a66:	f7fe f969 	bl	8000d3c <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d902      	bls.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	74fb      	strb	r3, [r7, #19]
        break;
 8002a78:	e005      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a7a:	4b30      	ldr	r3, [pc, #192]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0ef      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002a86:	7cfb      	ldrb	r3, [r7, #19]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d159      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a8c:	4b2a      	ldr	r3, [pc, #168]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a96:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d01e      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d019      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002aa8:	4b23      	ldr	r3, [pc, #140]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ab2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ab4:	4b20      	ldr	r3, [pc, #128]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aba:	4a1f      	ldr	r2, [pc, #124]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ac4:	4b1c      	ldr	r3, [pc, #112]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aca:	4a1b      	ldr	r2, [pc, #108]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ad4:	4a18      	ldr	r2, [pc, #96]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d016      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae6:	f7fe f929 	bl	8000d3c <HAL_GetTick>
 8002aea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aec:	e00b      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aee:	f7fe f925 	bl	8000d3c <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d902      	bls.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	74fb      	strb	r3, [r7, #19]
            break;
 8002b04:	e006      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b06:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0ec      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002b14:	7cfb      	ldrb	r3, [r7, #19]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10b      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b1a:	4b07      	ldr	r3, [pc, #28]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b28:	4903      	ldr	r1, [pc, #12]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b30:	e008      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b32:	7cfb      	ldrb	r3, [r7, #19]
 8002b34:	74bb      	strb	r3, [r7, #18]
 8002b36:	e005      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b40:	7cfb      	ldrb	r3, [r7, #19]
 8002b42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b44:	7c7b      	ldrb	r3, [r7, #17]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d105      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b4a:	4ba7      	ldr	r3, [pc, #668]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4e:	4aa6      	ldr	r2, [pc, #664]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b54:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00a      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b62:	4ba1      	ldr	r3, [pc, #644]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b68:	f023 0203 	bic.w	r2, r3, #3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	499d      	ldr	r1, [pc, #628]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00a      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b84:	4b98      	ldr	r3, [pc, #608]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8a:	f023 020c 	bic.w	r2, r3, #12
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	4995      	ldr	r1, [pc, #596]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00a      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ba6:	4b90      	ldr	r3, [pc, #576]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	498c      	ldr	r1, [pc, #560]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00a      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bc8:	4b87      	ldr	r3, [pc, #540]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	4984      	ldr	r1, [pc, #528]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0310 	and.w	r3, r3, #16
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00a      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bea:	4b7f      	ldr	r3, [pc, #508]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	497b      	ldr	r1, [pc, #492]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0320 	and.w	r3, r3, #32
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00a      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c0c:	4b76      	ldr	r3, [pc, #472]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	4973      	ldr	r1, [pc, #460]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c2e:	4b6e      	ldr	r3, [pc, #440]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	496a      	ldr	r1, [pc, #424]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00a      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c50:	4b65      	ldr	r3, [pc, #404]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	4962      	ldr	r1, [pc, #392]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c72:	4b5d      	ldr	r3, [pc, #372]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	4959      	ldr	r1, [pc, #356]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00a      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c94:	4b54      	ldr	r3, [pc, #336]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c9a:	f023 0203 	bic.w	r2, r3, #3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca2:	4951      	ldr	r1, [pc, #324]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cb6:	4b4c      	ldr	r3, [pc, #304]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc4:	4948      	ldr	r1, [pc, #288]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d015      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cd8:	4b43      	ldr	r3, [pc, #268]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	4940      	ldr	r1, [pc, #256]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cf6:	d105      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cf8:	4b3b      	ldr	r3, [pc, #236]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4a3a      	ldr	r2, [pc, #232]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d02:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d015      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d10:	4b35      	ldr	r3, [pc, #212]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1e:	4932      	ldr	r1, [pc, #200]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d2e:	d105      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d30:	4b2d      	ldr	r3, [pc, #180]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	4a2c      	ldr	r2, [pc, #176]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d3a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d015      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d48:	4b27      	ldr	r3, [pc, #156]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d56:	4924      	ldr	r1, [pc, #144]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d66:	d105      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d68:	4b1f      	ldr	r3, [pc, #124]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	4a1e      	ldr	r2, [pc, #120]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d72:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d015      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d80:	4b19      	ldr	r3, [pc, #100]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8e:	4916      	ldr	r1, [pc, #88]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d9e:	d105      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4a10      	ldr	r2, [pc, #64]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002daa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d019      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002db8:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	4908      	ldr	r1, [pc, #32]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dd6:	d109      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dd8:	4b03      	ldr	r3, [pc, #12]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4a02      	ldr	r2, [pc, #8]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002de2:	60d3      	str	r3, [r2, #12]
 8002de4:	e002      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d015      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002df8:	4b29      	ldr	r3, [pc, #164]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e06:	4926      	ldr	r1, [pc, #152]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e16:	d105      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e18:	4b21      	ldr	r3, [pc, #132]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	4a20      	ldr	r2, [pc, #128]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e22:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d015      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002e30:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e36:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e3e:	4918      	ldr	r1, [pc, #96]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e4e:	d105      	bne.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e50:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	4a12      	ldr	r2, [pc, #72]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e5a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d015      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002e68:	4b0d      	ldr	r3, [pc, #52]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e76:	490a      	ldr	r1, [pc, #40]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e86:	d105      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	4a04      	ldr	r2, [pc, #16]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e92:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002e94:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40021000 	.word	0x40021000

08002ea4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e042      	b.n	8002f3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d106      	bne.n	8002ece <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7fd fd83 	bl	80009d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2224      	movs	r2, #36	; 0x24
 8002ed2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0201 	bic.w	r2, r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 fbb2 	bl	8003658 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f8b3 	bl	8003060 <UART_SetConfig>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e01b      	b.n	8002f3c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0201 	orr.w	r2, r2, #1
 8002f32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 fc31 	bl	800379c <UART_CheckIdleState>
 8002f3a:	4603      	mov	r3, r0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b08a      	sub	sp, #40	; 0x28
 8002f48:	af02      	add	r7, sp, #8
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	603b      	str	r3, [r7, #0]
 8002f50:	4613      	mov	r3, r2
 8002f52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5a:	2b20      	cmp	r3, #32
 8002f5c:	d17b      	bne.n	8003056 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <HAL_UART_Transmit+0x26>
 8002f64:	88fb      	ldrh	r3, [r7, #6]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e074      	b.n	8003058 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2221      	movs	r2, #33	; 0x21
 8002f7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f7e:	f7fd fedd 	bl	8000d3c <HAL_GetTick>
 8002f82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	88fa      	ldrh	r2, [r7, #6]
 8002f88:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	88fa      	ldrh	r2, [r7, #6]
 8002f90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f9c:	d108      	bne.n	8002fb0 <HAL_UART_Transmit+0x6c>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d104      	bne.n	8002fb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	61bb      	str	r3, [r7, #24]
 8002fae:	e003      	b.n	8002fb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fb8:	e030      	b.n	800301c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	2180      	movs	r1, #128	; 0x80
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 fc93 	bl	80038f0 <UART_WaitOnFlagUntilTimeout>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e03d      	b.n	8003058 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10b      	bne.n	8002ffa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ff0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	3302      	adds	r3, #2
 8002ff6:	61bb      	str	r3, [r7, #24]
 8002ff8:	e007      	b.n	800300a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	781a      	ldrb	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	3301      	adds	r3, #1
 8003008:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003010:	b29b      	uxth	r3, r3
 8003012:	3b01      	subs	r3, #1
 8003014:	b29a      	uxth	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003022:	b29b      	uxth	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1c8      	bne.n	8002fba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2200      	movs	r2, #0
 8003030:	2140      	movs	r1, #64	; 0x40
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 fc5c 	bl	80038f0 <UART_WaitOnFlagUntilTimeout>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d005      	beq.n	800304a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2220      	movs	r2, #32
 8003042:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e006      	b.n	8003058 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2220      	movs	r2, #32
 800304e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	e000      	b.n	8003058 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003056:	2302      	movs	r3, #2
  }
}
 8003058:	4618      	mov	r0, r3
 800305a:	3720      	adds	r7, #32
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003064:	b08c      	sub	sp, #48	; 0x30
 8003066:	af00      	add	r7, sp, #0
 8003068:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800306a:	2300      	movs	r3, #0
 800306c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	431a      	orrs	r2, r3
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	431a      	orrs	r2, r3
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	4313      	orrs	r3, r2
 8003086:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	4baa      	ldr	r3, [pc, #680]	; (8003338 <UART_SetConfig+0x2d8>)
 8003090:	4013      	ands	r3, r2
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003098:	430b      	orrs	r3, r1
 800309a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a9f      	ldr	r2, [pc, #636]	; (800333c <UART_SetConfig+0x2dc>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d004      	beq.n	80030cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030c8:	4313      	orrs	r3, r2
 80030ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80030d6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	6812      	ldr	r2, [r2, #0]
 80030de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030e0:	430b      	orrs	r3, r1
 80030e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ea:	f023 010f 	bic.w	r1, r3, #15
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a90      	ldr	r2, [pc, #576]	; (8003340 <UART_SetConfig+0x2e0>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d125      	bne.n	8003150 <UART_SetConfig+0xf0>
 8003104:	4b8f      	ldr	r3, [pc, #572]	; (8003344 <UART_SetConfig+0x2e4>)
 8003106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	2b03      	cmp	r3, #3
 8003110:	d81a      	bhi.n	8003148 <UART_SetConfig+0xe8>
 8003112:	a201      	add	r2, pc, #4	; (adr r2, 8003118 <UART_SetConfig+0xb8>)
 8003114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003118:	08003129 	.word	0x08003129
 800311c:	08003139 	.word	0x08003139
 8003120:	08003131 	.word	0x08003131
 8003124:	08003141 	.word	0x08003141
 8003128:	2301      	movs	r3, #1
 800312a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800312e:	e116      	b.n	800335e <UART_SetConfig+0x2fe>
 8003130:	2302      	movs	r3, #2
 8003132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003136:	e112      	b.n	800335e <UART_SetConfig+0x2fe>
 8003138:	2304      	movs	r3, #4
 800313a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800313e:	e10e      	b.n	800335e <UART_SetConfig+0x2fe>
 8003140:	2308      	movs	r3, #8
 8003142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003146:	e10a      	b.n	800335e <UART_SetConfig+0x2fe>
 8003148:	2310      	movs	r3, #16
 800314a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800314e:	e106      	b.n	800335e <UART_SetConfig+0x2fe>
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a7c      	ldr	r2, [pc, #496]	; (8003348 <UART_SetConfig+0x2e8>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d138      	bne.n	80031cc <UART_SetConfig+0x16c>
 800315a:	4b7a      	ldr	r3, [pc, #488]	; (8003344 <UART_SetConfig+0x2e4>)
 800315c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003160:	f003 030c 	and.w	r3, r3, #12
 8003164:	2b0c      	cmp	r3, #12
 8003166:	d82d      	bhi.n	80031c4 <UART_SetConfig+0x164>
 8003168:	a201      	add	r2, pc, #4	; (adr r2, 8003170 <UART_SetConfig+0x110>)
 800316a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316e:	bf00      	nop
 8003170:	080031a5 	.word	0x080031a5
 8003174:	080031c5 	.word	0x080031c5
 8003178:	080031c5 	.word	0x080031c5
 800317c:	080031c5 	.word	0x080031c5
 8003180:	080031b5 	.word	0x080031b5
 8003184:	080031c5 	.word	0x080031c5
 8003188:	080031c5 	.word	0x080031c5
 800318c:	080031c5 	.word	0x080031c5
 8003190:	080031ad 	.word	0x080031ad
 8003194:	080031c5 	.word	0x080031c5
 8003198:	080031c5 	.word	0x080031c5
 800319c:	080031c5 	.word	0x080031c5
 80031a0:	080031bd 	.word	0x080031bd
 80031a4:	2300      	movs	r3, #0
 80031a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031aa:	e0d8      	b.n	800335e <UART_SetConfig+0x2fe>
 80031ac:	2302      	movs	r3, #2
 80031ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031b2:	e0d4      	b.n	800335e <UART_SetConfig+0x2fe>
 80031b4:	2304      	movs	r3, #4
 80031b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031ba:	e0d0      	b.n	800335e <UART_SetConfig+0x2fe>
 80031bc:	2308      	movs	r3, #8
 80031be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031c2:	e0cc      	b.n	800335e <UART_SetConfig+0x2fe>
 80031c4:	2310      	movs	r3, #16
 80031c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031ca:	e0c8      	b.n	800335e <UART_SetConfig+0x2fe>
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a5e      	ldr	r2, [pc, #376]	; (800334c <UART_SetConfig+0x2ec>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d125      	bne.n	8003222 <UART_SetConfig+0x1c2>
 80031d6:	4b5b      	ldr	r3, [pc, #364]	; (8003344 <UART_SetConfig+0x2e4>)
 80031d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80031e0:	2b30      	cmp	r3, #48	; 0x30
 80031e2:	d016      	beq.n	8003212 <UART_SetConfig+0x1b2>
 80031e4:	2b30      	cmp	r3, #48	; 0x30
 80031e6:	d818      	bhi.n	800321a <UART_SetConfig+0x1ba>
 80031e8:	2b20      	cmp	r3, #32
 80031ea:	d00a      	beq.n	8003202 <UART_SetConfig+0x1a2>
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d814      	bhi.n	800321a <UART_SetConfig+0x1ba>
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <UART_SetConfig+0x19a>
 80031f4:	2b10      	cmp	r3, #16
 80031f6:	d008      	beq.n	800320a <UART_SetConfig+0x1aa>
 80031f8:	e00f      	b.n	800321a <UART_SetConfig+0x1ba>
 80031fa:	2300      	movs	r3, #0
 80031fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003200:	e0ad      	b.n	800335e <UART_SetConfig+0x2fe>
 8003202:	2302      	movs	r3, #2
 8003204:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003208:	e0a9      	b.n	800335e <UART_SetConfig+0x2fe>
 800320a:	2304      	movs	r3, #4
 800320c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003210:	e0a5      	b.n	800335e <UART_SetConfig+0x2fe>
 8003212:	2308      	movs	r3, #8
 8003214:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003218:	e0a1      	b.n	800335e <UART_SetConfig+0x2fe>
 800321a:	2310      	movs	r3, #16
 800321c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003220:	e09d      	b.n	800335e <UART_SetConfig+0x2fe>
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a4a      	ldr	r2, [pc, #296]	; (8003350 <UART_SetConfig+0x2f0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d125      	bne.n	8003278 <UART_SetConfig+0x218>
 800322c:	4b45      	ldr	r3, [pc, #276]	; (8003344 <UART_SetConfig+0x2e4>)
 800322e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003232:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003236:	2bc0      	cmp	r3, #192	; 0xc0
 8003238:	d016      	beq.n	8003268 <UART_SetConfig+0x208>
 800323a:	2bc0      	cmp	r3, #192	; 0xc0
 800323c:	d818      	bhi.n	8003270 <UART_SetConfig+0x210>
 800323e:	2b80      	cmp	r3, #128	; 0x80
 8003240:	d00a      	beq.n	8003258 <UART_SetConfig+0x1f8>
 8003242:	2b80      	cmp	r3, #128	; 0x80
 8003244:	d814      	bhi.n	8003270 <UART_SetConfig+0x210>
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <UART_SetConfig+0x1f0>
 800324a:	2b40      	cmp	r3, #64	; 0x40
 800324c:	d008      	beq.n	8003260 <UART_SetConfig+0x200>
 800324e:	e00f      	b.n	8003270 <UART_SetConfig+0x210>
 8003250:	2300      	movs	r3, #0
 8003252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003256:	e082      	b.n	800335e <UART_SetConfig+0x2fe>
 8003258:	2302      	movs	r3, #2
 800325a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800325e:	e07e      	b.n	800335e <UART_SetConfig+0x2fe>
 8003260:	2304      	movs	r3, #4
 8003262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003266:	e07a      	b.n	800335e <UART_SetConfig+0x2fe>
 8003268:	2308      	movs	r3, #8
 800326a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800326e:	e076      	b.n	800335e <UART_SetConfig+0x2fe>
 8003270:	2310      	movs	r3, #16
 8003272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003276:	e072      	b.n	800335e <UART_SetConfig+0x2fe>
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a35      	ldr	r2, [pc, #212]	; (8003354 <UART_SetConfig+0x2f4>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d12a      	bne.n	80032d8 <UART_SetConfig+0x278>
 8003282:	4b30      	ldr	r3, [pc, #192]	; (8003344 <UART_SetConfig+0x2e4>)
 8003284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800328c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003290:	d01a      	beq.n	80032c8 <UART_SetConfig+0x268>
 8003292:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003296:	d81b      	bhi.n	80032d0 <UART_SetConfig+0x270>
 8003298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800329c:	d00c      	beq.n	80032b8 <UART_SetConfig+0x258>
 800329e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032a2:	d815      	bhi.n	80032d0 <UART_SetConfig+0x270>
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <UART_SetConfig+0x250>
 80032a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ac:	d008      	beq.n	80032c0 <UART_SetConfig+0x260>
 80032ae:	e00f      	b.n	80032d0 <UART_SetConfig+0x270>
 80032b0:	2300      	movs	r3, #0
 80032b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032b6:	e052      	b.n	800335e <UART_SetConfig+0x2fe>
 80032b8:	2302      	movs	r3, #2
 80032ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032be:	e04e      	b.n	800335e <UART_SetConfig+0x2fe>
 80032c0:	2304      	movs	r3, #4
 80032c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032c6:	e04a      	b.n	800335e <UART_SetConfig+0x2fe>
 80032c8:	2308      	movs	r3, #8
 80032ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032ce:	e046      	b.n	800335e <UART_SetConfig+0x2fe>
 80032d0:	2310      	movs	r3, #16
 80032d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032d6:	e042      	b.n	800335e <UART_SetConfig+0x2fe>
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a17      	ldr	r2, [pc, #92]	; (800333c <UART_SetConfig+0x2dc>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d13a      	bne.n	8003358 <UART_SetConfig+0x2f8>
 80032e2:	4b18      	ldr	r3, [pc, #96]	; (8003344 <UART_SetConfig+0x2e4>)
 80032e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032f0:	d01a      	beq.n	8003328 <UART_SetConfig+0x2c8>
 80032f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032f6:	d81b      	bhi.n	8003330 <UART_SetConfig+0x2d0>
 80032f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032fc:	d00c      	beq.n	8003318 <UART_SetConfig+0x2b8>
 80032fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003302:	d815      	bhi.n	8003330 <UART_SetConfig+0x2d0>
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <UART_SetConfig+0x2b0>
 8003308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800330c:	d008      	beq.n	8003320 <UART_SetConfig+0x2c0>
 800330e:	e00f      	b.n	8003330 <UART_SetConfig+0x2d0>
 8003310:	2300      	movs	r3, #0
 8003312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003316:	e022      	b.n	800335e <UART_SetConfig+0x2fe>
 8003318:	2302      	movs	r3, #2
 800331a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800331e:	e01e      	b.n	800335e <UART_SetConfig+0x2fe>
 8003320:	2304      	movs	r3, #4
 8003322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003326:	e01a      	b.n	800335e <UART_SetConfig+0x2fe>
 8003328:	2308      	movs	r3, #8
 800332a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800332e:	e016      	b.n	800335e <UART_SetConfig+0x2fe>
 8003330:	2310      	movs	r3, #16
 8003332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003336:	e012      	b.n	800335e <UART_SetConfig+0x2fe>
 8003338:	cfff69f3 	.word	0xcfff69f3
 800333c:	40008000 	.word	0x40008000
 8003340:	40013800 	.word	0x40013800
 8003344:	40021000 	.word	0x40021000
 8003348:	40004400 	.word	0x40004400
 800334c:	40004800 	.word	0x40004800
 8003350:	40004c00 	.word	0x40004c00
 8003354:	40005000 	.word	0x40005000
 8003358:	2310      	movs	r3, #16
 800335a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4aae      	ldr	r2, [pc, #696]	; (800361c <UART_SetConfig+0x5bc>)
 8003364:	4293      	cmp	r3, r2
 8003366:	f040 8097 	bne.w	8003498 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800336a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800336e:	2b08      	cmp	r3, #8
 8003370:	d823      	bhi.n	80033ba <UART_SetConfig+0x35a>
 8003372:	a201      	add	r2, pc, #4	; (adr r2, 8003378 <UART_SetConfig+0x318>)
 8003374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003378:	0800339d 	.word	0x0800339d
 800337c:	080033bb 	.word	0x080033bb
 8003380:	080033a5 	.word	0x080033a5
 8003384:	080033bb 	.word	0x080033bb
 8003388:	080033ab 	.word	0x080033ab
 800338c:	080033bb 	.word	0x080033bb
 8003390:	080033bb 	.word	0x080033bb
 8003394:	080033bb 	.word	0x080033bb
 8003398:	080033b3 	.word	0x080033b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800339c:	f7ff fac2 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 80033a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80033a2:	e010      	b.n	80033c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033a4:	4b9e      	ldr	r3, [pc, #632]	; (8003620 <UART_SetConfig+0x5c0>)
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80033a8:	e00d      	b.n	80033c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033aa:	f7ff fa4d 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 80033ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80033b0:	e009      	b.n	80033c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80033b8:	e005      	b.n	80033c6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80033c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 8130 	beq.w	800362e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	4a94      	ldr	r2, [pc, #592]	; (8003624 <UART_SetConfig+0x5c4>)
 80033d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033d8:	461a      	mov	r2, r3
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	4413      	add	r3, r2
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d305      	bcc.n	80033fe <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d903      	bls.n	8003406 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003404:	e113      	b.n	800362e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	2200      	movs	r2, #0
 800340a:	60bb      	str	r3, [r7, #8]
 800340c:	60fa      	str	r2, [r7, #12]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	4a84      	ldr	r2, [pc, #528]	; (8003624 <UART_SetConfig+0x5c4>)
 8003414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003418:	b29b      	uxth	r3, r3
 800341a:	2200      	movs	r2, #0
 800341c:	603b      	str	r3, [r7, #0]
 800341e:	607a      	str	r2, [r7, #4]
 8003420:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003424:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003428:	f7fc ff4a 	bl	80002c0 <__aeabi_uldivmod>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4610      	mov	r0, r2
 8003432:	4619      	mov	r1, r3
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	020b      	lsls	r3, r1, #8
 800343e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003442:	0202      	lsls	r2, r0, #8
 8003444:	6979      	ldr	r1, [r7, #20]
 8003446:	6849      	ldr	r1, [r1, #4]
 8003448:	0849      	lsrs	r1, r1, #1
 800344a:	2000      	movs	r0, #0
 800344c:	460c      	mov	r4, r1
 800344e:	4605      	mov	r5, r0
 8003450:	eb12 0804 	adds.w	r8, r2, r4
 8003454:	eb43 0905 	adc.w	r9, r3, r5
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	469a      	mov	sl, r3
 8003460:	4693      	mov	fp, r2
 8003462:	4652      	mov	r2, sl
 8003464:	465b      	mov	r3, fp
 8003466:	4640      	mov	r0, r8
 8003468:	4649      	mov	r1, r9
 800346a:	f7fc ff29 	bl	80002c0 <__aeabi_uldivmod>
 800346e:	4602      	mov	r2, r0
 8003470:	460b      	mov	r3, r1
 8003472:	4613      	mov	r3, r2
 8003474:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800347c:	d308      	bcc.n	8003490 <UART_SetConfig+0x430>
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003484:	d204      	bcs.n	8003490 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6a3a      	ldr	r2, [r7, #32]
 800348c:	60da      	str	r2, [r3, #12]
 800348e:	e0ce      	b.n	800362e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003496:	e0ca      	b.n	800362e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034a0:	d166      	bne.n	8003570 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80034a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d827      	bhi.n	80034fa <UART_SetConfig+0x49a>
 80034aa:	a201      	add	r2, pc, #4	; (adr r2, 80034b0 <UART_SetConfig+0x450>)
 80034ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b0:	080034d5 	.word	0x080034d5
 80034b4:	080034dd 	.word	0x080034dd
 80034b8:	080034e5 	.word	0x080034e5
 80034bc:	080034fb 	.word	0x080034fb
 80034c0:	080034eb 	.word	0x080034eb
 80034c4:	080034fb 	.word	0x080034fb
 80034c8:	080034fb 	.word	0x080034fb
 80034cc:	080034fb 	.word	0x080034fb
 80034d0:	080034f3 	.word	0x080034f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034d4:	f7ff fa26 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 80034d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034da:	e014      	b.n	8003506 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034dc:	f7ff fa38 	bl	8002950 <HAL_RCC_GetPCLK2Freq>
 80034e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034e2:	e010      	b.n	8003506 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034e4:	4b4e      	ldr	r3, [pc, #312]	; (8003620 <UART_SetConfig+0x5c0>)
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034e8:	e00d      	b.n	8003506 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ea:	f7ff f9ad 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 80034ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034f0:	e009      	b.n	8003506 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034f8:	e005      	b.n	8003506 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003504:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 8090 	beq.w	800362e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	4a44      	ldr	r2, [pc, #272]	; (8003624 <UART_SetConfig+0x5c4>)
 8003514:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003518:	461a      	mov	r2, r3
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003520:	005a      	lsls	r2, r3, #1
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	085b      	lsrs	r3, r3, #1
 8003528:	441a      	add	r2, r3
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003532:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	2b0f      	cmp	r3, #15
 8003538:	d916      	bls.n	8003568 <UART_SetConfig+0x508>
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003540:	d212      	bcs.n	8003568 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	b29b      	uxth	r3, r3
 8003546:	f023 030f 	bic.w	r3, r3, #15
 800354a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	085b      	lsrs	r3, r3, #1
 8003550:	b29b      	uxth	r3, r3
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	b29a      	uxth	r2, r3
 8003558:	8bfb      	ldrh	r3, [r7, #30]
 800355a:	4313      	orrs	r3, r2
 800355c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	8bfa      	ldrh	r2, [r7, #30]
 8003564:	60da      	str	r2, [r3, #12]
 8003566:	e062      	b.n	800362e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800356e:	e05e      	b.n	800362e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003570:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003574:	2b08      	cmp	r3, #8
 8003576:	d828      	bhi.n	80035ca <UART_SetConfig+0x56a>
 8003578:	a201      	add	r2, pc, #4	; (adr r2, 8003580 <UART_SetConfig+0x520>)
 800357a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357e:	bf00      	nop
 8003580:	080035a5 	.word	0x080035a5
 8003584:	080035ad 	.word	0x080035ad
 8003588:	080035b5 	.word	0x080035b5
 800358c:	080035cb 	.word	0x080035cb
 8003590:	080035bb 	.word	0x080035bb
 8003594:	080035cb 	.word	0x080035cb
 8003598:	080035cb 	.word	0x080035cb
 800359c:	080035cb 	.word	0x080035cb
 80035a0:	080035c3 	.word	0x080035c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035a4:	f7ff f9be 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 80035a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80035aa:	e014      	b.n	80035d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035ac:	f7ff f9d0 	bl	8002950 <HAL_RCC_GetPCLK2Freq>
 80035b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80035b2:	e010      	b.n	80035d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035b4:	4b1a      	ldr	r3, [pc, #104]	; (8003620 <UART_SetConfig+0x5c0>)
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80035b8:	e00d      	b.n	80035d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ba:	f7ff f945 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 80035be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80035c0:	e009      	b.n	80035d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80035c8:	e005      	b.n	80035d6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80035d4:	bf00      	nop
    }

    if (pclk != 0U)
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d028      	beq.n	800362e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	4a10      	ldr	r2, [pc, #64]	; (8003624 <UART_SetConfig+0x5c4>)
 80035e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035e6:	461a      	mov	r2, r3
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	085b      	lsrs	r3, r3, #1
 80035f4:	441a      	add	r2, r3
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	2b0f      	cmp	r3, #15
 8003604:	d910      	bls.n	8003628 <UART_SetConfig+0x5c8>
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800360c:	d20c      	bcs.n	8003628 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	b29a      	uxth	r2, r3
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	60da      	str	r2, [r3, #12]
 8003618:	e009      	b.n	800362e <UART_SetConfig+0x5ce>
 800361a:	bf00      	nop
 800361c:	40008000 	.word	0x40008000
 8003620:	00f42400 	.word	0x00f42400
 8003624:	08004c1c 	.word	0x08004c1c
      }
      else
      {
        ret = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2201      	movs	r2, #1
 8003632:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2201      	movs	r2, #1
 800363a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	2200      	movs	r2, #0
 8003642:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	2200      	movs	r2, #0
 8003648:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800364a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800364e:	4618      	mov	r0, r3
 8003650:	3730      	adds	r7, #48	; 0x30
 8003652:	46bd      	mov	sp, r7
 8003654:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003658 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003664:	f003 0308 	and.w	r3, r3, #8
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00a      	beq.n	80036c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ca:	f003 0304 	and.w	r3, r3, #4
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ec:	f003 0310 	and.w	r3, r3, #16
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00a      	beq.n	800370a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003734:	2b00      	cmp	r3, #0
 8003736:	d01a      	beq.n	800376e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003756:	d10a      	bne.n	800376e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00a      	beq.n	8003790 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	605a      	str	r2, [r3, #4]
  }
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b098      	sub	sp, #96	; 0x60
 80037a0:	af02      	add	r7, sp, #8
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037ac:	f7fd fac6 	bl	8000d3c <HAL_GetTick>
 80037b0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0308 	and.w	r3, r3, #8
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d12f      	bne.n	8003820 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037c8:	2200      	movs	r2, #0
 80037ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f88e 	bl	80038f0 <UART_WaitOnFlagUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d022      	beq.n	8003820 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e2:	e853 3f00 	ldrex	r3, [r3]
 80037e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ee:	653b      	str	r3, [r7, #80]	; 0x50
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	461a      	mov	r2, r3
 80037f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037f8:	647b      	str	r3, [r7, #68]	; 0x44
 80037fa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003800:	e841 2300 	strex	r3, r2, [r1]
 8003804:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1e6      	bne.n	80037da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e063      	b.n	80038e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0304 	and.w	r3, r3, #4
 800382a:	2b04      	cmp	r3, #4
 800382c:	d149      	bne.n	80038c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800382e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003836:	2200      	movs	r2, #0
 8003838:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f857 	bl	80038f0 <UART_WaitOnFlagUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d03c      	beq.n	80038c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	e853 3f00 	ldrex	r3, [r3]
 8003854:	623b      	str	r3, [r7, #32]
   return(result);
 8003856:	6a3b      	ldr	r3, [r7, #32]
 8003858:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800385c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003866:	633b      	str	r3, [r7, #48]	; 0x30
 8003868:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800386c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800386e:	e841 2300 	strex	r3, r2, [r1]
 8003872:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1e6      	bne.n	8003848 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	3308      	adds	r3, #8
 8003880:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	e853 3f00 	ldrex	r3, [r3]
 8003888:	60fb      	str	r3, [r7, #12]
   return(result);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f023 0301 	bic.w	r3, r3, #1
 8003890:	64bb      	str	r3, [r7, #72]	; 0x48
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3308      	adds	r3, #8
 8003898:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800389a:	61fa      	str	r2, [r7, #28]
 800389c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389e:	69b9      	ldr	r1, [r7, #24]
 80038a0:	69fa      	ldr	r2, [r7, #28]
 80038a2:	e841 2300 	strex	r3, r2, [r1]
 80038a6:	617b      	str	r3, [r7, #20]
   return(result);
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1e5      	bne.n	800387a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e012      	b.n	80038e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3758      	adds	r7, #88	; 0x58
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	603b      	str	r3, [r7, #0]
 80038fc:	4613      	mov	r3, r2
 80038fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003900:	e04f      	b.n	80039a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003908:	d04b      	beq.n	80039a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800390a:	f7fd fa17 	bl	8000d3c <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	429a      	cmp	r2, r3
 8003918:	d302      	bcc.n	8003920 <UART_WaitOnFlagUntilTimeout+0x30>
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e04e      	b.n	80039c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0304 	and.w	r3, r3, #4
 800392e:	2b00      	cmp	r3, #0
 8003930:	d037      	beq.n	80039a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b80      	cmp	r3, #128	; 0x80
 8003936:	d034      	beq.n	80039a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2b40      	cmp	r3, #64	; 0x40
 800393c:	d031      	beq.n	80039a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	2b08      	cmp	r3, #8
 800394a:	d110      	bne.n	800396e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2208      	movs	r2, #8
 8003952:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 f838 	bl	80039ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2208      	movs	r2, #8
 800395e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e029      	b.n	80039c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800397c:	d111      	bne.n	80039a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003986:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 f81e 	bl	80039ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2220      	movs	r2, #32
 8003992:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e00f      	b.n	80039c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	69da      	ldr	r2, [r3, #28]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	4013      	ands	r3, r2
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	bf0c      	ite	eq
 80039b2:	2301      	moveq	r3, #1
 80039b4:	2300      	movne	r3, #0
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	461a      	mov	r2, r3
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d0a0      	beq.n	8003902 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b095      	sub	sp, #84	; 0x54
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039da:	e853 3f00 	ldrex	r3, [r3]
 80039de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	461a      	mov	r2, r3
 80039ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039f0:	643b      	str	r3, [r7, #64]	; 0x40
 80039f2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039f8:	e841 2300 	strex	r3, r2, [r1]
 80039fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1e6      	bne.n	80039d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3308      	adds	r3, #8
 8003a0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	e853 3f00 	ldrex	r3, [r3]
 8003a12:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	f023 0301 	bic.w	r3, r3, #1
 8003a1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3308      	adds	r3, #8
 8003a26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a30:	e841 2300 	strex	r3, r2, [r1]
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1e3      	bne.n	8003a04 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d118      	bne.n	8003a76 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	e853 3f00 	ldrex	r3, [r3]
 8003a50:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	f023 0310 	bic.w	r3, r3, #16
 8003a58:	647b      	str	r3, [r7, #68]	; 0x44
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a62:	61bb      	str	r3, [r7, #24]
 8003a64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a66:	6979      	ldr	r1, [r7, #20]
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	e841 2300 	strex	r3, r2, [r1]
 8003a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1e6      	bne.n	8003a44 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003a8a:	bf00      	nop
 8003a8c:	3754      	adds	r7, #84	; 0x54
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b085      	sub	sp, #20
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d101      	bne.n	8003aac <HAL_UARTEx_DisableFifoMode+0x16>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e027      	b.n	8003afc <HAL_UARTEx_DisableFifoMode+0x66>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2224      	movs	r2, #36	; 0x24
 8003ab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0201 	bic.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003ada:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e02d      	b.n	8003b7c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2224      	movs	r2, #36	; 0x24
 8003b2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0201 	bic.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f84f 	bl	8003c00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e02d      	b.n	8003bf8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2224      	movs	r2, #36	; 0x24
 8003ba8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0201 	bic.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f811 	bl	8003c00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d108      	bne.n	8003c22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003c20:	e031      	b.n	8003c86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003c22:	2308      	movs	r3, #8
 8003c24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003c26:	2308      	movs	r3, #8
 8003c28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	0e5b      	lsrs	r3, r3, #25
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	0f5b      	lsrs	r3, r3, #29
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c4a:	7bbb      	ldrb	r3, [r7, #14]
 8003c4c:	7b3a      	ldrb	r2, [r7, #12]
 8003c4e:	4911      	ldr	r1, [pc, #68]	; (8003c94 <UARTEx_SetNbDataToProcess+0x94>)
 8003c50:	5c8a      	ldrb	r2, [r1, r2]
 8003c52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003c56:	7b3a      	ldrb	r2, [r7, #12]
 8003c58:	490f      	ldr	r1, [pc, #60]	; (8003c98 <UARTEx_SetNbDataToProcess+0x98>)
 8003c5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	7b7a      	ldrb	r2, [r7, #13]
 8003c6c:	4909      	ldr	r1, [pc, #36]	; (8003c94 <UARTEx_SetNbDataToProcess+0x94>)
 8003c6e:	5c8a      	ldrb	r2, [r1, r2]
 8003c70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003c74:	7b7a      	ldrb	r2, [r7, #13]
 8003c76:	4908      	ldr	r1, [pc, #32]	; (8003c98 <UARTEx_SetNbDataToProcess+0x98>)
 8003c78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003c86:	bf00      	nop
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	08004c34 	.word	0x08004c34
 8003c98:	08004c3c 	.word	0x08004c3c

08003c9c <std>:
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	b510      	push	{r4, lr}
 8003ca0:	4604      	mov	r4, r0
 8003ca2:	e9c0 3300 	strd	r3, r3, [r0]
 8003ca6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003caa:	6083      	str	r3, [r0, #8]
 8003cac:	8181      	strh	r1, [r0, #12]
 8003cae:	6643      	str	r3, [r0, #100]	; 0x64
 8003cb0:	81c2      	strh	r2, [r0, #14]
 8003cb2:	6183      	str	r3, [r0, #24]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	2208      	movs	r2, #8
 8003cb8:	305c      	adds	r0, #92	; 0x5c
 8003cba:	f000 f91f 	bl	8003efc <memset>
 8003cbe:	4b0d      	ldr	r3, [pc, #52]	; (8003cf4 <std+0x58>)
 8003cc0:	6263      	str	r3, [r4, #36]	; 0x24
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <std+0x5c>)
 8003cc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8003cc6:	4b0d      	ldr	r3, [pc, #52]	; (8003cfc <std+0x60>)
 8003cc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003cca:	4b0d      	ldr	r3, [pc, #52]	; (8003d00 <std+0x64>)
 8003ccc:	6323      	str	r3, [r4, #48]	; 0x30
 8003cce:	4b0d      	ldr	r3, [pc, #52]	; (8003d04 <std+0x68>)
 8003cd0:	6224      	str	r4, [r4, #32]
 8003cd2:	429c      	cmp	r4, r3
 8003cd4:	d006      	beq.n	8003ce4 <std+0x48>
 8003cd6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003cda:	4294      	cmp	r4, r2
 8003cdc:	d002      	beq.n	8003ce4 <std+0x48>
 8003cde:	33d0      	adds	r3, #208	; 0xd0
 8003ce0:	429c      	cmp	r4, r3
 8003ce2:	d105      	bne.n	8003cf0 <std+0x54>
 8003ce4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cec:	f000 b938 	b.w	8003f60 <__retarget_lock_init_recursive>
 8003cf0:	bd10      	pop	{r4, pc}
 8003cf2:	bf00      	nop
 8003cf4:	080047c1 	.word	0x080047c1
 8003cf8:	080047e3 	.word	0x080047e3
 8003cfc:	0800481b 	.word	0x0800481b
 8003d00:	0800483f 	.word	0x0800483f
 8003d04:	200001cc 	.word	0x200001cc

08003d08 <stdio_exit_handler>:
 8003d08:	4a02      	ldr	r2, [pc, #8]	; (8003d14 <stdio_exit_handler+0xc>)
 8003d0a:	4903      	ldr	r1, [pc, #12]	; (8003d18 <stdio_exit_handler+0x10>)
 8003d0c:	4803      	ldr	r0, [pc, #12]	; (8003d1c <stdio_exit_handler+0x14>)
 8003d0e:	f000 b869 	b.w	8003de4 <_fwalk_sglue>
 8003d12:	bf00      	nop
 8003d14:	2000000c 	.word	0x2000000c
 8003d18:	08004759 	.word	0x08004759
 8003d1c:	20000018 	.word	0x20000018

08003d20 <cleanup_stdio>:
 8003d20:	6841      	ldr	r1, [r0, #4]
 8003d22:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <cleanup_stdio+0x34>)
 8003d24:	4299      	cmp	r1, r3
 8003d26:	b510      	push	{r4, lr}
 8003d28:	4604      	mov	r4, r0
 8003d2a:	d001      	beq.n	8003d30 <cleanup_stdio+0x10>
 8003d2c:	f000 fd14 	bl	8004758 <_fflush_r>
 8003d30:	68a1      	ldr	r1, [r4, #8]
 8003d32:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <cleanup_stdio+0x38>)
 8003d34:	4299      	cmp	r1, r3
 8003d36:	d002      	beq.n	8003d3e <cleanup_stdio+0x1e>
 8003d38:	4620      	mov	r0, r4
 8003d3a:	f000 fd0d 	bl	8004758 <_fflush_r>
 8003d3e:	68e1      	ldr	r1, [r4, #12]
 8003d40:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <cleanup_stdio+0x3c>)
 8003d42:	4299      	cmp	r1, r3
 8003d44:	d004      	beq.n	8003d50 <cleanup_stdio+0x30>
 8003d46:	4620      	mov	r0, r4
 8003d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d4c:	f000 bd04 	b.w	8004758 <_fflush_r>
 8003d50:	bd10      	pop	{r4, pc}
 8003d52:	bf00      	nop
 8003d54:	200001cc 	.word	0x200001cc
 8003d58:	20000234 	.word	0x20000234
 8003d5c:	2000029c 	.word	0x2000029c

08003d60 <global_stdio_init.part.0>:
 8003d60:	b510      	push	{r4, lr}
 8003d62:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <global_stdio_init.part.0+0x30>)
 8003d64:	4c0b      	ldr	r4, [pc, #44]	; (8003d94 <global_stdio_init.part.0+0x34>)
 8003d66:	4a0c      	ldr	r2, [pc, #48]	; (8003d98 <global_stdio_init.part.0+0x38>)
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	2104      	movs	r1, #4
 8003d70:	f7ff ff94 	bl	8003c9c <std>
 8003d74:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003d78:	2201      	movs	r2, #1
 8003d7a:	2109      	movs	r1, #9
 8003d7c:	f7ff ff8e 	bl	8003c9c <std>
 8003d80:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003d84:	2202      	movs	r2, #2
 8003d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d8a:	2112      	movs	r1, #18
 8003d8c:	f7ff bf86 	b.w	8003c9c <std>
 8003d90:	20000304 	.word	0x20000304
 8003d94:	200001cc 	.word	0x200001cc
 8003d98:	08003d09 	.word	0x08003d09

08003d9c <__sfp_lock_acquire>:
 8003d9c:	4801      	ldr	r0, [pc, #4]	; (8003da4 <__sfp_lock_acquire+0x8>)
 8003d9e:	f000 b8e0 	b.w	8003f62 <__retarget_lock_acquire_recursive>
 8003da2:	bf00      	nop
 8003da4:	20000309 	.word	0x20000309

08003da8 <__sfp_lock_release>:
 8003da8:	4801      	ldr	r0, [pc, #4]	; (8003db0 <__sfp_lock_release+0x8>)
 8003daa:	f000 b8db 	b.w	8003f64 <__retarget_lock_release_recursive>
 8003dae:	bf00      	nop
 8003db0:	20000309 	.word	0x20000309

08003db4 <__sinit>:
 8003db4:	b510      	push	{r4, lr}
 8003db6:	4604      	mov	r4, r0
 8003db8:	f7ff fff0 	bl	8003d9c <__sfp_lock_acquire>
 8003dbc:	6a23      	ldr	r3, [r4, #32]
 8003dbe:	b11b      	cbz	r3, 8003dc8 <__sinit+0x14>
 8003dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dc4:	f7ff bff0 	b.w	8003da8 <__sfp_lock_release>
 8003dc8:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <__sinit+0x28>)
 8003dca:	6223      	str	r3, [r4, #32]
 8003dcc:	4b04      	ldr	r3, [pc, #16]	; (8003de0 <__sinit+0x2c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1f5      	bne.n	8003dc0 <__sinit+0xc>
 8003dd4:	f7ff ffc4 	bl	8003d60 <global_stdio_init.part.0>
 8003dd8:	e7f2      	b.n	8003dc0 <__sinit+0xc>
 8003dda:	bf00      	nop
 8003ddc:	08003d21 	.word	0x08003d21
 8003de0:	20000304 	.word	0x20000304

08003de4 <_fwalk_sglue>:
 8003de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003de8:	4607      	mov	r7, r0
 8003dea:	4688      	mov	r8, r1
 8003dec:	4614      	mov	r4, r2
 8003dee:	2600      	movs	r6, #0
 8003df0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003df4:	f1b9 0901 	subs.w	r9, r9, #1
 8003df8:	d505      	bpl.n	8003e06 <_fwalk_sglue+0x22>
 8003dfa:	6824      	ldr	r4, [r4, #0]
 8003dfc:	2c00      	cmp	r4, #0
 8003dfe:	d1f7      	bne.n	8003df0 <_fwalk_sglue+0xc>
 8003e00:	4630      	mov	r0, r6
 8003e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e06:	89ab      	ldrh	r3, [r5, #12]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d907      	bls.n	8003e1c <_fwalk_sglue+0x38>
 8003e0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e10:	3301      	adds	r3, #1
 8003e12:	d003      	beq.n	8003e1c <_fwalk_sglue+0x38>
 8003e14:	4629      	mov	r1, r5
 8003e16:	4638      	mov	r0, r7
 8003e18:	47c0      	blx	r8
 8003e1a:	4306      	orrs	r6, r0
 8003e1c:	3568      	adds	r5, #104	; 0x68
 8003e1e:	e7e9      	b.n	8003df4 <_fwalk_sglue+0x10>

08003e20 <iprintf>:
 8003e20:	b40f      	push	{r0, r1, r2, r3}
 8003e22:	b507      	push	{r0, r1, r2, lr}
 8003e24:	4906      	ldr	r1, [pc, #24]	; (8003e40 <iprintf+0x20>)
 8003e26:	ab04      	add	r3, sp, #16
 8003e28:	6808      	ldr	r0, [r1, #0]
 8003e2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e2e:	6881      	ldr	r1, [r0, #8]
 8003e30:	9301      	str	r3, [sp, #4]
 8003e32:	f000 f8c1 	bl	8003fb8 <_vfiprintf_r>
 8003e36:	b003      	add	sp, #12
 8003e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e3c:	b004      	add	sp, #16
 8003e3e:	4770      	bx	lr
 8003e40:	20000064 	.word	0x20000064

08003e44 <_puts_r>:
 8003e44:	6a03      	ldr	r3, [r0, #32]
 8003e46:	b570      	push	{r4, r5, r6, lr}
 8003e48:	6884      	ldr	r4, [r0, #8]
 8003e4a:	4605      	mov	r5, r0
 8003e4c:	460e      	mov	r6, r1
 8003e4e:	b90b      	cbnz	r3, 8003e54 <_puts_r+0x10>
 8003e50:	f7ff ffb0 	bl	8003db4 <__sinit>
 8003e54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e56:	07db      	lsls	r3, r3, #31
 8003e58:	d405      	bmi.n	8003e66 <_puts_r+0x22>
 8003e5a:	89a3      	ldrh	r3, [r4, #12]
 8003e5c:	0598      	lsls	r0, r3, #22
 8003e5e:	d402      	bmi.n	8003e66 <_puts_r+0x22>
 8003e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e62:	f000 f87e 	bl	8003f62 <__retarget_lock_acquire_recursive>
 8003e66:	89a3      	ldrh	r3, [r4, #12]
 8003e68:	0719      	lsls	r1, r3, #28
 8003e6a:	d513      	bpl.n	8003e94 <_puts_r+0x50>
 8003e6c:	6923      	ldr	r3, [r4, #16]
 8003e6e:	b18b      	cbz	r3, 8003e94 <_puts_r+0x50>
 8003e70:	3e01      	subs	r6, #1
 8003e72:	68a3      	ldr	r3, [r4, #8]
 8003e74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	60a3      	str	r3, [r4, #8]
 8003e7c:	b9e9      	cbnz	r1, 8003eba <_puts_r+0x76>
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	da2e      	bge.n	8003ee0 <_puts_r+0x9c>
 8003e82:	4622      	mov	r2, r4
 8003e84:	210a      	movs	r1, #10
 8003e86:	4628      	mov	r0, r5
 8003e88:	f000 fcdd 	bl	8004846 <__swbuf_r>
 8003e8c:	3001      	adds	r0, #1
 8003e8e:	d007      	beq.n	8003ea0 <_puts_r+0x5c>
 8003e90:	250a      	movs	r5, #10
 8003e92:	e007      	b.n	8003ea4 <_puts_r+0x60>
 8003e94:	4621      	mov	r1, r4
 8003e96:	4628      	mov	r0, r5
 8003e98:	f000 fd12 	bl	80048c0 <__swsetup_r>
 8003e9c:	2800      	cmp	r0, #0
 8003e9e:	d0e7      	beq.n	8003e70 <_puts_r+0x2c>
 8003ea0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003ea4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ea6:	07da      	lsls	r2, r3, #31
 8003ea8:	d405      	bmi.n	8003eb6 <_puts_r+0x72>
 8003eaa:	89a3      	ldrh	r3, [r4, #12]
 8003eac:	059b      	lsls	r3, r3, #22
 8003eae:	d402      	bmi.n	8003eb6 <_puts_r+0x72>
 8003eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003eb2:	f000 f857 	bl	8003f64 <__retarget_lock_release_recursive>
 8003eb6:	4628      	mov	r0, r5
 8003eb8:	bd70      	pop	{r4, r5, r6, pc}
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	da04      	bge.n	8003ec8 <_puts_r+0x84>
 8003ebe:	69a2      	ldr	r2, [r4, #24]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	dc06      	bgt.n	8003ed2 <_puts_r+0x8e>
 8003ec4:	290a      	cmp	r1, #10
 8003ec6:	d004      	beq.n	8003ed2 <_puts_r+0x8e>
 8003ec8:	6823      	ldr	r3, [r4, #0]
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	6022      	str	r2, [r4, #0]
 8003ece:	7019      	strb	r1, [r3, #0]
 8003ed0:	e7cf      	b.n	8003e72 <_puts_r+0x2e>
 8003ed2:	4622      	mov	r2, r4
 8003ed4:	4628      	mov	r0, r5
 8003ed6:	f000 fcb6 	bl	8004846 <__swbuf_r>
 8003eda:	3001      	adds	r0, #1
 8003edc:	d1c9      	bne.n	8003e72 <_puts_r+0x2e>
 8003ede:	e7df      	b.n	8003ea0 <_puts_r+0x5c>
 8003ee0:	6823      	ldr	r3, [r4, #0]
 8003ee2:	250a      	movs	r5, #10
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	6022      	str	r2, [r4, #0]
 8003ee8:	701d      	strb	r5, [r3, #0]
 8003eea:	e7db      	b.n	8003ea4 <_puts_r+0x60>

08003eec <puts>:
 8003eec:	4b02      	ldr	r3, [pc, #8]	; (8003ef8 <puts+0xc>)
 8003eee:	4601      	mov	r1, r0
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	f7ff bfa7 	b.w	8003e44 <_puts_r>
 8003ef6:	bf00      	nop
 8003ef8:	20000064 	.word	0x20000064

08003efc <memset>:
 8003efc:	4402      	add	r2, r0
 8003efe:	4603      	mov	r3, r0
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d100      	bne.n	8003f06 <memset+0xa>
 8003f04:	4770      	bx	lr
 8003f06:	f803 1b01 	strb.w	r1, [r3], #1
 8003f0a:	e7f9      	b.n	8003f00 <memset+0x4>

08003f0c <__errno>:
 8003f0c:	4b01      	ldr	r3, [pc, #4]	; (8003f14 <__errno+0x8>)
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	20000064 	.word	0x20000064

08003f18 <__libc_init_array>:
 8003f18:	b570      	push	{r4, r5, r6, lr}
 8003f1a:	4d0d      	ldr	r5, [pc, #52]	; (8003f50 <__libc_init_array+0x38>)
 8003f1c:	4c0d      	ldr	r4, [pc, #52]	; (8003f54 <__libc_init_array+0x3c>)
 8003f1e:	1b64      	subs	r4, r4, r5
 8003f20:	10a4      	asrs	r4, r4, #2
 8003f22:	2600      	movs	r6, #0
 8003f24:	42a6      	cmp	r6, r4
 8003f26:	d109      	bne.n	8003f3c <__libc_init_array+0x24>
 8003f28:	4d0b      	ldr	r5, [pc, #44]	; (8003f58 <__libc_init_array+0x40>)
 8003f2a:	4c0c      	ldr	r4, [pc, #48]	; (8003f5c <__libc_init_array+0x44>)
 8003f2c:	f000 fe46 	bl	8004bbc <_init>
 8003f30:	1b64      	subs	r4, r4, r5
 8003f32:	10a4      	asrs	r4, r4, #2
 8003f34:	2600      	movs	r6, #0
 8003f36:	42a6      	cmp	r6, r4
 8003f38:	d105      	bne.n	8003f46 <__libc_init_array+0x2e>
 8003f3a:	bd70      	pop	{r4, r5, r6, pc}
 8003f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f40:	4798      	blx	r3
 8003f42:	3601      	adds	r6, #1
 8003f44:	e7ee      	b.n	8003f24 <__libc_init_array+0xc>
 8003f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f4a:	4798      	blx	r3
 8003f4c:	3601      	adds	r6, #1
 8003f4e:	e7f2      	b.n	8003f36 <__libc_init_array+0x1e>
 8003f50:	08004c80 	.word	0x08004c80
 8003f54:	08004c80 	.word	0x08004c80
 8003f58:	08004c80 	.word	0x08004c80
 8003f5c:	08004c84 	.word	0x08004c84

08003f60 <__retarget_lock_init_recursive>:
 8003f60:	4770      	bx	lr

08003f62 <__retarget_lock_acquire_recursive>:
 8003f62:	4770      	bx	lr

08003f64 <__retarget_lock_release_recursive>:
 8003f64:	4770      	bx	lr

08003f66 <__sfputc_r>:
 8003f66:	6893      	ldr	r3, [r2, #8]
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	b410      	push	{r4}
 8003f6e:	6093      	str	r3, [r2, #8]
 8003f70:	da08      	bge.n	8003f84 <__sfputc_r+0x1e>
 8003f72:	6994      	ldr	r4, [r2, #24]
 8003f74:	42a3      	cmp	r3, r4
 8003f76:	db01      	blt.n	8003f7c <__sfputc_r+0x16>
 8003f78:	290a      	cmp	r1, #10
 8003f7a:	d103      	bne.n	8003f84 <__sfputc_r+0x1e>
 8003f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f80:	f000 bc61 	b.w	8004846 <__swbuf_r>
 8003f84:	6813      	ldr	r3, [r2, #0]
 8003f86:	1c58      	adds	r0, r3, #1
 8003f88:	6010      	str	r0, [r2, #0]
 8003f8a:	7019      	strb	r1, [r3, #0]
 8003f8c:	4608      	mov	r0, r1
 8003f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <__sfputs_r>:
 8003f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f96:	4606      	mov	r6, r0
 8003f98:	460f      	mov	r7, r1
 8003f9a:	4614      	mov	r4, r2
 8003f9c:	18d5      	adds	r5, r2, r3
 8003f9e:	42ac      	cmp	r4, r5
 8003fa0:	d101      	bne.n	8003fa6 <__sfputs_r+0x12>
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	e007      	b.n	8003fb6 <__sfputs_r+0x22>
 8003fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003faa:	463a      	mov	r2, r7
 8003fac:	4630      	mov	r0, r6
 8003fae:	f7ff ffda 	bl	8003f66 <__sfputc_r>
 8003fb2:	1c43      	adds	r3, r0, #1
 8003fb4:	d1f3      	bne.n	8003f9e <__sfputs_r+0xa>
 8003fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003fb8 <_vfiprintf_r>:
 8003fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fbc:	460d      	mov	r5, r1
 8003fbe:	b09d      	sub	sp, #116	; 0x74
 8003fc0:	4614      	mov	r4, r2
 8003fc2:	4698      	mov	r8, r3
 8003fc4:	4606      	mov	r6, r0
 8003fc6:	b118      	cbz	r0, 8003fd0 <_vfiprintf_r+0x18>
 8003fc8:	6a03      	ldr	r3, [r0, #32]
 8003fca:	b90b      	cbnz	r3, 8003fd0 <_vfiprintf_r+0x18>
 8003fcc:	f7ff fef2 	bl	8003db4 <__sinit>
 8003fd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fd2:	07d9      	lsls	r1, r3, #31
 8003fd4:	d405      	bmi.n	8003fe2 <_vfiprintf_r+0x2a>
 8003fd6:	89ab      	ldrh	r3, [r5, #12]
 8003fd8:	059a      	lsls	r2, r3, #22
 8003fda:	d402      	bmi.n	8003fe2 <_vfiprintf_r+0x2a>
 8003fdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fde:	f7ff ffc0 	bl	8003f62 <__retarget_lock_acquire_recursive>
 8003fe2:	89ab      	ldrh	r3, [r5, #12]
 8003fe4:	071b      	lsls	r3, r3, #28
 8003fe6:	d501      	bpl.n	8003fec <_vfiprintf_r+0x34>
 8003fe8:	692b      	ldr	r3, [r5, #16]
 8003fea:	b99b      	cbnz	r3, 8004014 <_vfiprintf_r+0x5c>
 8003fec:	4629      	mov	r1, r5
 8003fee:	4630      	mov	r0, r6
 8003ff0:	f000 fc66 	bl	80048c0 <__swsetup_r>
 8003ff4:	b170      	cbz	r0, 8004014 <_vfiprintf_r+0x5c>
 8003ff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ff8:	07dc      	lsls	r4, r3, #31
 8003ffa:	d504      	bpl.n	8004006 <_vfiprintf_r+0x4e>
 8003ffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004000:	b01d      	add	sp, #116	; 0x74
 8004002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004006:	89ab      	ldrh	r3, [r5, #12]
 8004008:	0598      	lsls	r0, r3, #22
 800400a:	d4f7      	bmi.n	8003ffc <_vfiprintf_r+0x44>
 800400c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800400e:	f7ff ffa9 	bl	8003f64 <__retarget_lock_release_recursive>
 8004012:	e7f3      	b.n	8003ffc <_vfiprintf_r+0x44>
 8004014:	2300      	movs	r3, #0
 8004016:	9309      	str	r3, [sp, #36]	; 0x24
 8004018:	2320      	movs	r3, #32
 800401a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800401e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004022:	2330      	movs	r3, #48	; 0x30
 8004024:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80041d8 <_vfiprintf_r+0x220>
 8004028:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800402c:	f04f 0901 	mov.w	r9, #1
 8004030:	4623      	mov	r3, r4
 8004032:	469a      	mov	sl, r3
 8004034:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004038:	b10a      	cbz	r2, 800403e <_vfiprintf_r+0x86>
 800403a:	2a25      	cmp	r2, #37	; 0x25
 800403c:	d1f9      	bne.n	8004032 <_vfiprintf_r+0x7a>
 800403e:	ebba 0b04 	subs.w	fp, sl, r4
 8004042:	d00b      	beq.n	800405c <_vfiprintf_r+0xa4>
 8004044:	465b      	mov	r3, fp
 8004046:	4622      	mov	r2, r4
 8004048:	4629      	mov	r1, r5
 800404a:	4630      	mov	r0, r6
 800404c:	f7ff ffa2 	bl	8003f94 <__sfputs_r>
 8004050:	3001      	adds	r0, #1
 8004052:	f000 80a9 	beq.w	80041a8 <_vfiprintf_r+0x1f0>
 8004056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004058:	445a      	add	r2, fp
 800405a:	9209      	str	r2, [sp, #36]	; 0x24
 800405c:	f89a 3000 	ldrb.w	r3, [sl]
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 80a1 	beq.w	80041a8 <_vfiprintf_r+0x1f0>
 8004066:	2300      	movs	r3, #0
 8004068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800406c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004070:	f10a 0a01 	add.w	sl, sl, #1
 8004074:	9304      	str	r3, [sp, #16]
 8004076:	9307      	str	r3, [sp, #28]
 8004078:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800407c:	931a      	str	r3, [sp, #104]	; 0x68
 800407e:	4654      	mov	r4, sl
 8004080:	2205      	movs	r2, #5
 8004082:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004086:	4854      	ldr	r0, [pc, #336]	; (80041d8 <_vfiprintf_r+0x220>)
 8004088:	f7fc f8ca 	bl	8000220 <memchr>
 800408c:	9a04      	ldr	r2, [sp, #16]
 800408e:	b9d8      	cbnz	r0, 80040c8 <_vfiprintf_r+0x110>
 8004090:	06d1      	lsls	r1, r2, #27
 8004092:	bf44      	itt	mi
 8004094:	2320      	movmi	r3, #32
 8004096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800409a:	0713      	lsls	r3, r2, #28
 800409c:	bf44      	itt	mi
 800409e:	232b      	movmi	r3, #43	; 0x2b
 80040a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040a4:	f89a 3000 	ldrb.w	r3, [sl]
 80040a8:	2b2a      	cmp	r3, #42	; 0x2a
 80040aa:	d015      	beq.n	80040d8 <_vfiprintf_r+0x120>
 80040ac:	9a07      	ldr	r2, [sp, #28]
 80040ae:	4654      	mov	r4, sl
 80040b0:	2000      	movs	r0, #0
 80040b2:	f04f 0c0a 	mov.w	ip, #10
 80040b6:	4621      	mov	r1, r4
 80040b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040bc:	3b30      	subs	r3, #48	; 0x30
 80040be:	2b09      	cmp	r3, #9
 80040c0:	d94d      	bls.n	800415e <_vfiprintf_r+0x1a6>
 80040c2:	b1b0      	cbz	r0, 80040f2 <_vfiprintf_r+0x13a>
 80040c4:	9207      	str	r2, [sp, #28]
 80040c6:	e014      	b.n	80040f2 <_vfiprintf_r+0x13a>
 80040c8:	eba0 0308 	sub.w	r3, r0, r8
 80040cc:	fa09 f303 	lsl.w	r3, r9, r3
 80040d0:	4313      	orrs	r3, r2
 80040d2:	9304      	str	r3, [sp, #16]
 80040d4:	46a2      	mov	sl, r4
 80040d6:	e7d2      	b.n	800407e <_vfiprintf_r+0xc6>
 80040d8:	9b03      	ldr	r3, [sp, #12]
 80040da:	1d19      	adds	r1, r3, #4
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	9103      	str	r1, [sp, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	bfbb      	ittet	lt
 80040e4:	425b      	neglt	r3, r3
 80040e6:	f042 0202 	orrlt.w	r2, r2, #2
 80040ea:	9307      	strge	r3, [sp, #28]
 80040ec:	9307      	strlt	r3, [sp, #28]
 80040ee:	bfb8      	it	lt
 80040f0:	9204      	strlt	r2, [sp, #16]
 80040f2:	7823      	ldrb	r3, [r4, #0]
 80040f4:	2b2e      	cmp	r3, #46	; 0x2e
 80040f6:	d10c      	bne.n	8004112 <_vfiprintf_r+0x15a>
 80040f8:	7863      	ldrb	r3, [r4, #1]
 80040fa:	2b2a      	cmp	r3, #42	; 0x2a
 80040fc:	d134      	bne.n	8004168 <_vfiprintf_r+0x1b0>
 80040fe:	9b03      	ldr	r3, [sp, #12]
 8004100:	1d1a      	adds	r2, r3, #4
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	9203      	str	r2, [sp, #12]
 8004106:	2b00      	cmp	r3, #0
 8004108:	bfb8      	it	lt
 800410a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800410e:	3402      	adds	r4, #2
 8004110:	9305      	str	r3, [sp, #20]
 8004112:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80041e8 <_vfiprintf_r+0x230>
 8004116:	7821      	ldrb	r1, [r4, #0]
 8004118:	2203      	movs	r2, #3
 800411a:	4650      	mov	r0, sl
 800411c:	f7fc f880 	bl	8000220 <memchr>
 8004120:	b138      	cbz	r0, 8004132 <_vfiprintf_r+0x17a>
 8004122:	9b04      	ldr	r3, [sp, #16]
 8004124:	eba0 000a 	sub.w	r0, r0, sl
 8004128:	2240      	movs	r2, #64	; 0x40
 800412a:	4082      	lsls	r2, r0
 800412c:	4313      	orrs	r3, r2
 800412e:	3401      	adds	r4, #1
 8004130:	9304      	str	r3, [sp, #16]
 8004132:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004136:	4829      	ldr	r0, [pc, #164]	; (80041dc <_vfiprintf_r+0x224>)
 8004138:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800413c:	2206      	movs	r2, #6
 800413e:	f7fc f86f 	bl	8000220 <memchr>
 8004142:	2800      	cmp	r0, #0
 8004144:	d03f      	beq.n	80041c6 <_vfiprintf_r+0x20e>
 8004146:	4b26      	ldr	r3, [pc, #152]	; (80041e0 <_vfiprintf_r+0x228>)
 8004148:	bb1b      	cbnz	r3, 8004192 <_vfiprintf_r+0x1da>
 800414a:	9b03      	ldr	r3, [sp, #12]
 800414c:	3307      	adds	r3, #7
 800414e:	f023 0307 	bic.w	r3, r3, #7
 8004152:	3308      	adds	r3, #8
 8004154:	9303      	str	r3, [sp, #12]
 8004156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004158:	443b      	add	r3, r7
 800415a:	9309      	str	r3, [sp, #36]	; 0x24
 800415c:	e768      	b.n	8004030 <_vfiprintf_r+0x78>
 800415e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004162:	460c      	mov	r4, r1
 8004164:	2001      	movs	r0, #1
 8004166:	e7a6      	b.n	80040b6 <_vfiprintf_r+0xfe>
 8004168:	2300      	movs	r3, #0
 800416a:	3401      	adds	r4, #1
 800416c:	9305      	str	r3, [sp, #20]
 800416e:	4619      	mov	r1, r3
 8004170:	f04f 0c0a 	mov.w	ip, #10
 8004174:	4620      	mov	r0, r4
 8004176:	f810 2b01 	ldrb.w	r2, [r0], #1
 800417a:	3a30      	subs	r2, #48	; 0x30
 800417c:	2a09      	cmp	r2, #9
 800417e:	d903      	bls.n	8004188 <_vfiprintf_r+0x1d0>
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0c6      	beq.n	8004112 <_vfiprintf_r+0x15a>
 8004184:	9105      	str	r1, [sp, #20]
 8004186:	e7c4      	b.n	8004112 <_vfiprintf_r+0x15a>
 8004188:	fb0c 2101 	mla	r1, ip, r1, r2
 800418c:	4604      	mov	r4, r0
 800418e:	2301      	movs	r3, #1
 8004190:	e7f0      	b.n	8004174 <_vfiprintf_r+0x1bc>
 8004192:	ab03      	add	r3, sp, #12
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	462a      	mov	r2, r5
 8004198:	4b12      	ldr	r3, [pc, #72]	; (80041e4 <_vfiprintf_r+0x22c>)
 800419a:	a904      	add	r1, sp, #16
 800419c:	4630      	mov	r0, r6
 800419e:	f3af 8000 	nop.w
 80041a2:	4607      	mov	r7, r0
 80041a4:	1c78      	adds	r0, r7, #1
 80041a6:	d1d6      	bne.n	8004156 <_vfiprintf_r+0x19e>
 80041a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041aa:	07d9      	lsls	r1, r3, #31
 80041ac:	d405      	bmi.n	80041ba <_vfiprintf_r+0x202>
 80041ae:	89ab      	ldrh	r3, [r5, #12]
 80041b0:	059a      	lsls	r2, r3, #22
 80041b2:	d402      	bmi.n	80041ba <_vfiprintf_r+0x202>
 80041b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041b6:	f7ff fed5 	bl	8003f64 <__retarget_lock_release_recursive>
 80041ba:	89ab      	ldrh	r3, [r5, #12]
 80041bc:	065b      	lsls	r3, r3, #25
 80041be:	f53f af1d 	bmi.w	8003ffc <_vfiprintf_r+0x44>
 80041c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041c4:	e71c      	b.n	8004000 <_vfiprintf_r+0x48>
 80041c6:	ab03      	add	r3, sp, #12
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	462a      	mov	r2, r5
 80041cc:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <_vfiprintf_r+0x22c>)
 80041ce:	a904      	add	r1, sp, #16
 80041d0:	4630      	mov	r0, r6
 80041d2:	f000 f919 	bl	8004408 <_printf_i>
 80041d6:	e7e4      	b.n	80041a2 <_vfiprintf_r+0x1ea>
 80041d8:	08004c44 	.word	0x08004c44
 80041dc:	08004c4e 	.word	0x08004c4e
 80041e0:	00000000 	.word	0x00000000
 80041e4:	08003f95 	.word	0x08003f95
 80041e8:	08004c4a 	.word	0x08004c4a

080041ec <sbrk_aligned>:
 80041ec:	b570      	push	{r4, r5, r6, lr}
 80041ee:	4e0e      	ldr	r6, [pc, #56]	; (8004228 <sbrk_aligned+0x3c>)
 80041f0:	460c      	mov	r4, r1
 80041f2:	6831      	ldr	r1, [r6, #0]
 80041f4:	4605      	mov	r5, r0
 80041f6:	b911      	cbnz	r1, 80041fe <sbrk_aligned+0x12>
 80041f8:	f000 fc72 	bl	8004ae0 <_sbrk_r>
 80041fc:	6030      	str	r0, [r6, #0]
 80041fe:	4621      	mov	r1, r4
 8004200:	4628      	mov	r0, r5
 8004202:	f000 fc6d 	bl	8004ae0 <_sbrk_r>
 8004206:	1c43      	adds	r3, r0, #1
 8004208:	d00a      	beq.n	8004220 <sbrk_aligned+0x34>
 800420a:	1cc4      	adds	r4, r0, #3
 800420c:	f024 0403 	bic.w	r4, r4, #3
 8004210:	42a0      	cmp	r0, r4
 8004212:	d007      	beq.n	8004224 <sbrk_aligned+0x38>
 8004214:	1a21      	subs	r1, r4, r0
 8004216:	4628      	mov	r0, r5
 8004218:	f000 fc62 	bl	8004ae0 <_sbrk_r>
 800421c:	3001      	adds	r0, #1
 800421e:	d101      	bne.n	8004224 <sbrk_aligned+0x38>
 8004220:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004224:	4620      	mov	r0, r4
 8004226:	bd70      	pop	{r4, r5, r6, pc}
 8004228:	20000310 	.word	0x20000310

0800422c <_malloc_r>:
 800422c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004230:	1ccd      	adds	r5, r1, #3
 8004232:	f025 0503 	bic.w	r5, r5, #3
 8004236:	3508      	adds	r5, #8
 8004238:	2d0c      	cmp	r5, #12
 800423a:	bf38      	it	cc
 800423c:	250c      	movcc	r5, #12
 800423e:	2d00      	cmp	r5, #0
 8004240:	4607      	mov	r7, r0
 8004242:	db01      	blt.n	8004248 <_malloc_r+0x1c>
 8004244:	42a9      	cmp	r1, r5
 8004246:	d905      	bls.n	8004254 <_malloc_r+0x28>
 8004248:	230c      	movs	r3, #12
 800424a:	603b      	str	r3, [r7, #0]
 800424c:	2600      	movs	r6, #0
 800424e:	4630      	mov	r0, r6
 8004250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004254:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004328 <_malloc_r+0xfc>
 8004258:	f000 faa6 	bl	80047a8 <__malloc_lock>
 800425c:	f8d8 3000 	ldr.w	r3, [r8]
 8004260:	461c      	mov	r4, r3
 8004262:	bb5c      	cbnz	r4, 80042bc <_malloc_r+0x90>
 8004264:	4629      	mov	r1, r5
 8004266:	4638      	mov	r0, r7
 8004268:	f7ff ffc0 	bl	80041ec <sbrk_aligned>
 800426c:	1c43      	adds	r3, r0, #1
 800426e:	4604      	mov	r4, r0
 8004270:	d155      	bne.n	800431e <_malloc_r+0xf2>
 8004272:	f8d8 4000 	ldr.w	r4, [r8]
 8004276:	4626      	mov	r6, r4
 8004278:	2e00      	cmp	r6, #0
 800427a:	d145      	bne.n	8004308 <_malloc_r+0xdc>
 800427c:	2c00      	cmp	r4, #0
 800427e:	d048      	beq.n	8004312 <_malloc_r+0xe6>
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	4631      	mov	r1, r6
 8004284:	4638      	mov	r0, r7
 8004286:	eb04 0903 	add.w	r9, r4, r3
 800428a:	f000 fc29 	bl	8004ae0 <_sbrk_r>
 800428e:	4581      	cmp	r9, r0
 8004290:	d13f      	bne.n	8004312 <_malloc_r+0xe6>
 8004292:	6821      	ldr	r1, [r4, #0]
 8004294:	1a6d      	subs	r5, r5, r1
 8004296:	4629      	mov	r1, r5
 8004298:	4638      	mov	r0, r7
 800429a:	f7ff ffa7 	bl	80041ec <sbrk_aligned>
 800429e:	3001      	adds	r0, #1
 80042a0:	d037      	beq.n	8004312 <_malloc_r+0xe6>
 80042a2:	6823      	ldr	r3, [r4, #0]
 80042a4:	442b      	add	r3, r5
 80042a6:	6023      	str	r3, [r4, #0]
 80042a8:	f8d8 3000 	ldr.w	r3, [r8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d038      	beq.n	8004322 <_malloc_r+0xf6>
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	42a2      	cmp	r2, r4
 80042b4:	d12b      	bne.n	800430e <_malloc_r+0xe2>
 80042b6:	2200      	movs	r2, #0
 80042b8:	605a      	str	r2, [r3, #4]
 80042ba:	e00f      	b.n	80042dc <_malloc_r+0xb0>
 80042bc:	6822      	ldr	r2, [r4, #0]
 80042be:	1b52      	subs	r2, r2, r5
 80042c0:	d41f      	bmi.n	8004302 <_malloc_r+0xd6>
 80042c2:	2a0b      	cmp	r2, #11
 80042c4:	d917      	bls.n	80042f6 <_malloc_r+0xca>
 80042c6:	1961      	adds	r1, r4, r5
 80042c8:	42a3      	cmp	r3, r4
 80042ca:	6025      	str	r5, [r4, #0]
 80042cc:	bf18      	it	ne
 80042ce:	6059      	strne	r1, [r3, #4]
 80042d0:	6863      	ldr	r3, [r4, #4]
 80042d2:	bf08      	it	eq
 80042d4:	f8c8 1000 	streq.w	r1, [r8]
 80042d8:	5162      	str	r2, [r4, r5]
 80042da:	604b      	str	r3, [r1, #4]
 80042dc:	4638      	mov	r0, r7
 80042de:	f104 060b 	add.w	r6, r4, #11
 80042e2:	f000 fa67 	bl	80047b4 <__malloc_unlock>
 80042e6:	f026 0607 	bic.w	r6, r6, #7
 80042ea:	1d23      	adds	r3, r4, #4
 80042ec:	1af2      	subs	r2, r6, r3
 80042ee:	d0ae      	beq.n	800424e <_malloc_r+0x22>
 80042f0:	1b9b      	subs	r3, r3, r6
 80042f2:	50a3      	str	r3, [r4, r2]
 80042f4:	e7ab      	b.n	800424e <_malloc_r+0x22>
 80042f6:	42a3      	cmp	r3, r4
 80042f8:	6862      	ldr	r2, [r4, #4]
 80042fa:	d1dd      	bne.n	80042b8 <_malloc_r+0x8c>
 80042fc:	f8c8 2000 	str.w	r2, [r8]
 8004300:	e7ec      	b.n	80042dc <_malloc_r+0xb0>
 8004302:	4623      	mov	r3, r4
 8004304:	6864      	ldr	r4, [r4, #4]
 8004306:	e7ac      	b.n	8004262 <_malloc_r+0x36>
 8004308:	4634      	mov	r4, r6
 800430a:	6876      	ldr	r6, [r6, #4]
 800430c:	e7b4      	b.n	8004278 <_malloc_r+0x4c>
 800430e:	4613      	mov	r3, r2
 8004310:	e7cc      	b.n	80042ac <_malloc_r+0x80>
 8004312:	230c      	movs	r3, #12
 8004314:	603b      	str	r3, [r7, #0]
 8004316:	4638      	mov	r0, r7
 8004318:	f000 fa4c 	bl	80047b4 <__malloc_unlock>
 800431c:	e797      	b.n	800424e <_malloc_r+0x22>
 800431e:	6025      	str	r5, [r4, #0]
 8004320:	e7dc      	b.n	80042dc <_malloc_r+0xb0>
 8004322:	605b      	str	r3, [r3, #4]
 8004324:	deff      	udf	#255	; 0xff
 8004326:	bf00      	nop
 8004328:	2000030c 	.word	0x2000030c

0800432c <_printf_common>:
 800432c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004330:	4616      	mov	r6, r2
 8004332:	4699      	mov	r9, r3
 8004334:	688a      	ldr	r2, [r1, #8]
 8004336:	690b      	ldr	r3, [r1, #16]
 8004338:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800433c:	4293      	cmp	r3, r2
 800433e:	bfb8      	it	lt
 8004340:	4613      	movlt	r3, r2
 8004342:	6033      	str	r3, [r6, #0]
 8004344:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004348:	4607      	mov	r7, r0
 800434a:	460c      	mov	r4, r1
 800434c:	b10a      	cbz	r2, 8004352 <_printf_common+0x26>
 800434e:	3301      	adds	r3, #1
 8004350:	6033      	str	r3, [r6, #0]
 8004352:	6823      	ldr	r3, [r4, #0]
 8004354:	0699      	lsls	r1, r3, #26
 8004356:	bf42      	ittt	mi
 8004358:	6833      	ldrmi	r3, [r6, #0]
 800435a:	3302      	addmi	r3, #2
 800435c:	6033      	strmi	r3, [r6, #0]
 800435e:	6825      	ldr	r5, [r4, #0]
 8004360:	f015 0506 	ands.w	r5, r5, #6
 8004364:	d106      	bne.n	8004374 <_printf_common+0x48>
 8004366:	f104 0a19 	add.w	sl, r4, #25
 800436a:	68e3      	ldr	r3, [r4, #12]
 800436c:	6832      	ldr	r2, [r6, #0]
 800436e:	1a9b      	subs	r3, r3, r2
 8004370:	42ab      	cmp	r3, r5
 8004372:	dc26      	bgt.n	80043c2 <_printf_common+0x96>
 8004374:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004378:	1e13      	subs	r3, r2, #0
 800437a:	6822      	ldr	r2, [r4, #0]
 800437c:	bf18      	it	ne
 800437e:	2301      	movne	r3, #1
 8004380:	0692      	lsls	r2, r2, #26
 8004382:	d42b      	bmi.n	80043dc <_printf_common+0xb0>
 8004384:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004388:	4649      	mov	r1, r9
 800438a:	4638      	mov	r0, r7
 800438c:	47c0      	blx	r8
 800438e:	3001      	adds	r0, #1
 8004390:	d01e      	beq.n	80043d0 <_printf_common+0xa4>
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	6922      	ldr	r2, [r4, #16]
 8004396:	f003 0306 	and.w	r3, r3, #6
 800439a:	2b04      	cmp	r3, #4
 800439c:	bf02      	ittt	eq
 800439e:	68e5      	ldreq	r5, [r4, #12]
 80043a0:	6833      	ldreq	r3, [r6, #0]
 80043a2:	1aed      	subeq	r5, r5, r3
 80043a4:	68a3      	ldr	r3, [r4, #8]
 80043a6:	bf0c      	ite	eq
 80043a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043ac:	2500      	movne	r5, #0
 80043ae:	4293      	cmp	r3, r2
 80043b0:	bfc4      	itt	gt
 80043b2:	1a9b      	subgt	r3, r3, r2
 80043b4:	18ed      	addgt	r5, r5, r3
 80043b6:	2600      	movs	r6, #0
 80043b8:	341a      	adds	r4, #26
 80043ba:	42b5      	cmp	r5, r6
 80043bc:	d11a      	bne.n	80043f4 <_printf_common+0xc8>
 80043be:	2000      	movs	r0, #0
 80043c0:	e008      	b.n	80043d4 <_printf_common+0xa8>
 80043c2:	2301      	movs	r3, #1
 80043c4:	4652      	mov	r2, sl
 80043c6:	4649      	mov	r1, r9
 80043c8:	4638      	mov	r0, r7
 80043ca:	47c0      	blx	r8
 80043cc:	3001      	adds	r0, #1
 80043ce:	d103      	bne.n	80043d8 <_printf_common+0xac>
 80043d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d8:	3501      	adds	r5, #1
 80043da:	e7c6      	b.n	800436a <_printf_common+0x3e>
 80043dc:	18e1      	adds	r1, r4, r3
 80043de:	1c5a      	adds	r2, r3, #1
 80043e0:	2030      	movs	r0, #48	; 0x30
 80043e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043e6:	4422      	add	r2, r4
 80043e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043f0:	3302      	adds	r3, #2
 80043f2:	e7c7      	b.n	8004384 <_printf_common+0x58>
 80043f4:	2301      	movs	r3, #1
 80043f6:	4622      	mov	r2, r4
 80043f8:	4649      	mov	r1, r9
 80043fa:	4638      	mov	r0, r7
 80043fc:	47c0      	blx	r8
 80043fe:	3001      	adds	r0, #1
 8004400:	d0e6      	beq.n	80043d0 <_printf_common+0xa4>
 8004402:	3601      	adds	r6, #1
 8004404:	e7d9      	b.n	80043ba <_printf_common+0x8e>
	...

08004408 <_printf_i>:
 8004408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800440c:	7e0f      	ldrb	r7, [r1, #24]
 800440e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004410:	2f78      	cmp	r7, #120	; 0x78
 8004412:	4691      	mov	r9, r2
 8004414:	4680      	mov	r8, r0
 8004416:	460c      	mov	r4, r1
 8004418:	469a      	mov	sl, r3
 800441a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800441e:	d807      	bhi.n	8004430 <_printf_i+0x28>
 8004420:	2f62      	cmp	r7, #98	; 0x62
 8004422:	d80a      	bhi.n	800443a <_printf_i+0x32>
 8004424:	2f00      	cmp	r7, #0
 8004426:	f000 80d4 	beq.w	80045d2 <_printf_i+0x1ca>
 800442a:	2f58      	cmp	r7, #88	; 0x58
 800442c:	f000 80c0 	beq.w	80045b0 <_printf_i+0x1a8>
 8004430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004434:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004438:	e03a      	b.n	80044b0 <_printf_i+0xa8>
 800443a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800443e:	2b15      	cmp	r3, #21
 8004440:	d8f6      	bhi.n	8004430 <_printf_i+0x28>
 8004442:	a101      	add	r1, pc, #4	; (adr r1, 8004448 <_printf_i+0x40>)
 8004444:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004448:	080044a1 	.word	0x080044a1
 800444c:	080044b5 	.word	0x080044b5
 8004450:	08004431 	.word	0x08004431
 8004454:	08004431 	.word	0x08004431
 8004458:	08004431 	.word	0x08004431
 800445c:	08004431 	.word	0x08004431
 8004460:	080044b5 	.word	0x080044b5
 8004464:	08004431 	.word	0x08004431
 8004468:	08004431 	.word	0x08004431
 800446c:	08004431 	.word	0x08004431
 8004470:	08004431 	.word	0x08004431
 8004474:	080045b9 	.word	0x080045b9
 8004478:	080044e1 	.word	0x080044e1
 800447c:	08004573 	.word	0x08004573
 8004480:	08004431 	.word	0x08004431
 8004484:	08004431 	.word	0x08004431
 8004488:	080045db 	.word	0x080045db
 800448c:	08004431 	.word	0x08004431
 8004490:	080044e1 	.word	0x080044e1
 8004494:	08004431 	.word	0x08004431
 8004498:	08004431 	.word	0x08004431
 800449c:	0800457b 	.word	0x0800457b
 80044a0:	682b      	ldr	r3, [r5, #0]
 80044a2:	1d1a      	adds	r2, r3, #4
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	602a      	str	r2, [r5, #0]
 80044a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044b0:	2301      	movs	r3, #1
 80044b2:	e09f      	b.n	80045f4 <_printf_i+0x1ec>
 80044b4:	6820      	ldr	r0, [r4, #0]
 80044b6:	682b      	ldr	r3, [r5, #0]
 80044b8:	0607      	lsls	r7, r0, #24
 80044ba:	f103 0104 	add.w	r1, r3, #4
 80044be:	6029      	str	r1, [r5, #0]
 80044c0:	d501      	bpl.n	80044c6 <_printf_i+0xbe>
 80044c2:	681e      	ldr	r6, [r3, #0]
 80044c4:	e003      	b.n	80044ce <_printf_i+0xc6>
 80044c6:	0646      	lsls	r6, r0, #25
 80044c8:	d5fb      	bpl.n	80044c2 <_printf_i+0xba>
 80044ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80044ce:	2e00      	cmp	r6, #0
 80044d0:	da03      	bge.n	80044da <_printf_i+0xd2>
 80044d2:	232d      	movs	r3, #45	; 0x2d
 80044d4:	4276      	negs	r6, r6
 80044d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044da:	485a      	ldr	r0, [pc, #360]	; (8004644 <_printf_i+0x23c>)
 80044dc:	230a      	movs	r3, #10
 80044de:	e012      	b.n	8004506 <_printf_i+0xfe>
 80044e0:	682b      	ldr	r3, [r5, #0]
 80044e2:	6820      	ldr	r0, [r4, #0]
 80044e4:	1d19      	adds	r1, r3, #4
 80044e6:	6029      	str	r1, [r5, #0]
 80044e8:	0605      	lsls	r5, r0, #24
 80044ea:	d501      	bpl.n	80044f0 <_printf_i+0xe8>
 80044ec:	681e      	ldr	r6, [r3, #0]
 80044ee:	e002      	b.n	80044f6 <_printf_i+0xee>
 80044f0:	0641      	lsls	r1, r0, #25
 80044f2:	d5fb      	bpl.n	80044ec <_printf_i+0xe4>
 80044f4:	881e      	ldrh	r6, [r3, #0]
 80044f6:	4853      	ldr	r0, [pc, #332]	; (8004644 <_printf_i+0x23c>)
 80044f8:	2f6f      	cmp	r7, #111	; 0x6f
 80044fa:	bf0c      	ite	eq
 80044fc:	2308      	moveq	r3, #8
 80044fe:	230a      	movne	r3, #10
 8004500:	2100      	movs	r1, #0
 8004502:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004506:	6865      	ldr	r5, [r4, #4]
 8004508:	60a5      	str	r5, [r4, #8]
 800450a:	2d00      	cmp	r5, #0
 800450c:	bfa2      	ittt	ge
 800450e:	6821      	ldrge	r1, [r4, #0]
 8004510:	f021 0104 	bicge.w	r1, r1, #4
 8004514:	6021      	strge	r1, [r4, #0]
 8004516:	b90e      	cbnz	r6, 800451c <_printf_i+0x114>
 8004518:	2d00      	cmp	r5, #0
 800451a:	d04b      	beq.n	80045b4 <_printf_i+0x1ac>
 800451c:	4615      	mov	r5, r2
 800451e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004522:	fb03 6711 	mls	r7, r3, r1, r6
 8004526:	5dc7      	ldrb	r7, [r0, r7]
 8004528:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800452c:	4637      	mov	r7, r6
 800452e:	42bb      	cmp	r3, r7
 8004530:	460e      	mov	r6, r1
 8004532:	d9f4      	bls.n	800451e <_printf_i+0x116>
 8004534:	2b08      	cmp	r3, #8
 8004536:	d10b      	bne.n	8004550 <_printf_i+0x148>
 8004538:	6823      	ldr	r3, [r4, #0]
 800453a:	07de      	lsls	r6, r3, #31
 800453c:	d508      	bpl.n	8004550 <_printf_i+0x148>
 800453e:	6923      	ldr	r3, [r4, #16]
 8004540:	6861      	ldr	r1, [r4, #4]
 8004542:	4299      	cmp	r1, r3
 8004544:	bfde      	ittt	le
 8004546:	2330      	movle	r3, #48	; 0x30
 8004548:	f805 3c01 	strble.w	r3, [r5, #-1]
 800454c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004550:	1b52      	subs	r2, r2, r5
 8004552:	6122      	str	r2, [r4, #16]
 8004554:	f8cd a000 	str.w	sl, [sp]
 8004558:	464b      	mov	r3, r9
 800455a:	aa03      	add	r2, sp, #12
 800455c:	4621      	mov	r1, r4
 800455e:	4640      	mov	r0, r8
 8004560:	f7ff fee4 	bl	800432c <_printf_common>
 8004564:	3001      	adds	r0, #1
 8004566:	d14a      	bne.n	80045fe <_printf_i+0x1f6>
 8004568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800456c:	b004      	add	sp, #16
 800456e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	f043 0320 	orr.w	r3, r3, #32
 8004578:	6023      	str	r3, [r4, #0]
 800457a:	4833      	ldr	r0, [pc, #204]	; (8004648 <_printf_i+0x240>)
 800457c:	2778      	movs	r7, #120	; 0x78
 800457e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	6829      	ldr	r1, [r5, #0]
 8004586:	061f      	lsls	r7, r3, #24
 8004588:	f851 6b04 	ldr.w	r6, [r1], #4
 800458c:	d402      	bmi.n	8004594 <_printf_i+0x18c>
 800458e:	065f      	lsls	r7, r3, #25
 8004590:	bf48      	it	mi
 8004592:	b2b6      	uxthmi	r6, r6
 8004594:	07df      	lsls	r7, r3, #31
 8004596:	bf48      	it	mi
 8004598:	f043 0320 	orrmi.w	r3, r3, #32
 800459c:	6029      	str	r1, [r5, #0]
 800459e:	bf48      	it	mi
 80045a0:	6023      	strmi	r3, [r4, #0]
 80045a2:	b91e      	cbnz	r6, 80045ac <_printf_i+0x1a4>
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	f023 0320 	bic.w	r3, r3, #32
 80045aa:	6023      	str	r3, [r4, #0]
 80045ac:	2310      	movs	r3, #16
 80045ae:	e7a7      	b.n	8004500 <_printf_i+0xf8>
 80045b0:	4824      	ldr	r0, [pc, #144]	; (8004644 <_printf_i+0x23c>)
 80045b2:	e7e4      	b.n	800457e <_printf_i+0x176>
 80045b4:	4615      	mov	r5, r2
 80045b6:	e7bd      	b.n	8004534 <_printf_i+0x12c>
 80045b8:	682b      	ldr	r3, [r5, #0]
 80045ba:	6826      	ldr	r6, [r4, #0]
 80045bc:	6961      	ldr	r1, [r4, #20]
 80045be:	1d18      	adds	r0, r3, #4
 80045c0:	6028      	str	r0, [r5, #0]
 80045c2:	0635      	lsls	r5, r6, #24
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	d501      	bpl.n	80045cc <_printf_i+0x1c4>
 80045c8:	6019      	str	r1, [r3, #0]
 80045ca:	e002      	b.n	80045d2 <_printf_i+0x1ca>
 80045cc:	0670      	lsls	r0, r6, #25
 80045ce:	d5fb      	bpl.n	80045c8 <_printf_i+0x1c0>
 80045d0:	8019      	strh	r1, [r3, #0]
 80045d2:	2300      	movs	r3, #0
 80045d4:	6123      	str	r3, [r4, #16]
 80045d6:	4615      	mov	r5, r2
 80045d8:	e7bc      	b.n	8004554 <_printf_i+0x14c>
 80045da:	682b      	ldr	r3, [r5, #0]
 80045dc:	1d1a      	adds	r2, r3, #4
 80045de:	602a      	str	r2, [r5, #0]
 80045e0:	681d      	ldr	r5, [r3, #0]
 80045e2:	6862      	ldr	r2, [r4, #4]
 80045e4:	2100      	movs	r1, #0
 80045e6:	4628      	mov	r0, r5
 80045e8:	f7fb fe1a 	bl	8000220 <memchr>
 80045ec:	b108      	cbz	r0, 80045f2 <_printf_i+0x1ea>
 80045ee:	1b40      	subs	r0, r0, r5
 80045f0:	6060      	str	r0, [r4, #4]
 80045f2:	6863      	ldr	r3, [r4, #4]
 80045f4:	6123      	str	r3, [r4, #16]
 80045f6:	2300      	movs	r3, #0
 80045f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045fc:	e7aa      	b.n	8004554 <_printf_i+0x14c>
 80045fe:	6923      	ldr	r3, [r4, #16]
 8004600:	462a      	mov	r2, r5
 8004602:	4649      	mov	r1, r9
 8004604:	4640      	mov	r0, r8
 8004606:	47d0      	blx	sl
 8004608:	3001      	adds	r0, #1
 800460a:	d0ad      	beq.n	8004568 <_printf_i+0x160>
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	079b      	lsls	r3, r3, #30
 8004610:	d413      	bmi.n	800463a <_printf_i+0x232>
 8004612:	68e0      	ldr	r0, [r4, #12]
 8004614:	9b03      	ldr	r3, [sp, #12]
 8004616:	4298      	cmp	r0, r3
 8004618:	bfb8      	it	lt
 800461a:	4618      	movlt	r0, r3
 800461c:	e7a6      	b.n	800456c <_printf_i+0x164>
 800461e:	2301      	movs	r3, #1
 8004620:	4632      	mov	r2, r6
 8004622:	4649      	mov	r1, r9
 8004624:	4640      	mov	r0, r8
 8004626:	47d0      	blx	sl
 8004628:	3001      	adds	r0, #1
 800462a:	d09d      	beq.n	8004568 <_printf_i+0x160>
 800462c:	3501      	adds	r5, #1
 800462e:	68e3      	ldr	r3, [r4, #12]
 8004630:	9903      	ldr	r1, [sp, #12]
 8004632:	1a5b      	subs	r3, r3, r1
 8004634:	42ab      	cmp	r3, r5
 8004636:	dcf2      	bgt.n	800461e <_printf_i+0x216>
 8004638:	e7eb      	b.n	8004612 <_printf_i+0x20a>
 800463a:	2500      	movs	r5, #0
 800463c:	f104 0619 	add.w	r6, r4, #25
 8004640:	e7f5      	b.n	800462e <_printf_i+0x226>
 8004642:	bf00      	nop
 8004644:	08004c55 	.word	0x08004c55
 8004648:	08004c66 	.word	0x08004c66

0800464c <__sflush_r>:
 800464c:	898a      	ldrh	r2, [r1, #12]
 800464e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004652:	4605      	mov	r5, r0
 8004654:	0710      	lsls	r0, r2, #28
 8004656:	460c      	mov	r4, r1
 8004658:	d458      	bmi.n	800470c <__sflush_r+0xc0>
 800465a:	684b      	ldr	r3, [r1, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	dc05      	bgt.n	800466c <__sflush_r+0x20>
 8004660:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004662:	2b00      	cmp	r3, #0
 8004664:	dc02      	bgt.n	800466c <__sflush_r+0x20>
 8004666:	2000      	movs	r0, #0
 8004668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800466c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800466e:	2e00      	cmp	r6, #0
 8004670:	d0f9      	beq.n	8004666 <__sflush_r+0x1a>
 8004672:	2300      	movs	r3, #0
 8004674:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004678:	682f      	ldr	r7, [r5, #0]
 800467a:	6a21      	ldr	r1, [r4, #32]
 800467c:	602b      	str	r3, [r5, #0]
 800467e:	d032      	beq.n	80046e6 <__sflush_r+0x9a>
 8004680:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004682:	89a3      	ldrh	r3, [r4, #12]
 8004684:	075a      	lsls	r2, r3, #29
 8004686:	d505      	bpl.n	8004694 <__sflush_r+0x48>
 8004688:	6863      	ldr	r3, [r4, #4]
 800468a:	1ac0      	subs	r0, r0, r3
 800468c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800468e:	b10b      	cbz	r3, 8004694 <__sflush_r+0x48>
 8004690:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004692:	1ac0      	subs	r0, r0, r3
 8004694:	2300      	movs	r3, #0
 8004696:	4602      	mov	r2, r0
 8004698:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800469a:	6a21      	ldr	r1, [r4, #32]
 800469c:	4628      	mov	r0, r5
 800469e:	47b0      	blx	r6
 80046a0:	1c43      	adds	r3, r0, #1
 80046a2:	89a3      	ldrh	r3, [r4, #12]
 80046a4:	d106      	bne.n	80046b4 <__sflush_r+0x68>
 80046a6:	6829      	ldr	r1, [r5, #0]
 80046a8:	291d      	cmp	r1, #29
 80046aa:	d82b      	bhi.n	8004704 <__sflush_r+0xb8>
 80046ac:	4a29      	ldr	r2, [pc, #164]	; (8004754 <__sflush_r+0x108>)
 80046ae:	410a      	asrs	r2, r1
 80046b0:	07d6      	lsls	r6, r2, #31
 80046b2:	d427      	bmi.n	8004704 <__sflush_r+0xb8>
 80046b4:	2200      	movs	r2, #0
 80046b6:	6062      	str	r2, [r4, #4]
 80046b8:	04d9      	lsls	r1, r3, #19
 80046ba:	6922      	ldr	r2, [r4, #16]
 80046bc:	6022      	str	r2, [r4, #0]
 80046be:	d504      	bpl.n	80046ca <__sflush_r+0x7e>
 80046c0:	1c42      	adds	r2, r0, #1
 80046c2:	d101      	bne.n	80046c8 <__sflush_r+0x7c>
 80046c4:	682b      	ldr	r3, [r5, #0]
 80046c6:	b903      	cbnz	r3, 80046ca <__sflush_r+0x7e>
 80046c8:	6560      	str	r0, [r4, #84]	; 0x54
 80046ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046cc:	602f      	str	r7, [r5, #0]
 80046ce:	2900      	cmp	r1, #0
 80046d0:	d0c9      	beq.n	8004666 <__sflush_r+0x1a>
 80046d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046d6:	4299      	cmp	r1, r3
 80046d8:	d002      	beq.n	80046e0 <__sflush_r+0x94>
 80046da:	4628      	mov	r0, r5
 80046dc:	f000 fa22 	bl	8004b24 <_free_r>
 80046e0:	2000      	movs	r0, #0
 80046e2:	6360      	str	r0, [r4, #52]	; 0x34
 80046e4:	e7c0      	b.n	8004668 <__sflush_r+0x1c>
 80046e6:	2301      	movs	r3, #1
 80046e8:	4628      	mov	r0, r5
 80046ea:	47b0      	blx	r6
 80046ec:	1c41      	adds	r1, r0, #1
 80046ee:	d1c8      	bne.n	8004682 <__sflush_r+0x36>
 80046f0:	682b      	ldr	r3, [r5, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0c5      	beq.n	8004682 <__sflush_r+0x36>
 80046f6:	2b1d      	cmp	r3, #29
 80046f8:	d001      	beq.n	80046fe <__sflush_r+0xb2>
 80046fa:	2b16      	cmp	r3, #22
 80046fc:	d101      	bne.n	8004702 <__sflush_r+0xb6>
 80046fe:	602f      	str	r7, [r5, #0]
 8004700:	e7b1      	b.n	8004666 <__sflush_r+0x1a>
 8004702:	89a3      	ldrh	r3, [r4, #12]
 8004704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004708:	81a3      	strh	r3, [r4, #12]
 800470a:	e7ad      	b.n	8004668 <__sflush_r+0x1c>
 800470c:	690f      	ldr	r7, [r1, #16]
 800470e:	2f00      	cmp	r7, #0
 8004710:	d0a9      	beq.n	8004666 <__sflush_r+0x1a>
 8004712:	0793      	lsls	r3, r2, #30
 8004714:	680e      	ldr	r6, [r1, #0]
 8004716:	bf08      	it	eq
 8004718:	694b      	ldreq	r3, [r1, #20]
 800471a:	600f      	str	r7, [r1, #0]
 800471c:	bf18      	it	ne
 800471e:	2300      	movne	r3, #0
 8004720:	eba6 0807 	sub.w	r8, r6, r7
 8004724:	608b      	str	r3, [r1, #8]
 8004726:	f1b8 0f00 	cmp.w	r8, #0
 800472a:	dd9c      	ble.n	8004666 <__sflush_r+0x1a>
 800472c:	6a21      	ldr	r1, [r4, #32]
 800472e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004730:	4643      	mov	r3, r8
 8004732:	463a      	mov	r2, r7
 8004734:	4628      	mov	r0, r5
 8004736:	47b0      	blx	r6
 8004738:	2800      	cmp	r0, #0
 800473a:	dc06      	bgt.n	800474a <__sflush_r+0xfe>
 800473c:	89a3      	ldrh	r3, [r4, #12]
 800473e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004742:	81a3      	strh	r3, [r4, #12]
 8004744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004748:	e78e      	b.n	8004668 <__sflush_r+0x1c>
 800474a:	4407      	add	r7, r0
 800474c:	eba8 0800 	sub.w	r8, r8, r0
 8004750:	e7e9      	b.n	8004726 <__sflush_r+0xda>
 8004752:	bf00      	nop
 8004754:	dfbffffe 	.word	0xdfbffffe

08004758 <_fflush_r>:
 8004758:	b538      	push	{r3, r4, r5, lr}
 800475a:	690b      	ldr	r3, [r1, #16]
 800475c:	4605      	mov	r5, r0
 800475e:	460c      	mov	r4, r1
 8004760:	b913      	cbnz	r3, 8004768 <_fflush_r+0x10>
 8004762:	2500      	movs	r5, #0
 8004764:	4628      	mov	r0, r5
 8004766:	bd38      	pop	{r3, r4, r5, pc}
 8004768:	b118      	cbz	r0, 8004772 <_fflush_r+0x1a>
 800476a:	6a03      	ldr	r3, [r0, #32]
 800476c:	b90b      	cbnz	r3, 8004772 <_fflush_r+0x1a>
 800476e:	f7ff fb21 	bl	8003db4 <__sinit>
 8004772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0f3      	beq.n	8004762 <_fflush_r+0xa>
 800477a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800477c:	07d0      	lsls	r0, r2, #31
 800477e:	d404      	bmi.n	800478a <_fflush_r+0x32>
 8004780:	0599      	lsls	r1, r3, #22
 8004782:	d402      	bmi.n	800478a <_fflush_r+0x32>
 8004784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004786:	f7ff fbec 	bl	8003f62 <__retarget_lock_acquire_recursive>
 800478a:	4628      	mov	r0, r5
 800478c:	4621      	mov	r1, r4
 800478e:	f7ff ff5d 	bl	800464c <__sflush_r>
 8004792:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004794:	07da      	lsls	r2, r3, #31
 8004796:	4605      	mov	r5, r0
 8004798:	d4e4      	bmi.n	8004764 <_fflush_r+0xc>
 800479a:	89a3      	ldrh	r3, [r4, #12]
 800479c:	059b      	lsls	r3, r3, #22
 800479e:	d4e1      	bmi.n	8004764 <_fflush_r+0xc>
 80047a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047a2:	f7ff fbdf 	bl	8003f64 <__retarget_lock_release_recursive>
 80047a6:	e7dd      	b.n	8004764 <_fflush_r+0xc>

080047a8 <__malloc_lock>:
 80047a8:	4801      	ldr	r0, [pc, #4]	; (80047b0 <__malloc_lock+0x8>)
 80047aa:	f7ff bbda 	b.w	8003f62 <__retarget_lock_acquire_recursive>
 80047ae:	bf00      	nop
 80047b0:	20000308 	.word	0x20000308

080047b4 <__malloc_unlock>:
 80047b4:	4801      	ldr	r0, [pc, #4]	; (80047bc <__malloc_unlock+0x8>)
 80047b6:	f7ff bbd5 	b.w	8003f64 <__retarget_lock_release_recursive>
 80047ba:	bf00      	nop
 80047bc:	20000308 	.word	0x20000308

080047c0 <__sread>:
 80047c0:	b510      	push	{r4, lr}
 80047c2:	460c      	mov	r4, r1
 80047c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047c8:	f000 f978 	bl	8004abc <_read_r>
 80047cc:	2800      	cmp	r0, #0
 80047ce:	bfab      	itete	ge
 80047d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80047d2:	89a3      	ldrhlt	r3, [r4, #12]
 80047d4:	181b      	addge	r3, r3, r0
 80047d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80047da:	bfac      	ite	ge
 80047dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80047de:	81a3      	strhlt	r3, [r4, #12]
 80047e0:	bd10      	pop	{r4, pc}

080047e2 <__swrite>:
 80047e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047e6:	461f      	mov	r7, r3
 80047e8:	898b      	ldrh	r3, [r1, #12]
 80047ea:	05db      	lsls	r3, r3, #23
 80047ec:	4605      	mov	r5, r0
 80047ee:	460c      	mov	r4, r1
 80047f0:	4616      	mov	r6, r2
 80047f2:	d505      	bpl.n	8004800 <__swrite+0x1e>
 80047f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047f8:	2302      	movs	r3, #2
 80047fa:	2200      	movs	r2, #0
 80047fc:	f000 f94c 	bl	8004a98 <_lseek_r>
 8004800:	89a3      	ldrh	r3, [r4, #12]
 8004802:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004806:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800480a:	81a3      	strh	r3, [r4, #12]
 800480c:	4632      	mov	r2, r6
 800480e:	463b      	mov	r3, r7
 8004810:	4628      	mov	r0, r5
 8004812:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004816:	f000 b973 	b.w	8004b00 <_write_r>

0800481a <__sseek>:
 800481a:	b510      	push	{r4, lr}
 800481c:	460c      	mov	r4, r1
 800481e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004822:	f000 f939 	bl	8004a98 <_lseek_r>
 8004826:	1c43      	adds	r3, r0, #1
 8004828:	89a3      	ldrh	r3, [r4, #12]
 800482a:	bf15      	itete	ne
 800482c:	6560      	strne	r0, [r4, #84]	; 0x54
 800482e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004832:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004836:	81a3      	strheq	r3, [r4, #12]
 8004838:	bf18      	it	ne
 800483a:	81a3      	strhne	r3, [r4, #12]
 800483c:	bd10      	pop	{r4, pc}

0800483e <__sclose>:
 800483e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004842:	f000 b8f7 	b.w	8004a34 <_close_r>

08004846 <__swbuf_r>:
 8004846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004848:	460e      	mov	r6, r1
 800484a:	4614      	mov	r4, r2
 800484c:	4605      	mov	r5, r0
 800484e:	b118      	cbz	r0, 8004858 <__swbuf_r+0x12>
 8004850:	6a03      	ldr	r3, [r0, #32]
 8004852:	b90b      	cbnz	r3, 8004858 <__swbuf_r+0x12>
 8004854:	f7ff faae 	bl	8003db4 <__sinit>
 8004858:	69a3      	ldr	r3, [r4, #24]
 800485a:	60a3      	str	r3, [r4, #8]
 800485c:	89a3      	ldrh	r3, [r4, #12]
 800485e:	071a      	lsls	r2, r3, #28
 8004860:	d525      	bpl.n	80048ae <__swbuf_r+0x68>
 8004862:	6923      	ldr	r3, [r4, #16]
 8004864:	b31b      	cbz	r3, 80048ae <__swbuf_r+0x68>
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	6922      	ldr	r2, [r4, #16]
 800486a:	1a98      	subs	r0, r3, r2
 800486c:	6963      	ldr	r3, [r4, #20]
 800486e:	b2f6      	uxtb	r6, r6
 8004870:	4283      	cmp	r3, r0
 8004872:	4637      	mov	r7, r6
 8004874:	dc04      	bgt.n	8004880 <__swbuf_r+0x3a>
 8004876:	4621      	mov	r1, r4
 8004878:	4628      	mov	r0, r5
 800487a:	f7ff ff6d 	bl	8004758 <_fflush_r>
 800487e:	b9e0      	cbnz	r0, 80048ba <__swbuf_r+0x74>
 8004880:	68a3      	ldr	r3, [r4, #8]
 8004882:	3b01      	subs	r3, #1
 8004884:	60a3      	str	r3, [r4, #8]
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	6022      	str	r2, [r4, #0]
 800488c:	701e      	strb	r6, [r3, #0]
 800488e:	6962      	ldr	r2, [r4, #20]
 8004890:	1c43      	adds	r3, r0, #1
 8004892:	429a      	cmp	r2, r3
 8004894:	d004      	beq.n	80048a0 <__swbuf_r+0x5a>
 8004896:	89a3      	ldrh	r3, [r4, #12]
 8004898:	07db      	lsls	r3, r3, #31
 800489a:	d506      	bpl.n	80048aa <__swbuf_r+0x64>
 800489c:	2e0a      	cmp	r6, #10
 800489e:	d104      	bne.n	80048aa <__swbuf_r+0x64>
 80048a0:	4621      	mov	r1, r4
 80048a2:	4628      	mov	r0, r5
 80048a4:	f7ff ff58 	bl	8004758 <_fflush_r>
 80048a8:	b938      	cbnz	r0, 80048ba <__swbuf_r+0x74>
 80048aa:	4638      	mov	r0, r7
 80048ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048ae:	4621      	mov	r1, r4
 80048b0:	4628      	mov	r0, r5
 80048b2:	f000 f805 	bl	80048c0 <__swsetup_r>
 80048b6:	2800      	cmp	r0, #0
 80048b8:	d0d5      	beq.n	8004866 <__swbuf_r+0x20>
 80048ba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80048be:	e7f4      	b.n	80048aa <__swbuf_r+0x64>

080048c0 <__swsetup_r>:
 80048c0:	b538      	push	{r3, r4, r5, lr}
 80048c2:	4b2a      	ldr	r3, [pc, #168]	; (800496c <__swsetup_r+0xac>)
 80048c4:	4605      	mov	r5, r0
 80048c6:	6818      	ldr	r0, [r3, #0]
 80048c8:	460c      	mov	r4, r1
 80048ca:	b118      	cbz	r0, 80048d4 <__swsetup_r+0x14>
 80048cc:	6a03      	ldr	r3, [r0, #32]
 80048ce:	b90b      	cbnz	r3, 80048d4 <__swsetup_r+0x14>
 80048d0:	f7ff fa70 	bl	8003db4 <__sinit>
 80048d4:	89a3      	ldrh	r3, [r4, #12]
 80048d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048da:	0718      	lsls	r0, r3, #28
 80048dc:	d422      	bmi.n	8004924 <__swsetup_r+0x64>
 80048de:	06d9      	lsls	r1, r3, #27
 80048e0:	d407      	bmi.n	80048f2 <__swsetup_r+0x32>
 80048e2:	2309      	movs	r3, #9
 80048e4:	602b      	str	r3, [r5, #0]
 80048e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80048ea:	81a3      	strh	r3, [r4, #12]
 80048ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048f0:	e034      	b.n	800495c <__swsetup_r+0x9c>
 80048f2:	0758      	lsls	r0, r3, #29
 80048f4:	d512      	bpl.n	800491c <__swsetup_r+0x5c>
 80048f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048f8:	b141      	cbz	r1, 800490c <__swsetup_r+0x4c>
 80048fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048fe:	4299      	cmp	r1, r3
 8004900:	d002      	beq.n	8004908 <__swsetup_r+0x48>
 8004902:	4628      	mov	r0, r5
 8004904:	f000 f90e 	bl	8004b24 <_free_r>
 8004908:	2300      	movs	r3, #0
 800490a:	6363      	str	r3, [r4, #52]	; 0x34
 800490c:	89a3      	ldrh	r3, [r4, #12]
 800490e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004912:	81a3      	strh	r3, [r4, #12]
 8004914:	2300      	movs	r3, #0
 8004916:	6063      	str	r3, [r4, #4]
 8004918:	6923      	ldr	r3, [r4, #16]
 800491a:	6023      	str	r3, [r4, #0]
 800491c:	89a3      	ldrh	r3, [r4, #12]
 800491e:	f043 0308 	orr.w	r3, r3, #8
 8004922:	81a3      	strh	r3, [r4, #12]
 8004924:	6923      	ldr	r3, [r4, #16]
 8004926:	b94b      	cbnz	r3, 800493c <__swsetup_r+0x7c>
 8004928:	89a3      	ldrh	r3, [r4, #12]
 800492a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800492e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004932:	d003      	beq.n	800493c <__swsetup_r+0x7c>
 8004934:	4621      	mov	r1, r4
 8004936:	4628      	mov	r0, r5
 8004938:	f000 f840 	bl	80049bc <__smakebuf_r>
 800493c:	89a0      	ldrh	r0, [r4, #12]
 800493e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004942:	f010 0301 	ands.w	r3, r0, #1
 8004946:	d00a      	beq.n	800495e <__swsetup_r+0x9e>
 8004948:	2300      	movs	r3, #0
 800494a:	60a3      	str	r3, [r4, #8]
 800494c:	6963      	ldr	r3, [r4, #20]
 800494e:	425b      	negs	r3, r3
 8004950:	61a3      	str	r3, [r4, #24]
 8004952:	6923      	ldr	r3, [r4, #16]
 8004954:	b943      	cbnz	r3, 8004968 <__swsetup_r+0xa8>
 8004956:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800495a:	d1c4      	bne.n	80048e6 <__swsetup_r+0x26>
 800495c:	bd38      	pop	{r3, r4, r5, pc}
 800495e:	0781      	lsls	r1, r0, #30
 8004960:	bf58      	it	pl
 8004962:	6963      	ldrpl	r3, [r4, #20]
 8004964:	60a3      	str	r3, [r4, #8]
 8004966:	e7f4      	b.n	8004952 <__swsetup_r+0x92>
 8004968:	2000      	movs	r0, #0
 800496a:	e7f7      	b.n	800495c <__swsetup_r+0x9c>
 800496c:	20000064 	.word	0x20000064

08004970 <__swhatbuf_r>:
 8004970:	b570      	push	{r4, r5, r6, lr}
 8004972:	460c      	mov	r4, r1
 8004974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004978:	2900      	cmp	r1, #0
 800497a:	b096      	sub	sp, #88	; 0x58
 800497c:	4615      	mov	r5, r2
 800497e:	461e      	mov	r6, r3
 8004980:	da0d      	bge.n	800499e <__swhatbuf_r+0x2e>
 8004982:	89a3      	ldrh	r3, [r4, #12]
 8004984:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004988:	f04f 0100 	mov.w	r1, #0
 800498c:	bf0c      	ite	eq
 800498e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004992:	2340      	movne	r3, #64	; 0x40
 8004994:	2000      	movs	r0, #0
 8004996:	6031      	str	r1, [r6, #0]
 8004998:	602b      	str	r3, [r5, #0]
 800499a:	b016      	add	sp, #88	; 0x58
 800499c:	bd70      	pop	{r4, r5, r6, pc}
 800499e:	466a      	mov	r2, sp
 80049a0:	f000 f858 	bl	8004a54 <_fstat_r>
 80049a4:	2800      	cmp	r0, #0
 80049a6:	dbec      	blt.n	8004982 <__swhatbuf_r+0x12>
 80049a8:	9901      	ldr	r1, [sp, #4]
 80049aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80049ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80049b2:	4259      	negs	r1, r3
 80049b4:	4159      	adcs	r1, r3
 80049b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049ba:	e7eb      	b.n	8004994 <__swhatbuf_r+0x24>

080049bc <__smakebuf_r>:
 80049bc:	898b      	ldrh	r3, [r1, #12]
 80049be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80049c0:	079d      	lsls	r5, r3, #30
 80049c2:	4606      	mov	r6, r0
 80049c4:	460c      	mov	r4, r1
 80049c6:	d507      	bpl.n	80049d8 <__smakebuf_r+0x1c>
 80049c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80049cc:	6023      	str	r3, [r4, #0]
 80049ce:	6123      	str	r3, [r4, #16]
 80049d0:	2301      	movs	r3, #1
 80049d2:	6163      	str	r3, [r4, #20]
 80049d4:	b002      	add	sp, #8
 80049d6:	bd70      	pop	{r4, r5, r6, pc}
 80049d8:	ab01      	add	r3, sp, #4
 80049da:	466a      	mov	r2, sp
 80049dc:	f7ff ffc8 	bl	8004970 <__swhatbuf_r>
 80049e0:	9900      	ldr	r1, [sp, #0]
 80049e2:	4605      	mov	r5, r0
 80049e4:	4630      	mov	r0, r6
 80049e6:	f7ff fc21 	bl	800422c <_malloc_r>
 80049ea:	b948      	cbnz	r0, 8004a00 <__smakebuf_r+0x44>
 80049ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049f0:	059a      	lsls	r2, r3, #22
 80049f2:	d4ef      	bmi.n	80049d4 <__smakebuf_r+0x18>
 80049f4:	f023 0303 	bic.w	r3, r3, #3
 80049f8:	f043 0302 	orr.w	r3, r3, #2
 80049fc:	81a3      	strh	r3, [r4, #12]
 80049fe:	e7e3      	b.n	80049c8 <__smakebuf_r+0xc>
 8004a00:	89a3      	ldrh	r3, [r4, #12]
 8004a02:	6020      	str	r0, [r4, #0]
 8004a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a08:	81a3      	strh	r3, [r4, #12]
 8004a0a:	9b00      	ldr	r3, [sp, #0]
 8004a0c:	6163      	str	r3, [r4, #20]
 8004a0e:	9b01      	ldr	r3, [sp, #4]
 8004a10:	6120      	str	r0, [r4, #16]
 8004a12:	b15b      	cbz	r3, 8004a2c <__smakebuf_r+0x70>
 8004a14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a18:	4630      	mov	r0, r6
 8004a1a:	f000 f82d 	bl	8004a78 <_isatty_r>
 8004a1e:	b128      	cbz	r0, 8004a2c <__smakebuf_r+0x70>
 8004a20:	89a3      	ldrh	r3, [r4, #12]
 8004a22:	f023 0303 	bic.w	r3, r3, #3
 8004a26:	f043 0301 	orr.w	r3, r3, #1
 8004a2a:	81a3      	strh	r3, [r4, #12]
 8004a2c:	89a3      	ldrh	r3, [r4, #12]
 8004a2e:	431d      	orrs	r5, r3
 8004a30:	81a5      	strh	r5, [r4, #12]
 8004a32:	e7cf      	b.n	80049d4 <__smakebuf_r+0x18>

08004a34 <_close_r>:
 8004a34:	b538      	push	{r3, r4, r5, lr}
 8004a36:	4d06      	ldr	r5, [pc, #24]	; (8004a50 <_close_r+0x1c>)
 8004a38:	2300      	movs	r3, #0
 8004a3a:	4604      	mov	r4, r0
 8004a3c:	4608      	mov	r0, r1
 8004a3e:	602b      	str	r3, [r5, #0]
 8004a40:	f7fc f871 	bl	8000b26 <_close>
 8004a44:	1c43      	adds	r3, r0, #1
 8004a46:	d102      	bne.n	8004a4e <_close_r+0x1a>
 8004a48:	682b      	ldr	r3, [r5, #0]
 8004a4a:	b103      	cbz	r3, 8004a4e <_close_r+0x1a>
 8004a4c:	6023      	str	r3, [r4, #0]
 8004a4e:	bd38      	pop	{r3, r4, r5, pc}
 8004a50:	20000314 	.word	0x20000314

08004a54 <_fstat_r>:
 8004a54:	b538      	push	{r3, r4, r5, lr}
 8004a56:	4d07      	ldr	r5, [pc, #28]	; (8004a74 <_fstat_r+0x20>)
 8004a58:	2300      	movs	r3, #0
 8004a5a:	4604      	mov	r4, r0
 8004a5c:	4608      	mov	r0, r1
 8004a5e:	4611      	mov	r1, r2
 8004a60:	602b      	str	r3, [r5, #0]
 8004a62:	f7fc f86c 	bl	8000b3e <_fstat>
 8004a66:	1c43      	adds	r3, r0, #1
 8004a68:	d102      	bne.n	8004a70 <_fstat_r+0x1c>
 8004a6a:	682b      	ldr	r3, [r5, #0]
 8004a6c:	b103      	cbz	r3, 8004a70 <_fstat_r+0x1c>
 8004a6e:	6023      	str	r3, [r4, #0]
 8004a70:	bd38      	pop	{r3, r4, r5, pc}
 8004a72:	bf00      	nop
 8004a74:	20000314 	.word	0x20000314

08004a78 <_isatty_r>:
 8004a78:	b538      	push	{r3, r4, r5, lr}
 8004a7a:	4d06      	ldr	r5, [pc, #24]	; (8004a94 <_isatty_r+0x1c>)
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	4604      	mov	r4, r0
 8004a80:	4608      	mov	r0, r1
 8004a82:	602b      	str	r3, [r5, #0]
 8004a84:	f7fc f86b 	bl	8000b5e <_isatty>
 8004a88:	1c43      	adds	r3, r0, #1
 8004a8a:	d102      	bne.n	8004a92 <_isatty_r+0x1a>
 8004a8c:	682b      	ldr	r3, [r5, #0]
 8004a8e:	b103      	cbz	r3, 8004a92 <_isatty_r+0x1a>
 8004a90:	6023      	str	r3, [r4, #0]
 8004a92:	bd38      	pop	{r3, r4, r5, pc}
 8004a94:	20000314 	.word	0x20000314

08004a98 <_lseek_r>:
 8004a98:	b538      	push	{r3, r4, r5, lr}
 8004a9a:	4d07      	ldr	r5, [pc, #28]	; (8004ab8 <_lseek_r+0x20>)
 8004a9c:	4604      	mov	r4, r0
 8004a9e:	4608      	mov	r0, r1
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	602a      	str	r2, [r5, #0]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	f7fc f864 	bl	8000b74 <_lseek>
 8004aac:	1c43      	adds	r3, r0, #1
 8004aae:	d102      	bne.n	8004ab6 <_lseek_r+0x1e>
 8004ab0:	682b      	ldr	r3, [r5, #0]
 8004ab2:	b103      	cbz	r3, 8004ab6 <_lseek_r+0x1e>
 8004ab4:	6023      	str	r3, [r4, #0]
 8004ab6:	bd38      	pop	{r3, r4, r5, pc}
 8004ab8:	20000314 	.word	0x20000314

08004abc <_read_r>:
 8004abc:	b538      	push	{r3, r4, r5, lr}
 8004abe:	4d07      	ldr	r5, [pc, #28]	; (8004adc <_read_r+0x20>)
 8004ac0:	4604      	mov	r4, r0
 8004ac2:	4608      	mov	r0, r1
 8004ac4:	4611      	mov	r1, r2
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	602a      	str	r2, [r5, #0]
 8004aca:	461a      	mov	r2, r3
 8004acc:	f7fc f80e 	bl	8000aec <_read>
 8004ad0:	1c43      	adds	r3, r0, #1
 8004ad2:	d102      	bne.n	8004ada <_read_r+0x1e>
 8004ad4:	682b      	ldr	r3, [r5, #0]
 8004ad6:	b103      	cbz	r3, 8004ada <_read_r+0x1e>
 8004ad8:	6023      	str	r3, [r4, #0]
 8004ada:	bd38      	pop	{r3, r4, r5, pc}
 8004adc:	20000314 	.word	0x20000314

08004ae0 <_sbrk_r>:
 8004ae0:	b538      	push	{r3, r4, r5, lr}
 8004ae2:	4d06      	ldr	r5, [pc, #24]	; (8004afc <_sbrk_r+0x1c>)
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	4604      	mov	r4, r0
 8004ae8:	4608      	mov	r0, r1
 8004aea:	602b      	str	r3, [r5, #0]
 8004aec:	f7fc f850 	bl	8000b90 <_sbrk>
 8004af0:	1c43      	adds	r3, r0, #1
 8004af2:	d102      	bne.n	8004afa <_sbrk_r+0x1a>
 8004af4:	682b      	ldr	r3, [r5, #0]
 8004af6:	b103      	cbz	r3, 8004afa <_sbrk_r+0x1a>
 8004af8:	6023      	str	r3, [r4, #0]
 8004afa:	bd38      	pop	{r3, r4, r5, pc}
 8004afc:	20000314 	.word	0x20000314

08004b00 <_write_r>:
 8004b00:	b538      	push	{r3, r4, r5, lr}
 8004b02:	4d07      	ldr	r5, [pc, #28]	; (8004b20 <_write_r+0x20>)
 8004b04:	4604      	mov	r4, r0
 8004b06:	4608      	mov	r0, r1
 8004b08:	4611      	mov	r1, r2
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	602a      	str	r2, [r5, #0]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	f7fb fd54 	bl	80005bc <_write>
 8004b14:	1c43      	adds	r3, r0, #1
 8004b16:	d102      	bne.n	8004b1e <_write_r+0x1e>
 8004b18:	682b      	ldr	r3, [r5, #0]
 8004b1a:	b103      	cbz	r3, 8004b1e <_write_r+0x1e>
 8004b1c:	6023      	str	r3, [r4, #0]
 8004b1e:	bd38      	pop	{r3, r4, r5, pc}
 8004b20:	20000314 	.word	0x20000314

08004b24 <_free_r>:
 8004b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b26:	2900      	cmp	r1, #0
 8004b28:	d044      	beq.n	8004bb4 <_free_r+0x90>
 8004b2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b2e:	9001      	str	r0, [sp, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f1a1 0404 	sub.w	r4, r1, #4
 8004b36:	bfb8      	it	lt
 8004b38:	18e4      	addlt	r4, r4, r3
 8004b3a:	f7ff fe35 	bl	80047a8 <__malloc_lock>
 8004b3e:	4a1e      	ldr	r2, [pc, #120]	; (8004bb8 <_free_r+0x94>)
 8004b40:	9801      	ldr	r0, [sp, #4]
 8004b42:	6813      	ldr	r3, [r2, #0]
 8004b44:	b933      	cbnz	r3, 8004b54 <_free_r+0x30>
 8004b46:	6063      	str	r3, [r4, #4]
 8004b48:	6014      	str	r4, [r2, #0]
 8004b4a:	b003      	add	sp, #12
 8004b4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b50:	f7ff be30 	b.w	80047b4 <__malloc_unlock>
 8004b54:	42a3      	cmp	r3, r4
 8004b56:	d908      	bls.n	8004b6a <_free_r+0x46>
 8004b58:	6825      	ldr	r5, [r4, #0]
 8004b5a:	1961      	adds	r1, r4, r5
 8004b5c:	428b      	cmp	r3, r1
 8004b5e:	bf01      	itttt	eq
 8004b60:	6819      	ldreq	r1, [r3, #0]
 8004b62:	685b      	ldreq	r3, [r3, #4]
 8004b64:	1949      	addeq	r1, r1, r5
 8004b66:	6021      	streq	r1, [r4, #0]
 8004b68:	e7ed      	b.n	8004b46 <_free_r+0x22>
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	b10b      	cbz	r3, 8004b74 <_free_r+0x50>
 8004b70:	42a3      	cmp	r3, r4
 8004b72:	d9fa      	bls.n	8004b6a <_free_r+0x46>
 8004b74:	6811      	ldr	r1, [r2, #0]
 8004b76:	1855      	adds	r5, r2, r1
 8004b78:	42a5      	cmp	r5, r4
 8004b7a:	d10b      	bne.n	8004b94 <_free_r+0x70>
 8004b7c:	6824      	ldr	r4, [r4, #0]
 8004b7e:	4421      	add	r1, r4
 8004b80:	1854      	adds	r4, r2, r1
 8004b82:	42a3      	cmp	r3, r4
 8004b84:	6011      	str	r1, [r2, #0]
 8004b86:	d1e0      	bne.n	8004b4a <_free_r+0x26>
 8004b88:	681c      	ldr	r4, [r3, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	6053      	str	r3, [r2, #4]
 8004b8e:	440c      	add	r4, r1
 8004b90:	6014      	str	r4, [r2, #0]
 8004b92:	e7da      	b.n	8004b4a <_free_r+0x26>
 8004b94:	d902      	bls.n	8004b9c <_free_r+0x78>
 8004b96:	230c      	movs	r3, #12
 8004b98:	6003      	str	r3, [r0, #0]
 8004b9a:	e7d6      	b.n	8004b4a <_free_r+0x26>
 8004b9c:	6825      	ldr	r5, [r4, #0]
 8004b9e:	1961      	adds	r1, r4, r5
 8004ba0:	428b      	cmp	r3, r1
 8004ba2:	bf04      	itt	eq
 8004ba4:	6819      	ldreq	r1, [r3, #0]
 8004ba6:	685b      	ldreq	r3, [r3, #4]
 8004ba8:	6063      	str	r3, [r4, #4]
 8004baa:	bf04      	itt	eq
 8004bac:	1949      	addeq	r1, r1, r5
 8004bae:	6021      	streq	r1, [r4, #0]
 8004bb0:	6054      	str	r4, [r2, #4]
 8004bb2:	e7ca      	b.n	8004b4a <_free_r+0x26>
 8004bb4:	b003      	add	sp, #12
 8004bb6:	bd30      	pop	{r4, r5, pc}
 8004bb8:	2000030c 	.word	0x2000030c

08004bbc <_init>:
 8004bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bbe:	bf00      	nop
 8004bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bc2:	bc08      	pop	{r3}
 8004bc4:	469e      	mov	lr, r3
 8004bc6:	4770      	bx	lr

08004bc8 <_fini>:
 8004bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bca:	bf00      	nop
 8004bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bce:	bc08      	pop	{r3}
 8004bd0:	469e      	mov	lr, r3
 8004bd2:	4770      	bx	lr
