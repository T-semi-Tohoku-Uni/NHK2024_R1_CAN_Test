
node_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004598  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08004778  08004778  00014778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800481c  0800481c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800481c  0800481c  0001481c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004824  08004824  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004824  08004824  00014824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004828  08004828  00014828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800482c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000070  0800489c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  0800489c  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ea04  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f09  00000000  00000000  0002eae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c50  00000000  00000000  000309f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000966  00000000  00000000  00031640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026276  00000000  00000000  00031fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000df1e  00000000  00000000  0005821c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0332  00000000  00000000  0006613a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a48  00000000  00000000  0015646c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00159eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004760 	.word	0x08004760

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08004760 	.word	0x08004760

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	230a      	movs	r3, #10
 80005ce:	68b9      	ldr	r1, [r7, #8]
 80005d0:	4803      	ldr	r0, [pc, #12]	; (80005e0 <_write+0x24>)
 80005d2:	f002 fae5 	bl	8002ba0 <HAL_UART_Transmit>
	return len;
 80005d6:	687b      	ldr	r3, [r7, #4]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	200000f0 	.word	0x200000f0

080005e4 <sendCANMessage>:

void sendCANMessage(uint32_t canId, uint8_t *txData, uint32_t dataLength) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
	if (txData == NULL) {
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d101      	bne.n	80005fa <sendCANMessage+0x16>
		Error_Handler();
 80005f6:	f000 f97d 	bl	80008f4 <Error_Handler>
	}

	// Set cAN Header
    TxHeader.Identifier = canId;
 80005fa:	4a15      	ldr	r2, [pc, #84]	; (8000650 <sendCANMessage+0x6c>)
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	6013      	str	r3, [r2, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 8000600:	4b13      	ldr	r3, [pc, #76]	; (8000650 <sendCANMessage+0x6c>)
 8000602:	2200      	movs	r2, #0
 8000604:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <sendCANMessage+0x6c>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8; // To do: Change to arg
 800060c:	4b10      	ldr	r3, [pc, #64]	; (8000650 <sendCANMessage+0x6c>)
 800060e:	2208      	movs	r2, #8
 8000610:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <sendCANMessage+0x6c>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8000618:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <sendCANMessage+0x6c>)
 800061a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800061e:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_FD_CAN;
 8000620:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <sendCANMessage+0x6c>)
 8000622:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000626:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <sendCANMessage+0x6c>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <sendCANMessage+0x6c>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]

    // Send CAN Message
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 8000634:	4a07      	ldr	r2, [pc, #28]	; (8000654 <sendCANMessage+0x70>)
 8000636:	4906      	ldr	r1, [pc, #24]	; (8000650 <sendCANMessage+0x6c>)
 8000638:	4807      	ldr	r0, [pc, #28]	; (8000658 <sendCANMessage+0x74>)
 800063a:	f000 feac 	bl	8001396 <HAL_FDCAN_AddMessageToTxFifoQ>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <sendCANMessage+0x64>
    {
    	Error_Handler();
 8000644:	f000 f956 	bl	80008f4 <Error_Handler>
    }

    // Wait until buffer size smaller than 3
//    while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {} // To do : Check can transceiver size
}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000184 	.word	0x20000184
 8000654:	20000000 	.word	0x20000000
 8000658:	2000008c 	.word	0x2000008c

0800065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000662:	f000 fb14 	bl	8000c8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000666:	f000 f84f 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066a:	f000 f92b 	bl	80008c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800066e:	f000 f8dd 	bl	800082c <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 8000672:	f000 f895 	bl	80007a0 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  // CAN Filter Settings
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000676:	4b21      	ldr	r3, [pc, #132]	; (80006fc <main+0xa0>)
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIndex = 0;
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <main+0xa0>)
 800067e:	2200      	movs	r2, #0
 8000680:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000682:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <main+0xa0>)
 8000684:	2202      	movs	r2, #2
 8000686:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000688:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <main+0xa0>)
 800068a:	2201      	movs	r2, #1
 800068c:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterID1 = 0x000;
 800068e:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <main+0xa0>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterID2 = 0x000;
 8000694:	4b19      	ldr	r3, [pc, #100]	; (80006fc <main+0xa0>)
 8000696:	2200      	movs	r2, #0
 8000698:	615a      	str	r2, [r3, #20]

  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK){
 800069a:	4918      	ldr	r1, [pc, #96]	; (80006fc <main+0xa0>)
 800069c:	4818      	ldr	r0, [pc, #96]	; (8000700 <main+0xa4>)
 800069e:	f000 fdc7 	bl	8001230 <HAL_FDCAN_ConfigFilter>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <main+0x50>
	  Error_Handler();
 80006a8:	f000 f924 	bl	80008f4 <Error_Handler>
  }
  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
 80006ac:	2300      	movs	r3, #0
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	2300      	movs	r3, #0
 80006b2:	2202      	movs	r2, #2
 80006b4:	2102      	movs	r1, #2
 80006b6:	4812      	ldr	r0, [pc, #72]	; (8000700 <main+0xa4>)
 80006b8:	f000 fe14 	bl	80012e4 <HAL_FDCAN_ConfigGlobalFilter>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <main+0x6a>
      Error_Handler();
 80006c2:	f000 f917 	bl	80008f4 <Error_Handler>
  }

  // start CAN
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK){ Error_Handler();}
 80006c6:	480e      	ldr	r0, [pc, #56]	; (8000700 <main+0xa4>)
 80006c8:	f000 fe3d 	bl	8001346 <HAL_FDCAN_Start>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <main+0x7a>
 80006d2:	f000 f90f 	bl	80008f4 <Error_Handler>

  // CAN reception settings
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006d6:	2200      	movs	r2, #0
 80006d8:	2101      	movs	r1, #1
 80006da:	4809      	ldr	r0, [pc, #36]	; (8000700 <main+0xa4>)
 80006dc:	f000 fe9f 	bl	800141e <HAL_FDCAN_ActivateNotification>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <main+0x8e>
  {
     Error_Handler();
 80006e6:	f000 f905 	bl	80008f4 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	sendCANMessage((uint32_t)0x004, TxData, FDCAN_DLC_BYTES_8);
 80006ea:	2208      	movs	r2, #8
 80006ec:	4905      	ldr	r1, [pc, #20]	; (8000704 <main+0xa8>)
 80006ee:	2004      	movs	r0, #4
 80006f0:	f7ff ff78 	bl	80005e4 <sendCANMessage>
	//printf("Send Message\r\n");
	HAL_Delay(10);
 80006f4:	200a      	movs	r0, #10
 80006f6:	f000 fb3b 	bl	8000d70 <HAL_Delay>
	sendCANMessage((uint32_t)0x004, TxData, FDCAN_DLC_BYTES_8);
 80006fa:	e7f6      	b.n	80006ea <main+0x8e>
 80006fc:	200001a8 	.word	0x200001a8
 8000700:	2000008c 	.word	0x2000008c
 8000704:	20000000 	.word	0x20000000

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	; 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0318 	add.w	r3, r7, #24
 8000712:	2238      	movs	r2, #56	; 0x38
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f003 f9c2 	bl	8003aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800072e:	f001 f9c7 	bl	8001ac0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000732:	2302      	movs	r3, #2
 8000734:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000736:	f44f 7380 	mov.w	r3, #256	; 0x100
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073c:	2340      	movs	r3, #64	; 0x40
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000740:	2302      	movs	r3, #2
 8000742:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000744:	2302      	movs	r3, #2
 8000746:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000748:	2301      	movs	r3, #1
 800074a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 800074c:	230a      	movs	r3, #10
 800074e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000754:	2302      	movs	r3, #2
 8000756:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 0318 	add.w	r3, r7, #24
 8000760:	4618      	mov	r0, r3
 8000762:	f001 fa51 	bl	8001c08 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800076c:	f000 f8c2 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	2303      	movs	r3, #3
 8000776:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2102      	movs	r1, #2
 8000788:	4618      	mov	r0, r3
 800078a:	f001 fd4f 	bl	800222c <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000794:	f000 f8ae 	bl	80008f4 <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	3750      	adds	r7, #80	; 0x50
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80007a4:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <MX_FDCAN1_Init+0x84>)
 80007a6:	4a20      	ldr	r2, [pc, #128]	; (8000828 <MX_FDCAN1_Init+0x88>)
 80007a8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80007aa:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <MX_FDCAN1_Init+0x84>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80007b0:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <MX_FDCAN1_Init+0x84>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80007b6:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_FDCAN1_Init+0x84>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80007bc:	4b19      	ldr	r3, [pc, #100]	; (8000824 <MX_FDCAN1_Init+0x84>)
 80007be:	2200      	movs	r2, #0
 80007c0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_FDCAN1_Init+0x84>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80007c8:	4b16      	ldr	r3, [pc, #88]	; (8000824 <MX_FDCAN1_Init+0x84>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_FDCAN1_Init+0x84>)
 80007d0:	2204      	movs	r2, #4
 80007d2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80007d4:	4b13      	ldr	r3, [pc, #76]	; (8000824 <MX_FDCAN1_Init+0x84>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 15;
 80007da:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_FDCAN1_Init+0x84>)
 80007dc:	220f      	movs	r2, #15
 80007de:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 80007e0:	4b10      	ldr	r3, [pc, #64]	; (8000824 <MX_FDCAN1_Init+0x84>)
 80007e2:	2204      	movs	r2, #4
 80007e4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_FDCAN1_Init+0x84>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80007ec:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <MX_FDCAN1_Init+0x84>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_FDCAN1_Init+0x84>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <MX_FDCAN1_Init+0x84>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_FDCAN1_Init+0x84>)
 8000800:	2200      	movs	r2, #0
 8000802:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <MX_FDCAN1_Init+0x84>)
 8000806:	2200      	movs	r2, #0
 8000808:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_FDCAN1_Init+0x84>)
 800080c:	2200      	movs	r2, #0
 800080e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000810:	4804      	ldr	r0, [pc, #16]	; (8000824 <MX_FDCAN1_Init+0x84>)
 8000812:	f000 fbb3 	bl	8000f7c <HAL_FDCAN_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800081c:	f000 f86a 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	2000008c 	.word	0x2000008c
 8000828:	40006400 	.word	0x40006400

0800082c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000830:	4b22      	ldr	r3, [pc, #136]	; (80008bc <MX_USART2_UART_Init+0x90>)
 8000832:	4a23      	ldr	r2, [pc, #140]	; (80008c0 <MX_USART2_UART_Init+0x94>)
 8000834:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000836:	4b21      	ldr	r3, [pc, #132]	; (80008bc <MX_USART2_UART_Init+0x90>)
 8000838:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800083c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <MX_USART2_UART_Init+0x90>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <MX_USART2_UART_Init+0x90>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084a:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <MX_USART2_UART_Init+0x90>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <MX_USART2_UART_Init+0x90>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b19      	ldr	r3, [pc, #100]	; (80008bc <MX_USART2_UART_Init+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b17      	ldr	r3, [pc, #92]	; (80008bc <MX_USART2_UART_Init+0x90>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <MX_USART2_UART_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_USART2_UART_Init+0x90>)
 800086a:	2200      	movs	r2, #0
 800086c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800086e:	4b13      	ldr	r3, [pc, #76]	; (80008bc <MX_USART2_UART_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000874:	4811      	ldr	r0, [pc, #68]	; (80008bc <MX_USART2_UART_Init+0x90>)
 8000876:	f002 f943 	bl	8002b00 <HAL_UART_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000880:	f000 f838 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000884:	2100      	movs	r1, #0
 8000886:	480d      	ldr	r0, [pc, #52]	; (80008bc <MX_USART2_UART_Init+0x90>)
 8000888:	f002 ff6c 	bl	8003764 <HAL_UARTEx_SetTxFifoThreshold>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000892:	f000 f82f 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000896:	2100      	movs	r1, #0
 8000898:	4808      	ldr	r0, [pc, #32]	; (80008bc <MX_USART2_UART_Init+0x90>)
 800089a:	f002 ffa1 	bl	80037e0 <HAL_UARTEx_SetRxFifoThreshold>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008a4:	f000 f826 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <MX_USART2_UART_Init+0x90>)
 80008aa:	f002 ff22 	bl	80036f2 <HAL_UARTEx_DisableFifoMode>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008b4:	f000 f81e 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200000f0 	.word	0x200000f0
 80008c0:	40004400 	.word	0x40004400

080008c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_GPIO_Init+0x2c>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	4a08      	ldr	r2, [pc, #32]	; (80008f0 <MX_GPIO_Init+0x2c>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_GPIO_Init+0x2c>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40021000 	.word	0x40021000

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error Handling");
 80008fc:	4801      	ldr	r0, [pc, #4]	; (8000904 <Error_Handler+0x10>)
 80008fe:	f003 f8bd 	bl	8003a7c <iprintf>
 8000902:	e7fb      	b.n	80008fc <Error_Handler+0x8>
 8000904:	08004788 	.word	0x08004788

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <HAL_MspInit+0x44>)
 8000910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000912:	4a0e      	ldr	r2, [pc, #56]	; (800094c <HAL_MspInit+0x44>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6613      	str	r3, [r2, #96]	; 0x60
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <HAL_MspInit+0x44>)
 800091c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <HAL_MspInit+0x44>)
 8000928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800092a:	4a08      	ldr	r2, [pc, #32]	; (800094c <HAL_MspInit+0x44>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000930:	6593      	str	r3, [r2, #88]	; 0x58
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <HAL_MspInit+0x44>)
 8000934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40021000 	.word	0x40021000

08000950 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b09e      	sub	sp, #120	; 0x78
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000968:	f107 0310 	add.w	r3, r7, #16
 800096c:	2254      	movs	r2, #84	; 0x54
 800096e:	2100      	movs	r1, #0
 8000970:	4618      	mov	r0, r3
 8000972:	f003 f895 	bl	8003aa0 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a20      	ldr	r2, [pc, #128]	; (80009fc <HAL_FDCAN_MspInit+0xac>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d139      	bne.n	80009f4 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000984:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000986:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800098a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800098c:	f107 0310 	add.w	r3, r7, #16
 8000990:	4618      	mov	r0, r3
 8000992:	f001 fe67 	bl	8002664 <HAL_RCCEx_PeriphCLKConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800099c:	f7ff ffaa 	bl	80008f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80009a0:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <HAL_FDCAN_MspInit+0xb0>)
 80009a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a4:	4a16      	ldr	r2, [pc, #88]	; (8000a00 <HAL_FDCAN_MspInit+0xb0>)
 80009a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009aa:	6593      	str	r3, [r2, #88]	; 0x58
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <HAL_FDCAN_MspInit+0xb0>)
 80009ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <HAL_FDCAN_MspInit+0xb0>)
 80009ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009bc:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <HAL_FDCAN_MspInit+0xb0>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <HAL_FDCAN_MspInit+0xb0>)
 80009c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009d4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80009e2:	2309      	movs	r3, #9
 80009e4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009ea:	4619      	mov	r1, r3
 80009ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f0:	f000 fee4 	bl	80017bc <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80009f4:	bf00      	nop
 80009f6:	3778      	adds	r7, #120	; 0x78
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40006400 	.word	0x40006400
 8000a00:	40021000 	.word	0x40021000

08000a04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b09e      	sub	sp, #120	; 0x78
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a1c:	f107 0310 	add.w	r3, r7, #16
 8000a20:	2254      	movs	r2, #84	; 0x54
 8000a22:	2100      	movs	r1, #0
 8000a24:	4618      	mov	r0, r3
 8000a26:	f003 f83b 	bl	8003aa0 <memset>
  if(huart->Instance==USART2)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a1f      	ldr	r2, [pc, #124]	; (8000aac <HAL_UART_MspInit+0xa8>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d136      	bne.n	8000aa2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	4618      	mov	r0, r3
 8000a42:	f001 fe0f 	bl	8002664 <HAL_RCCEx_PeriphCLKConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a4c:	f7ff ff52 	bl	80008f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a50:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <HAL_UART_MspInit+0xac>)
 8000a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a54:	4a16      	ldr	r2, [pc, #88]	; (8000ab0 <HAL_UART_MspInit+0xac>)
 8000a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a5a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <HAL_UART_MspInit+0xac>)
 8000a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <HAL_UART_MspInit+0xac>)
 8000a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6c:	4a10      	ldr	r2, [pc, #64]	; (8000ab0 <HAL_UART_MspInit+0xac>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a74:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <HAL_UART_MspInit+0xac>)
 8000a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a80:	230c      	movs	r3, #12
 8000a82:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a90:	2307      	movs	r3, #7
 8000a92:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9e:	f000 fe8d 	bl	80017bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aa2:	bf00      	nop
 8000aa4:	3778      	adds	r7, #120	; 0x78
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40004400 	.word	0x40004400
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <NMI_Handler+0x4>

08000aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <HardFault_Handler+0x4>

08000ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <MemManage_Handler+0x4>

08000ac6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <BusFault_Handler+0x4>

08000acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <UsageFault_Handler+0x4>

08000ad2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b00:	f000 f918 	bl	8000d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	e00a      	b.n	8000b30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b1a:	f3af 8000 	nop.w
 8000b1e:	4601      	mov	r1, r0
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	1c5a      	adds	r2, r3, #1
 8000b24:	60ba      	str	r2, [r7, #8]
 8000b26:	b2ca      	uxtb	r2, r1
 8000b28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	697a      	ldr	r2, [r7, #20]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	dbf0      	blt.n	8000b1a <_read+0x12>
  }

  return len;
 8000b38:	687b      	ldr	r3, [r7, #4]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b6a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <_isatty>:

int _isatty(int file)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb4:	4a14      	ldr	r2, [pc, #80]	; (8000c08 <_sbrk+0x5c>)
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <_sbrk+0x60>)
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d102      	bne.n	8000bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <_sbrk+0x64>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <_sbrk+0x68>)
 8000bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d207      	bcs.n	8000bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bdc:	f002 ff68 	bl	8003ab0 <__errno>
 8000be0:	4603      	mov	r3, r0
 8000be2:	220c      	movs	r2, #12
 8000be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bea:	e009      	b.n	8000c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <_sbrk+0x64>)
 8000bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20020000 	.word	0x20020000
 8000c0c:	00000400 	.word	0x00000400
 8000c10:	200001c0 	.word	0x200001c0
 8000c14:	20000318 	.word	0x20000318

08000c18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <SystemInit+0x20>)
 8000c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c22:	4a05      	ldr	r2, [pc, #20]	; (8000c38 <SystemInit+0x20>)
 8000c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c3c:	480d      	ldr	r0, [pc, #52]	; (8000c74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c3e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c40:	f7ff ffea 	bl	8000c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c44:	480c      	ldr	r0, [pc, #48]	; (8000c78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c46:	490d      	ldr	r1, [pc, #52]	; (8000c7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c48:	4a0d      	ldr	r2, [pc, #52]	; (8000c80 <LoopForever+0xe>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c4c:	e002      	b.n	8000c54 <LoopCopyDataInit>

08000c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c52:	3304      	adds	r3, #4

08000c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c58:	d3f9      	bcc.n	8000c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c5c:	4c0a      	ldr	r4, [pc, #40]	; (8000c88 <LoopForever+0x16>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c60:	e001      	b.n	8000c66 <LoopFillZerobss>

08000c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c64:	3204      	adds	r2, #4

08000c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c68:	d3fb      	bcc.n	8000c62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c6a:	f002 ff27 	bl	8003abc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c6e:	f7ff fcf5 	bl	800065c <main>

08000c72 <LoopForever>:

LoopForever:
    b LoopForever
 8000c72:	e7fe      	b.n	8000c72 <LoopForever>
  ldr   r0, =_estack
 8000c74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c7c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c80:	0800482c 	.word	0x0800482c
  ldr r2, =_sbss
 8000c84:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c88:	20000314 	.word	0x20000314

08000c8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c8c:	e7fe      	b.n	8000c8c <ADC1_2_IRQHandler>

08000c8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f000 f93d 	bl	8000f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c9e:	200f      	movs	r0, #15
 8000ca0:	f000 f80e 	bl	8000cc0 <HAL_InitTick>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d002      	beq.n	8000cb0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	71fb      	strb	r3, [r7, #7]
 8000cae:	e001      	b.n	8000cb4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cb0:	f7ff fe2a 	bl	8000908 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cb4:	79fb      	ldrb	r3, [r7, #7]

}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ccc:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <HAL_InitTick+0x68>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d022      	beq.n	8000d1a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_InitTick+0x6c>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <HAL_InitTick+0x68>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ce0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f000 f93a 	bl	8000f62 <HAL_SYSTICK_Config>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d10f      	bne.n	8000d14 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b0f      	cmp	r3, #15
 8000cf8:	d809      	bhi.n	8000d0e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	6879      	ldr	r1, [r7, #4]
 8000cfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d02:	f000 f914 	bl	8000f2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d06:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <HAL_InitTick+0x70>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6013      	str	r3, [r2, #0]
 8000d0c:	e007      	b.n	8000d1e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	73fb      	strb	r3, [r7, #15]
 8000d12:	e004      	b.n	8000d1e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	73fb      	strb	r3, [r7, #15]
 8000d18:	e001      	b.n	8000d1e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000010 	.word	0x20000010
 8000d2c:	20000008 	.word	0x20000008
 8000d30:	2000000c 	.word	0x2000000c

08000d34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <HAL_IncTick+0x1c>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <HAL_IncTick+0x20>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4413      	add	r3, r2
 8000d42:	4a03      	ldr	r2, [pc, #12]	; (8000d50 <HAL_IncTick+0x1c>)
 8000d44:	6013      	str	r3, [r2, #0]
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	200001c4 	.word	0x200001c4
 8000d54:	20000010 	.word	0x20000010

08000d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <HAL_GetTick+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	200001c4 	.word	0x200001c4

08000d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d78:	f7ff ffee 	bl	8000d58 <HAL_GetTick>
 8000d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d88:	d004      	beq.n	8000d94 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <HAL_Delay+0x40>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	4413      	add	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d94:	bf00      	nop
 8000d96:	f7ff ffdf 	bl	8000d58 <HAL_GetTick>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	68fa      	ldr	r2, [r7, #12]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d8f7      	bhi.n	8000d96 <HAL_Delay+0x26>
  {
  }
}
 8000da6:	bf00      	nop
 8000da8:	bf00      	nop
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000010 	.word	0x20000010

08000db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ddc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de6:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	60d3      	str	r3, [r2, #12]
}
 8000dec:	bf00      	nop
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <__NVIC_GetPriorityGrouping+0x18>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	0a1b      	lsrs	r3, r3, #8
 8000e06:	f003 0307 	and.w	r3, r3, #7
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db0a      	blt.n	8000e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	490c      	ldr	r1, [pc, #48]	; (8000e64 <__NVIC_SetPriority+0x4c>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	0112      	lsls	r2, r2, #4
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e40:	e00a      	b.n	8000e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4908      	ldr	r1, [pc, #32]	; (8000e68 <__NVIC_SetPriority+0x50>)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	3b04      	subs	r3, #4
 8000e50:	0112      	lsls	r2, r2, #4
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	440b      	add	r3, r1
 8000e56:	761a      	strb	r2, [r3, #24]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000e100 	.word	0xe000e100
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	; 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f1c3 0307 	rsb	r3, r3, #7
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	bf28      	it	cs
 8000e8a:	2304      	movcs	r3, #4
 8000e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3304      	adds	r3, #4
 8000e92:	2b06      	cmp	r3, #6
 8000e94:	d902      	bls.n	8000e9c <NVIC_EncodePriority+0x30>
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3b03      	subs	r3, #3
 8000e9a:	e000      	b.n	8000e9e <NVIC_EncodePriority+0x32>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	401a      	ands	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	43d9      	mvns	r1, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	4313      	orrs	r3, r2
         );
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3724      	adds	r7, #36	; 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ee4:	d301      	bcc.n	8000eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00f      	b.n	8000f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <SysTick_Config+0x40>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef2:	210f      	movs	r1, #15
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ef8:	f7ff ff8e 	bl	8000e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <SysTick_Config+0x40>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f02:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <SysTick_Config+0x40>)
 8000f04:	2207      	movs	r2, #7
 8000f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	e000e010 	.word	0xe000e010

08000f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff ff47 	bl	8000db4 <__NVIC_SetPriorityGrouping>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b086      	sub	sp, #24
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
 8000f3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f3c:	f7ff ff5e 	bl	8000dfc <__NVIC_GetPriorityGrouping>
 8000f40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	68b9      	ldr	r1, [r7, #8]
 8000f46:	6978      	ldr	r0, [r7, #20]
 8000f48:	f7ff ff90 	bl	8000e6c <NVIC_EncodePriority>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f52:	4611      	mov	r1, r2
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff5f 	bl	8000e18 <__NVIC_SetPriority>
}
 8000f5a:	bf00      	nop
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ffb2 	bl	8000ed4 <SysTick_Config>
 8000f70:	4603      	mov	r3, r0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d101      	bne.n	8000f8e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e147      	b.n	800121e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d106      	bne.n	8000fa8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff fcd4 	bl	8000950 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	699a      	ldr	r2, [r3, #24]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f022 0210 	bic.w	r2, r2, #16
 8000fb6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fb8:	f7ff fece 	bl	8000d58 <HAL_GetTick>
 8000fbc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000fbe:	e012      	b.n	8000fe6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000fc0:	f7ff feca 	bl	8000d58 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b0a      	cmp	r3, #10
 8000fcc:	d90b      	bls.n	8000fe6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd2:	f043 0201 	orr.w	r2, r3, #1
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2203      	movs	r2, #3
 8000fde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e11b      	b.n	800121e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	f003 0308 	and.w	r3, r3, #8
 8000ff0:	2b08      	cmp	r3, #8
 8000ff2:	d0e5      	beq.n	8000fc0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	699a      	ldr	r2, [r3, #24]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f042 0201 	orr.w	r2, r2, #1
 8001002:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001004:	f7ff fea8 	bl	8000d58 <HAL_GetTick>
 8001008:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800100a:	e012      	b.n	8001032 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800100c:	f7ff fea4 	bl	8000d58 <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b0a      	cmp	r3, #10
 8001018:	d90b      	bls.n	8001032 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101e:	f043 0201 	orr.w	r2, r3, #1
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2203      	movs	r2, #3
 800102a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e0f5      	b.n	800121e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	2b00      	cmp	r3, #0
 800103e:	d0e5      	beq.n	800100c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	699a      	ldr	r2, [r3, #24]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f042 0202 	orr.w	r2, r2, #2
 800104e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a74      	ldr	r2, [pc, #464]	; (8001228 <HAL_FDCAN_Init+0x2ac>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d103      	bne.n	8001062 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800105a:	4a74      	ldr	r2, [pc, #464]	; (800122c <HAL_FDCAN_Init+0x2b0>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	7c1b      	ldrb	r3, [r3, #16]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d108      	bne.n	800107c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	699a      	ldr	r2, [r3, #24]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001078:	619a      	str	r2, [r3, #24]
 800107a:	e007      	b.n	800108c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	699a      	ldr	r2, [r3, #24]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800108a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	7c5b      	ldrb	r3, [r3, #17]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d108      	bne.n	80010a6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	699a      	ldr	r2, [r3, #24]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010a2:	619a      	str	r2, [r3, #24]
 80010a4:	e007      	b.n	80010b6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	699a      	ldr	r2, [r3, #24]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80010b4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	7c9b      	ldrb	r3, [r3, #18]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d108      	bne.n	80010d0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	699a      	ldr	r2, [r3, #24]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80010cc:	619a      	str	r2, [r3, #24]
 80010ce:	e007      	b.n	80010e0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	699a      	ldr	r2, [r3, #24]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80010de:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	430a      	orrs	r2, r1
 80010f4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	699a      	ldr	r2, [r3, #24]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001104:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	691a      	ldr	r2, [r3, #16]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 0210 	bic.w	r2, r2, #16
 8001114:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d108      	bne.n	8001130 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	699a      	ldr	r2, [r3, #24]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f042 0204 	orr.w	r2, r2, #4
 800112c:	619a      	str	r2, [r3, #24]
 800112e:	e02c      	b.n	800118a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d028      	beq.n	800118a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	2b02      	cmp	r3, #2
 800113e:	d01c      	beq.n	800117a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	699a      	ldr	r2, [r3, #24]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800114e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	691a      	ldr	r2, [r3, #16]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 0210 	orr.w	r2, r2, #16
 800115e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	2b03      	cmp	r3, #3
 8001166:	d110      	bne.n	800118a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	699a      	ldr	r2, [r3, #24]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f042 0220 	orr.w	r2, r2, #32
 8001176:	619a      	str	r2, [r3, #24]
 8001178:	e007      	b.n	800118a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	699a      	ldr	r2, [r3, #24]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f042 0220 	orr.w	r2, r2, #32
 8001188:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	3b01      	subs	r3, #1
 8001190:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	3b01      	subs	r3, #1
 8001198:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800119a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80011a2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80011b2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80011b4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80011be:	d115      	bne.n	80011ec <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ca:	3b01      	subs	r3, #1
 80011cc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80011ce:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d4:	3b01      	subs	r3, #1
 80011d6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80011d8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e0:	3b01      	subs	r3, #1
 80011e2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80011e8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80011ea:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	430a      	orrs	r2, r1
 80011fe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 f9f2 	bl	80015ec <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40006400 	.word	0x40006400
 800122c:	40006500 	.word	0x40006500

08001230 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001230:	b480      	push	{r7}
 8001232:	b087      	sub	sp, #28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001240:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001242:	7dfb      	ldrb	r3, [r7, #23]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d002      	beq.n	800124e <HAL_FDCAN_ConfigFilter+0x1e>
 8001248:	7dfb      	ldrb	r3, [r7, #23]
 800124a:	2b02      	cmp	r3, #2
 800124c:	d13d      	bne.n	80012ca <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d119      	bne.n	800128a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001262:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800126a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	e01d      	b.n	80012c6 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	075a      	lsls	r2, r3, #29
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	079a      	lsls	r2, r3, #30
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	4413      	add	r3, r2
 80012b2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	3304      	adds	r3, #4
 80012be:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	e006      	b.n	80012d8 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ce:	f043 0202 	orr.w	r2, r3, #2
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
  }
}
 80012d8:	4618      	mov	r0, r3
 80012da:	371c      	adds	r7, #28
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
 80012f0:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d116      	bne.n	800132c <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001306:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	011a      	lsls	r2, r3, #4
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	431a      	orrs	r2, r3
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	431a      	orrs	r2, r3
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	431a      	orrs	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	430a      	orrs	r2, r1
 8001324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8001328:	2300      	movs	r3, #0
 800132a:	e006      	b.n	800133a <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001330:	f043 0204 	orr.w	r2, r3, #4
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
  }
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b01      	cmp	r3, #1
 8001358:	d110      	bne.n	800137c <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2202      	movs	r2, #2
 800135e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	699a      	ldr	r2, [r3, #24]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f022 0201 	bic.w	r2, r2, #1
 8001370:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001378:	2300      	movs	r3, #0
 800137a:	e006      	b.n	800138a <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001380:	f043 0204 	orr.w	r2, r3, #4
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
  }
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	60f8      	str	r0, [r7, #12]
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d12c      	bne.n	8001408 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80013b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d007      	beq.n	80013ce <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e023      	b.n	8001416 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80013d6:	0c1b      	lsrs	r3, r3, #16
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	68b9      	ldr	r1, [r7, #8]
 80013e4:	68f8      	ldr	r0, [r7, #12]
 80013e6:	f000 f96d 	bl	80016c4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2101      	movs	r1, #1
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	fa01 f202 	lsl.w	r2, r1, r2
 80013f6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80013fa:	2201      	movs	r2, #1
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	409a      	lsls	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001404:	2300      	movs	r3, #0
 8001406:	e006      	b.n	8001416 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800140c:	f043 0208 	orr.w	r2, r3, #8
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
  }
}
 8001416:	4618      	mov	r0, r3
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800141e:	b480      	push	{r7}
 8001420:	b087      	sub	sp, #28
 8001422:	af00      	add	r7, sp, #0
 8001424:	60f8      	str	r0, [r7, #12]
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001430:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001432:	7dfb      	ldrb	r3, [r7, #23]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d003      	beq.n	8001440 <HAL_FDCAN_ActivateNotification+0x22>
 8001438:	7dfb      	ldrb	r3, [r7, #23]
 800143a:	2b02      	cmp	r3, #2
 800143c:	f040 80c8 	bne.w	80015d0 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001446:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	2b00      	cmp	r3, #0
 8001450:	d004      	beq.n	800145c <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b00      	cmp	r3, #0
 800145a:	d03b      	beq.n	80014d4 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001462:	2b00      	cmp	r3, #0
 8001464:	d004      	beq.n	8001470 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d031      	beq.n	80014d4 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001476:	2b00      	cmp	r3, #0
 8001478:	d004      	beq.n	8001484 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	d027      	beq.n	80014d4 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800148a:	2b00      	cmp	r3, #0
 800148c:	d004      	beq.n	8001498 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	2b00      	cmp	r3, #0
 8001496:	d01d      	beq.n	80014d4 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d004      	beq.n	80014ac <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	f003 0310 	and.w	r3, r3, #16
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d013      	beq.n	80014d4 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d004      	beq.n	80014c0 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	f003 0320 	and.w	r3, r3, #32
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d009      	beq.n	80014d4 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00c      	beq.n	80014e4 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d107      	bne.n	80014e4 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0201 	orr.w	r2, r2, #1
 80014e2:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d004      	beq.n	80014f8 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d13b      	bne.n	8001570 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d004      	beq.n	800150c <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d131      	bne.n	8001570 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001512:	2b00      	cmp	r3, #0
 8001514:	d004      	beq.n	8001520 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	2b00      	cmp	r3, #0
 800151e:	d127      	bne.n	8001570 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001526:	2b00      	cmp	r3, #0
 8001528:	d004      	beq.n	8001534 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	f003 0308 	and.w	r3, r3, #8
 8001530:	2b00      	cmp	r3, #0
 8001532:	d11d      	bne.n	8001570 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800153a:	2b00      	cmp	r3, #0
 800153c:	d004      	beq.n	8001548 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	f003 0310 	and.w	r3, r3, #16
 8001544:	2b00      	cmp	r3, #0
 8001546:	d113      	bne.n	8001570 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800154e:	2b00      	cmp	r3, #0
 8001550:	d004      	beq.n	800155c <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	f003 0320 	and.w	r3, r3, #32
 8001558:	2b00      	cmp	r3, #0
 800155a:	d109      	bne.n	8001570 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00c      	beq.n	8001580 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800156c:	2b00      	cmp	r3, #0
 800156e:	d007      	beq.n	8001580 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 0202 	orr.w	r2, r2, #2
 800157e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001586:	2b00      	cmp	r3, #0
 8001588:	d009      	beq.n	800159e <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	430a      	orrs	r2, r1
 800159a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d009      	beq.n	80015bc <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80015cc:	2300      	movs	r3, #0
 80015ce:	e006      	b.n	80015de <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d4:	f043 0202 	orr.w	r2, r3, #2
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
  }
}
 80015de:	4618      	mov	r0, r3
 80015e0:	371c      	adds	r7, #28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
	...

080015ec <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80015f4:	4b30      	ldr	r3, [pc, #192]	; (80016b8 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80015f6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a2f      	ldr	r2, [pc, #188]	; (80016bc <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d103      	bne.n	800160a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001608:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a2c      	ldr	r2, [pc, #176]	; (80016c0 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d103      	bne.n	800161c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800161a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800162a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001632:	041a      	lsls	r2, r3, #16
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001650:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001658:	061a      	lsls	r2, r3, #24
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	e005      	b.n	800169e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	3304      	adds	r3, #4
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d3f3      	bcc.n	8001692 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80016aa:	bf00      	nop
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	4000a400 	.word	0x4000a400
 80016bc:	40006800 	.word	0x40006800
 80016c0:	40006c00 	.word	0x40006c00

080016c4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	; 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
 80016d0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10a      	bne.n	80016f0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80016e2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61fb      	str	r3, [r7, #28]
 80016ee:	e00a      	b.n	8001706 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80016f8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80016fe:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001700:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001704:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001710:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001716:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800171c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	4613      	mov	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	4413      	add	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	440b      	add	r3, r1
 8001738:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	69fa      	ldr	r2, [r7, #28]
 800173e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	3304      	adds	r3, #4
 8001744:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	3304      	adds	r3, #4
 8001750:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	e020      	b.n	800179a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	3303      	adds	r3, #3
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	4413      	add	r3, r2
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	3302      	adds	r3, #2
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	440b      	add	r3, r1
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001770:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	3301      	adds	r3, #1
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	440b      	add	r3, r1
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800177e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	440a      	add	r2, r1
 8001786:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001788:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	3304      	adds	r3, #4
 8001792:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	3304      	adds	r3, #4
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	4a06      	ldr	r2, [pc, #24]	; (80017b8 <FDCAN_CopyMessageToRAM+0xf4>)
 80017a0:	5cd3      	ldrb	r3, [r2, r3]
 80017a2:	461a      	mov	r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d3d6      	bcc.n	8001758 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80017aa:	bf00      	nop
 80017ac:	bf00      	nop
 80017ae:	3724      	adds	r7, #36	; 0x24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	080047b0 	.word	0x080047b0

080017bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017bc:	b480      	push	{r7}
 80017be:	b087      	sub	sp, #28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017ca:	e15a      	b.n	8001a82 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	2101      	movs	r1, #1
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	4013      	ands	r3, r2
 80017da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 814c 	beq.w	8001a7c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d005      	beq.n	80017fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d130      	bne.n	800185e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	2203      	movs	r2, #3
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001832:	2201      	movs	r2, #1
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	091b      	lsrs	r3, r3, #4
 8001848:	f003 0201 	and.w	r2, r3, #1
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	2b03      	cmp	r3, #3
 8001868:	d017      	beq.n	800189a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	2203      	movs	r2, #3
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4013      	ands	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d123      	bne.n	80018ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	08da      	lsrs	r2, r3, #3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3208      	adds	r2, #8
 80018ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	220f      	movs	r2, #15
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	691a      	ldr	r2, [r3, #16]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	08da      	lsrs	r2, r3, #3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3208      	adds	r2, #8
 80018e8:	6939      	ldr	r1, [r7, #16]
 80018ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	2203      	movs	r2, #3
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 0203 	and.w	r2, r3, #3
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 80a6 	beq.w	8001a7c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001930:	4b5b      	ldr	r3, [pc, #364]	; (8001aa0 <HAL_GPIO_Init+0x2e4>)
 8001932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001934:	4a5a      	ldr	r2, [pc, #360]	; (8001aa0 <HAL_GPIO_Init+0x2e4>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6613      	str	r3, [r2, #96]	; 0x60
 800193c:	4b58      	ldr	r3, [pc, #352]	; (8001aa0 <HAL_GPIO_Init+0x2e4>)
 800193e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001948:	4a56      	ldr	r2, [pc, #344]	; (8001aa4 <HAL_GPIO_Init+0x2e8>)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	089b      	lsrs	r3, r3, #2
 800194e:	3302      	adds	r3, #2
 8001950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	220f      	movs	r2, #15
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001972:	d01f      	beq.n	80019b4 <HAL_GPIO_Init+0x1f8>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a4c      	ldr	r2, [pc, #304]	; (8001aa8 <HAL_GPIO_Init+0x2ec>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d019      	beq.n	80019b0 <HAL_GPIO_Init+0x1f4>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a4b      	ldr	r2, [pc, #300]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d013      	beq.n	80019ac <HAL_GPIO_Init+0x1f0>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a4a      	ldr	r2, [pc, #296]	; (8001ab0 <HAL_GPIO_Init+0x2f4>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d00d      	beq.n	80019a8 <HAL_GPIO_Init+0x1ec>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a49      	ldr	r2, [pc, #292]	; (8001ab4 <HAL_GPIO_Init+0x2f8>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d007      	beq.n	80019a4 <HAL_GPIO_Init+0x1e8>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a48      	ldr	r2, [pc, #288]	; (8001ab8 <HAL_GPIO_Init+0x2fc>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d101      	bne.n	80019a0 <HAL_GPIO_Init+0x1e4>
 800199c:	2305      	movs	r3, #5
 800199e:	e00a      	b.n	80019b6 <HAL_GPIO_Init+0x1fa>
 80019a0:	2306      	movs	r3, #6
 80019a2:	e008      	b.n	80019b6 <HAL_GPIO_Init+0x1fa>
 80019a4:	2304      	movs	r3, #4
 80019a6:	e006      	b.n	80019b6 <HAL_GPIO_Init+0x1fa>
 80019a8:	2303      	movs	r3, #3
 80019aa:	e004      	b.n	80019b6 <HAL_GPIO_Init+0x1fa>
 80019ac:	2302      	movs	r3, #2
 80019ae:	e002      	b.n	80019b6 <HAL_GPIO_Init+0x1fa>
 80019b0:	2301      	movs	r3, #1
 80019b2:	e000      	b.n	80019b6 <HAL_GPIO_Init+0x1fa>
 80019b4:	2300      	movs	r3, #0
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	f002 0203 	and.w	r2, r2, #3
 80019bc:	0092      	lsls	r2, r2, #2
 80019be:	4093      	lsls	r3, r2
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019c6:	4937      	ldr	r1, [pc, #220]	; (8001aa4 <HAL_GPIO_Init+0x2e8>)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	089b      	lsrs	r3, r3, #2
 80019cc:	3302      	adds	r3, #2
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019d4:	4b39      	ldr	r3, [pc, #228]	; (8001abc <HAL_GPIO_Init+0x300>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	43db      	mvns	r3, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019f8:	4a30      	ldr	r2, [pc, #192]	; (8001abc <HAL_GPIO_Init+0x300>)
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019fe:	4b2f      	ldr	r3, [pc, #188]	; (8001abc <HAL_GPIO_Init+0x300>)
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a22:	4a26      	ldr	r2, [pc, #152]	; (8001abc <HAL_GPIO_Init+0x300>)
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a28:	4b24      	ldr	r3, [pc, #144]	; (8001abc <HAL_GPIO_Init+0x300>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d003      	beq.n	8001a4c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a4c:	4a1b      	ldr	r2, [pc, #108]	; (8001abc <HAL_GPIO_Init+0x300>)
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a52:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <HAL_GPIO_Init+0x300>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a76:	4a11      	ldr	r2, [pc, #68]	; (8001abc <HAL_GPIO_Init+0x300>)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f47f ae9d 	bne.w	80017cc <HAL_GPIO_Init+0x10>
  }
}
 8001a92:	bf00      	nop
 8001a94:	bf00      	nop
 8001a96:	371c      	adds	r7, #28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40010000 	.word	0x40010000
 8001aa8:	48000400 	.word	0x48000400
 8001aac:	48000800 	.word	0x48000800
 8001ab0:	48000c00 	.word	0x48000c00
 8001ab4:	48001000 	.word	0x48001000
 8001ab8:	48001400 	.word	0x48001400
 8001abc:	40010400 	.word	0x40010400

08001ac0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d141      	bne.n	8001b52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ace:	4b4b      	ldr	r3, [pc, #300]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ada:	d131      	bne.n	8001b40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001adc:	4b47      	ldr	r3, [pc, #284]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ae2:	4a46      	ldr	r2, [pc, #280]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ae8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aec:	4b43      	ldr	r3, [pc, #268]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001af4:	4a41      	ldr	r2, [pc, #260]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001afa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001afc:	4b40      	ldr	r3, [pc, #256]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2232      	movs	r2, #50	; 0x32
 8001b02:	fb02 f303 	mul.w	r3, r2, r3
 8001b06:	4a3f      	ldr	r2, [pc, #252]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b08:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0c:	0c9b      	lsrs	r3, r3, #18
 8001b0e:	3301      	adds	r3, #1
 8001b10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b12:	e002      	b.n	8001b1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b1a:	4b38      	ldr	r3, [pc, #224]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b26:	d102      	bne.n	8001b2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f2      	bne.n	8001b14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b2e:	4b33      	ldr	r3, [pc, #204]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b3a:	d158      	bne.n	8001bee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e057      	b.n	8001bf0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b40:	4b2e      	ldr	r3, [pc, #184]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b46:	4a2d      	ldr	r2, [pc, #180]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b50:	e04d      	b.n	8001bee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b58:	d141      	bne.n	8001bde <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b5a:	4b28      	ldr	r3, [pc, #160]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b66:	d131      	bne.n	8001bcc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b68:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b6e:	4a23      	ldr	r2, [pc, #140]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b78:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b80:	4a1e      	ldr	r2, [pc, #120]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b88:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2232      	movs	r2, #50	; 0x32
 8001b8e:	fb02 f303 	mul.w	r3, r2, r3
 8001b92:	4a1c      	ldr	r2, [pc, #112]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b94:	fba2 2303 	umull	r2, r3, r2, r3
 8001b98:	0c9b      	lsrs	r3, r3, #18
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b9e:	e002      	b.n	8001ba6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ba6:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb2:	d102      	bne.n	8001bba <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f2      	bne.n	8001ba0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bba:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bc6:	d112      	bne.n	8001bee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e011      	b.n	8001bf0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001bdc:	e007      	b.n	8001bee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bde:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001be6:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	40007000 	.word	0x40007000
 8001c00:	20000008 	.word	0x20000008
 8001c04:	431bde83 	.word	0x431bde83

08001c08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e2fe      	b.n	8002218 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d075      	beq.n	8001d12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c26:	4b97      	ldr	r3, [pc, #604]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c30:	4b94      	ldr	r3, [pc, #592]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	2b0c      	cmp	r3, #12
 8001c3e:	d102      	bne.n	8001c46 <HAL_RCC_OscConfig+0x3e>
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d002      	beq.n	8001c4c <HAL_RCC_OscConfig+0x44>
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d10b      	bne.n	8001c64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4c:	4b8d      	ldr	r3, [pc, #564]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d05b      	beq.n	8001d10 <HAL_RCC_OscConfig+0x108>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d157      	bne.n	8001d10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e2d9      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6c:	d106      	bne.n	8001c7c <HAL_RCC_OscConfig+0x74>
 8001c6e:	4b85      	ldr	r3, [pc, #532]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a84      	ldr	r2, [pc, #528]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e01d      	b.n	8001cb8 <HAL_RCC_OscConfig+0xb0>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x98>
 8001c86:	4b7f      	ldr	r3, [pc, #508]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a7e      	ldr	r2, [pc, #504]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b7c      	ldr	r3, [pc, #496]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a7b      	ldr	r2, [pc, #492]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e00b      	b.n	8001cb8 <HAL_RCC_OscConfig+0xb0>
 8001ca0:	4b78      	ldr	r3, [pc, #480]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a77      	ldr	r2, [pc, #476]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b75      	ldr	r3, [pc, #468]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a74      	ldr	r2, [pc, #464]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d013      	beq.n	8001ce8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc0:	f7ff f84a 	bl	8000d58 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff f846 	bl	8000d58 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	; 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e29e      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cda:	4b6a      	ldr	r3, [pc, #424]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0xc0>
 8001ce6:	e014      	b.n	8001d12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce8:	f7ff f836 	bl	8000d58 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf0:	f7ff f832 	bl	8000d58 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b64      	cmp	r3, #100	; 0x64
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e28a      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d02:	4b60      	ldr	r3, [pc, #384]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0xe8>
 8001d0e:	e000      	b.n	8001d12 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d075      	beq.n	8001e0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d1e:	4b59      	ldr	r3, [pc, #356]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d28:	4b56      	ldr	r3, [pc, #344]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	2b0c      	cmp	r3, #12
 8001d36:	d102      	bne.n	8001d3e <HAL_RCC_OscConfig+0x136>
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d002      	beq.n	8001d44 <HAL_RCC_OscConfig+0x13c>
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d11f      	bne.n	8001d84 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d44:	4b4f      	ldr	r3, [pc, #316]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <HAL_RCC_OscConfig+0x154>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e25d      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5c:	4b49      	ldr	r3, [pc, #292]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	061b      	lsls	r3, r3, #24
 8001d6a:	4946      	ldr	r1, [pc, #280]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d70:	4b45      	ldr	r3, [pc, #276]	; (8001e88 <HAL_RCC_OscConfig+0x280>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe ffa3 	bl	8000cc0 <HAL_InitTick>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d043      	beq.n	8001e08 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e249      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d023      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d8c:	4b3d      	ldr	r3, [pc, #244]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a3c      	ldr	r2, [pc, #240]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7fe ffde 	bl	8000d58 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da0:	f7fe ffda 	bl	8000d58 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e232      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001db2:	4b34      	ldr	r3, [pc, #208]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dbe:	4b31      	ldr	r3, [pc, #196]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	061b      	lsls	r3, r3, #24
 8001dcc:	492d      	ldr	r1, [pc, #180]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	604b      	str	r3, [r1, #4]
 8001dd2:	e01a      	b.n	8001e0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dd4:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a2a      	ldr	r2, [pc, #168]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001dda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de0:	f7fe ffba 	bl	8000d58 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de8:	f7fe ffb6 	bl	8000d58 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e20e      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dfa:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x1e0>
 8001e06:	e000      	b.n	8001e0a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d041      	beq.n	8001e9a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d01c      	beq.n	8001e58 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e1e:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e24:	4a17      	ldr	r2, [pc, #92]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2e:	f7fe ff93 	bl	8000d58 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e36:	f7fe ff8f 	bl	8000d58 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e1e7      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e48:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0ef      	beq.n	8001e36 <HAL_RCC_OscConfig+0x22e>
 8001e56:	e020      	b.n	8001e9a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e58:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e5e:	4a09      	ldr	r2, [pc, #36]	; (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e68:	f7fe ff76 	bl	8000d58 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e6e:	e00d      	b.n	8001e8c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e70:	f7fe ff72 	bl	8000d58 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d906      	bls.n	8001e8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e1ca      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
 8001e82:	bf00      	nop
 8001e84:	40021000 	.word	0x40021000
 8001e88:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e8c:	4b8c      	ldr	r3, [pc, #560]	; (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1ea      	bne.n	8001e70 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 80a6 	beq.w	8001ff4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001eac:	4b84      	ldr	r3, [pc, #528]	; (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_OscConfig+0x2b4>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <HAL_RCC_OscConfig+0x2b6>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00d      	beq.n	8001ede <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec2:	4b7f      	ldr	r3, [pc, #508]	; (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec6:	4a7e      	ldr	r2, [pc, #504]	; (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ece:	4b7c      	ldr	r3, [pc, #496]	; (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001eda:	2301      	movs	r3, #1
 8001edc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ede:	4b79      	ldr	r3, [pc, #484]	; (80020c4 <HAL_RCC_OscConfig+0x4bc>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d118      	bne.n	8001f1c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eea:	4b76      	ldr	r3, [pc, #472]	; (80020c4 <HAL_RCC_OscConfig+0x4bc>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a75      	ldr	r2, [pc, #468]	; (80020c4 <HAL_RCC_OscConfig+0x4bc>)
 8001ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef6:	f7fe ff2f 	bl	8000d58 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efe:	f7fe ff2b 	bl	8000d58 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e183      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f10:	4b6c      	ldr	r3, [pc, #432]	; (80020c4 <HAL_RCC_OscConfig+0x4bc>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f0      	beq.n	8001efe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d108      	bne.n	8001f36 <HAL_RCC_OscConfig+0x32e>
 8001f24:	4b66      	ldr	r3, [pc, #408]	; (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2a:	4a65      	ldr	r2, [pc, #404]	; (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f34:	e024      	b.n	8001f80 <HAL_RCC_OscConfig+0x378>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2b05      	cmp	r3, #5
 8001f3c:	d110      	bne.n	8001f60 <HAL_RCC_OscConfig+0x358>
 8001f3e:	4b60      	ldr	r3, [pc, #384]	; (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f44:	4a5e      	ldr	r2, [pc, #376]	; (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001f46:	f043 0304 	orr.w	r3, r3, #4
 8001f4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f4e:	4b5c      	ldr	r3, [pc, #368]	; (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f54:	4a5a      	ldr	r2, [pc, #360]	; (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f5e:	e00f      	b.n	8001f80 <HAL_RCC_OscConfig+0x378>
 8001f60:	4b57      	ldr	r3, [pc, #348]	; (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f66:	4a56      	ldr	r2, [pc, #344]	; (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001f68:	f023 0301 	bic.w	r3, r3, #1
 8001f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f70:	4b53      	ldr	r3, [pc, #332]	; (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f76:	4a52      	ldr	r2, [pc, #328]	; (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001f78:	f023 0304 	bic.w	r3, r3, #4
 8001f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d016      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f88:	f7fe fee6 	bl	8000d58 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f8e:	e00a      	b.n	8001fa6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f90:	f7fe fee2 	bl	8000d58 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e138      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa6:	4b46      	ldr	r3, [pc, #280]	; (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0ed      	beq.n	8001f90 <HAL_RCC_OscConfig+0x388>
 8001fb4:	e015      	b.n	8001fe2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb6:	f7fe fecf 	bl	8000d58 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fbc:	e00a      	b.n	8001fd4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fbe:	f7fe fecb 	bl	8000d58 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e121      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fd4:	4b3a      	ldr	r3, [pc, #232]	; (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1ed      	bne.n	8001fbe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fe2:	7ffb      	ldrb	r3, [r7, #31]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d105      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe8:	4b35      	ldr	r3, [pc, #212]	; (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fec:	4a34      	ldr	r2, [pc, #208]	; (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001fee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0320 	and.w	r3, r3, #32
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d03c      	beq.n	800207a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d01c      	beq.n	8002042 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002008:	4b2d      	ldr	r3, [pc, #180]	; (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 800200a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800200e:	4a2c      	ldr	r2, [pc, #176]	; (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002018:	f7fe fe9e 	bl	8000d58 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002020:	f7fe fe9a 	bl	8000d58 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e0f2      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002032:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8002034:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0ef      	beq.n	8002020 <HAL_RCC_OscConfig+0x418>
 8002040:	e01b      	b.n	800207a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002042:	4b1f      	ldr	r3, [pc, #124]	; (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8002044:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002048:	4a1d      	ldr	r2, [pc, #116]	; (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 800204a:	f023 0301 	bic.w	r3, r3, #1
 800204e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002052:	f7fe fe81 	bl	8000d58 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800205a:	f7fe fe7d 	bl	8000d58 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e0d5      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800206c:	4b14      	ldr	r3, [pc, #80]	; (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 800206e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1ef      	bne.n	800205a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 80c9 	beq.w	8002216 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002084:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 030c 	and.w	r3, r3, #12
 800208c:	2b0c      	cmp	r3, #12
 800208e:	f000 8083 	beq.w	8002198 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d15e      	bne.n	8002158 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209a:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a08      	ldr	r2, [pc, #32]	; (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 80020a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a6:	f7fe fe57 	bl	8000d58 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ac:	e00c      	b.n	80020c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ae:	f7fe fe53 	bl	8000d58 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d905      	bls.n	80020c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e0ab      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020c8:	4b55      	ldr	r3, [pc, #340]	; (8002220 <HAL_RCC_OscConfig+0x618>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1ec      	bne.n	80020ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020d4:	4b52      	ldr	r3, [pc, #328]	; (8002220 <HAL_RCC_OscConfig+0x618>)
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	4b52      	ldr	r3, [pc, #328]	; (8002224 <HAL_RCC_OscConfig+0x61c>)
 80020da:	4013      	ands	r3, r2
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6a11      	ldr	r1, [r2, #32]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020e4:	3a01      	subs	r2, #1
 80020e6:	0112      	lsls	r2, r2, #4
 80020e8:	4311      	orrs	r1, r2
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80020ee:	0212      	lsls	r2, r2, #8
 80020f0:	4311      	orrs	r1, r2
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020f6:	0852      	lsrs	r2, r2, #1
 80020f8:	3a01      	subs	r2, #1
 80020fa:	0552      	lsls	r2, r2, #21
 80020fc:	4311      	orrs	r1, r2
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002102:	0852      	lsrs	r2, r2, #1
 8002104:	3a01      	subs	r2, #1
 8002106:	0652      	lsls	r2, r2, #25
 8002108:	4311      	orrs	r1, r2
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800210e:	06d2      	lsls	r2, r2, #27
 8002110:	430a      	orrs	r2, r1
 8002112:	4943      	ldr	r1, [pc, #268]	; (8002220 <HAL_RCC_OscConfig+0x618>)
 8002114:	4313      	orrs	r3, r2
 8002116:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002118:	4b41      	ldr	r3, [pc, #260]	; (8002220 <HAL_RCC_OscConfig+0x618>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a40      	ldr	r2, [pc, #256]	; (8002220 <HAL_RCC_OscConfig+0x618>)
 800211e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002122:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002124:	4b3e      	ldr	r3, [pc, #248]	; (8002220 <HAL_RCC_OscConfig+0x618>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4a3d      	ldr	r2, [pc, #244]	; (8002220 <HAL_RCC_OscConfig+0x618>)
 800212a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800212e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002130:	f7fe fe12 	bl	8000d58 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002138:	f7fe fe0e 	bl	8000d58 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e066      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800214a:	4b35      	ldr	r3, [pc, #212]	; (8002220 <HAL_RCC_OscConfig+0x618>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0f0      	beq.n	8002138 <HAL_RCC_OscConfig+0x530>
 8002156:	e05e      	b.n	8002216 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002158:	4b31      	ldr	r3, [pc, #196]	; (8002220 <HAL_RCC_OscConfig+0x618>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a30      	ldr	r2, [pc, #192]	; (8002220 <HAL_RCC_OscConfig+0x618>)
 800215e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002164:	f7fe fdf8 	bl	8000d58 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216c:	f7fe fdf4 	bl	8000d58 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e04c      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800217e:	4b28      	ldr	r3, [pc, #160]	; (8002220 <HAL_RCC_OscConfig+0x618>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f0      	bne.n	800216c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800218a:	4b25      	ldr	r3, [pc, #148]	; (8002220 <HAL_RCC_OscConfig+0x618>)
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	4924      	ldr	r1, [pc, #144]	; (8002220 <HAL_RCC_OscConfig+0x618>)
 8002190:	4b25      	ldr	r3, [pc, #148]	; (8002228 <HAL_RCC_OscConfig+0x620>)
 8002192:	4013      	ands	r3, r2
 8002194:	60cb      	str	r3, [r1, #12]
 8002196:	e03e      	b.n	8002216 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e039      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80021a4:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <HAL_RCC_OscConfig+0x618>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f003 0203 	and.w	r2, r3, #3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d12c      	bne.n	8002212 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	3b01      	subs	r3, #1
 80021c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d123      	bne.n	8002212 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d11b      	bne.n	8002212 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d113      	bne.n	8002212 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f4:	085b      	lsrs	r3, r3, #1
 80021f6:	3b01      	subs	r3, #1
 80021f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d109      	bne.n	8002212 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002208:	085b      	lsrs	r3, r3, #1
 800220a:	3b01      	subs	r3, #1
 800220c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800220e:	429a      	cmp	r2, r3
 8002210:	d001      	beq.n	8002216 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3720      	adds	r7, #32
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40021000 	.word	0x40021000
 8002224:	019f800c 	.word	0x019f800c
 8002228:	feeefffc 	.word	0xfeeefffc

0800222c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e11e      	b.n	8002482 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002244:	4b91      	ldr	r3, [pc, #580]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 030f 	and.w	r3, r3, #15
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d910      	bls.n	8002274 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002252:	4b8e      	ldr	r3, [pc, #568]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 020f 	bic.w	r2, r3, #15
 800225a:	498c      	ldr	r1, [pc, #560]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002262:	4b8a      	ldr	r3, [pc, #552]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d001      	beq.n	8002274 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e106      	b.n	8002482 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b00      	cmp	r3, #0
 800227e:	d073      	beq.n	8002368 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b03      	cmp	r3, #3
 8002286:	d129      	bne.n	80022dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002288:	4b81      	ldr	r3, [pc, #516]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e0f4      	b.n	8002482 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002298:	f000 f99e 	bl	80025d8 <RCC_GetSysClockFreqFromPLLSource>
 800229c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4a7c      	ldr	r2, [pc, #496]	; (8002494 <HAL_RCC_ClockConfig+0x268>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d93f      	bls.n	8002326 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80022a6:	4b7a      	ldr	r3, [pc, #488]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d009      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d033      	beq.n	8002326 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d12f      	bne.n	8002326 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022c6:	4b72      	ldr	r3, [pc, #456]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022ce:	4a70      	ldr	r2, [pc, #448]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 80022d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80022d6:	2380      	movs	r3, #128	; 0x80
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	e024      	b.n	8002326 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d107      	bne.n	80022f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e4:	4b6a      	ldr	r3, [pc, #424]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d109      	bne.n	8002304 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0c6      	b.n	8002482 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022f4:	4b66      	ldr	r3, [pc, #408]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0be      	b.n	8002482 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002304:	f000 f8ce 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 8002308:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4a61      	ldr	r2, [pc, #388]	; (8002494 <HAL_RCC_ClockConfig+0x268>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d909      	bls.n	8002326 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002312:	4b5f      	ldr	r3, [pc, #380]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800231a:	4a5d      	ldr	r2, [pc, #372]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 800231c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002320:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002322:	2380      	movs	r3, #128	; 0x80
 8002324:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002326:	4b5a      	ldr	r3, [pc, #360]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f023 0203 	bic.w	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	4957      	ldr	r1, [pc, #348]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 8002334:	4313      	orrs	r3, r2
 8002336:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002338:	f7fe fd0e 	bl	8000d58 <HAL_GetTick>
 800233c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233e:	e00a      	b.n	8002356 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002340:	f7fe fd0a 	bl	8000d58 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f241 3288 	movw	r2, #5000	; 0x1388
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e095      	b.n	8002482 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002356:	4b4e      	ldr	r3, [pc, #312]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 020c 	and.w	r2, r3, #12
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	429a      	cmp	r2, r3
 8002366:	d1eb      	bne.n	8002340 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d023      	beq.n	80023bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002380:	4b43      	ldr	r3, [pc, #268]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	4a42      	ldr	r2, [pc, #264]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 8002386:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800238a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d007      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002398:	4b3d      	ldr	r3, [pc, #244]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80023a0:	4a3b      	ldr	r2, [pc, #236]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 80023a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a8:	4b39      	ldr	r3, [pc, #228]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	4936      	ldr	r1, [pc, #216]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	608b      	str	r3, [r1, #8]
 80023ba:	e008      	b.n	80023ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	2b80      	cmp	r3, #128	; 0x80
 80023c0:	d105      	bne.n	80023ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80023c2:	4b33      	ldr	r3, [pc, #204]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	4a32      	ldr	r2, [pc, #200]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 80023c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023ce:	4b2f      	ldr	r3, [pc, #188]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d21d      	bcs.n	8002418 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023dc:	4b2b      	ldr	r3, [pc, #172]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f023 020f 	bic.w	r2, r3, #15
 80023e4:	4929      	ldr	r1, [pc, #164]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023ec:	f7fe fcb4 	bl	8000d58 <HAL_GetTick>
 80023f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f2:	e00a      	b.n	800240a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f4:	f7fe fcb0 	bl	8000d58 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e03b      	b.n	8002482 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240a:	4b20      	ldr	r3, [pc, #128]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d1ed      	bne.n	80023f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002424:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4917      	ldr	r1, [pc, #92]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 8002432:	4313      	orrs	r3, r2
 8002434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d009      	beq.n	8002456 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002442:	4b13      	ldr	r3, [pc, #76]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	490f      	ldr	r1, [pc, #60]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 8002452:	4313      	orrs	r3, r2
 8002454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002456:	f000 f825 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 800245a:	4602      	mov	r2, r0
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	091b      	lsrs	r3, r3, #4
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	490c      	ldr	r1, [pc, #48]	; (8002498 <HAL_RCC_ClockConfig+0x26c>)
 8002468:	5ccb      	ldrb	r3, [r1, r3]
 800246a:	f003 031f 	and.w	r3, r3, #31
 800246e:	fa22 f303 	lsr.w	r3, r2, r3
 8002472:	4a0a      	ldr	r2, [pc, #40]	; (800249c <HAL_RCC_ClockConfig+0x270>)
 8002474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002476:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <HAL_RCC_ClockConfig+0x274>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe fc20 	bl	8000cc0 <HAL_InitTick>
 8002480:	4603      	mov	r3, r0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40022000 	.word	0x40022000
 8002490:	40021000 	.word	0x40021000
 8002494:	04c4b400 	.word	0x04c4b400
 8002498:	08004798 	.word	0x08004798
 800249c:	20000008 	.word	0x20000008
 80024a0:	2000000c 	.word	0x2000000c

080024a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80024aa:	4b2c      	ldr	r3, [pc, #176]	; (800255c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 030c 	and.w	r3, r3, #12
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d102      	bne.n	80024bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024b6:	4b2a      	ldr	r3, [pc, #168]	; (8002560 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024b8:	613b      	str	r3, [r7, #16]
 80024ba:	e047      	b.n	800254c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80024bc:	4b27      	ldr	r3, [pc, #156]	; (800255c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 030c 	and.w	r3, r3, #12
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d102      	bne.n	80024ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024c8:	4b26      	ldr	r3, [pc, #152]	; (8002564 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	e03e      	b.n	800254c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80024ce:	4b23      	ldr	r3, [pc, #140]	; (800255c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	2b0c      	cmp	r3, #12
 80024d8:	d136      	bne.n	8002548 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024da:	4b20      	ldr	r3, [pc, #128]	; (800255c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024e4:	4b1d      	ldr	r3, [pc, #116]	; (800255c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	3301      	adds	r3, #1
 80024f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d10c      	bne.n	8002512 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024f8:	4a1a      	ldr	r2, [pc, #104]	; (8002564 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002500:	4a16      	ldr	r2, [pc, #88]	; (800255c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002502:	68d2      	ldr	r2, [r2, #12]
 8002504:	0a12      	lsrs	r2, r2, #8
 8002506:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800250a:	fb02 f303 	mul.w	r3, r2, r3
 800250e:	617b      	str	r3, [r7, #20]
      break;
 8002510:	e00c      	b.n	800252c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002512:	4a13      	ldr	r2, [pc, #76]	; (8002560 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	fbb2 f3f3 	udiv	r3, r2, r3
 800251a:	4a10      	ldr	r2, [pc, #64]	; (800255c <HAL_RCC_GetSysClockFreq+0xb8>)
 800251c:	68d2      	ldr	r2, [r2, #12]
 800251e:	0a12      	lsrs	r2, r2, #8
 8002520:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002524:	fb02 f303 	mul.w	r3, r2, r3
 8002528:	617b      	str	r3, [r7, #20]
      break;
 800252a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <HAL_RCC_GetSysClockFreq+0xb8>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	0e5b      	lsrs	r3, r3, #25
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	3301      	adds	r3, #1
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	fbb2 f3f3 	udiv	r3, r2, r3
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	e001      	b.n	800254c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800254c:	693b      	ldr	r3, [r7, #16]
}
 800254e:	4618      	mov	r0, r3
 8002550:	371c      	adds	r7, #28
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40021000 	.word	0x40021000
 8002560:	00f42400 	.word	0x00f42400
 8002564:	007a1200 	.word	0x007a1200

08002568 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800256c:	4b03      	ldr	r3, [pc, #12]	; (800257c <HAL_RCC_GetHCLKFreq+0x14>)
 800256e:	681b      	ldr	r3, [r3, #0]
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	20000008 	.word	0x20000008

08002580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002584:	f7ff fff0 	bl	8002568 <HAL_RCC_GetHCLKFreq>
 8002588:	4602      	mov	r2, r0
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	0a1b      	lsrs	r3, r3, #8
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	4904      	ldr	r1, [pc, #16]	; (80025a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002596:	5ccb      	ldrb	r3, [r1, r3]
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40021000 	.word	0x40021000
 80025a8:	080047a8 	.word	0x080047a8

080025ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025b0:	f7ff ffda 	bl	8002568 <HAL_RCC_GetHCLKFreq>
 80025b4:	4602      	mov	r2, r0
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	0adb      	lsrs	r3, r3, #11
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	4904      	ldr	r1, [pc, #16]	; (80025d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025c2:	5ccb      	ldrb	r3, [r1, r3]
 80025c4:	f003 031f 	and.w	r3, r3, #31
 80025c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40021000 	.word	0x40021000
 80025d4:	080047a8 	.word	0x080047a8

080025d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	b087      	sub	sp, #28
 80025dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025de:	4b1e      	ldr	r3, [pc, #120]	; (8002658 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025e8:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	091b      	lsrs	r3, r3, #4
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	3301      	adds	r3, #1
 80025f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d10c      	bne.n	8002616 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025fc:	4a17      	ldr	r2, [pc, #92]	; (800265c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	fbb2 f3f3 	udiv	r3, r2, r3
 8002604:	4a14      	ldr	r2, [pc, #80]	; (8002658 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002606:	68d2      	ldr	r2, [r2, #12]
 8002608:	0a12      	lsrs	r2, r2, #8
 800260a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800260e:	fb02 f303 	mul.w	r3, r2, r3
 8002612:	617b      	str	r3, [r7, #20]
    break;
 8002614:	e00c      	b.n	8002630 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002616:	4a12      	ldr	r2, [pc, #72]	; (8002660 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	fbb2 f3f3 	udiv	r3, r2, r3
 800261e:	4a0e      	ldr	r2, [pc, #56]	; (8002658 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002620:	68d2      	ldr	r2, [r2, #12]
 8002622:	0a12      	lsrs	r2, r2, #8
 8002624:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002628:	fb02 f303 	mul.w	r3, r2, r3
 800262c:	617b      	str	r3, [r7, #20]
    break;
 800262e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002630:	4b09      	ldr	r3, [pc, #36]	; (8002658 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	0e5b      	lsrs	r3, r3, #25
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	3301      	adds	r3, #1
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	fbb2 f3f3 	udiv	r3, r2, r3
 8002648:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800264a:	687b      	ldr	r3, [r7, #4]
}
 800264c:	4618      	mov	r0, r3
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	40021000 	.word	0x40021000
 800265c:	007a1200 	.word	0x007a1200
 8002660:	00f42400 	.word	0x00f42400

08002664 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800266c:	2300      	movs	r3, #0
 800266e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002670:	2300      	movs	r3, #0
 8002672:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 8098 	beq.w	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002682:	2300      	movs	r3, #0
 8002684:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002686:	4b43      	ldr	r3, [pc, #268]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10d      	bne.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002692:	4b40      	ldr	r3, [pc, #256]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002696:	4a3f      	ldr	r2, [pc, #252]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269c:	6593      	str	r3, [r2, #88]	; 0x58
 800269e:	4b3d      	ldr	r3, [pc, #244]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026aa:	2301      	movs	r3, #1
 80026ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026ae:	4b3a      	ldr	r3, [pc, #232]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a39      	ldr	r2, [pc, #228]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026ba:	f7fe fb4d 	bl	8000d58 <HAL_GetTick>
 80026be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026c0:	e009      	b.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c2:	f7fe fb49 	bl	8000d58 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d902      	bls.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	74fb      	strb	r3, [r7, #19]
        break;
 80026d4:	e005      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026d6:	4b30      	ldr	r3, [pc, #192]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0ef      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80026e2:	7cfb      	ldrb	r3, [r7, #19]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d159      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026e8:	4b2a      	ldr	r3, [pc, #168]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d01e      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	429a      	cmp	r2, r3
 8002702:	d019      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002704:	4b23      	ldr	r3, [pc, #140]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800270e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002710:	4b20      	ldr	r3, [pc, #128]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002716:	4a1f      	ldr	r2, [pc, #124]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800271c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002720:	4b1c      	ldr	r3, [pc, #112]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002726:	4a1b      	ldr	r2, [pc, #108]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800272c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002730:	4a18      	ldr	r2, [pc, #96]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d016      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002742:	f7fe fb09 	bl	8000d58 <HAL_GetTick>
 8002746:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002748:	e00b      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274a:	f7fe fb05 	bl	8000d58 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	f241 3288 	movw	r2, #5000	; 0x1388
 8002758:	4293      	cmp	r3, r2
 800275a:	d902      	bls.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	74fb      	strb	r3, [r7, #19]
            break;
 8002760:	e006      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002762:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0ec      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002770:	7cfb      	ldrb	r3, [r7, #19]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10b      	bne.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002776:	4b07      	ldr	r3, [pc, #28]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002784:	4903      	ldr	r1, [pc, #12]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800278c:	e008      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800278e:	7cfb      	ldrb	r3, [r7, #19]
 8002790:	74bb      	strb	r3, [r7, #18]
 8002792:	e005      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002794:	40021000 	.word	0x40021000
 8002798:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800279c:	7cfb      	ldrb	r3, [r7, #19]
 800279e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027a0:	7c7b      	ldrb	r3, [r7, #17]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d105      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a6:	4ba7      	ldr	r3, [pc, #668]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027aa:	4aa6      	ldr	r2, [pc, #664]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00a      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027be:	4ba1      	ldr	r3, [pc, #644]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c4:	f023 0203 	bic.w	r2, r3, #3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	499d      	ldr	r1, [pc, #628]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00a      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027e0:	4b98      	ldr	r3, [pc, #608]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e6:	f023 020c 	bic.w	r2, r3, #12
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	4995      	ldr	r1, [pc, #596]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00a      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002802:	4b90      	ldr	r3, [pc, #576]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002808:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	498c      	ldr	r1, [pc, #560]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002812:	4313      	orrs	r3, r2
 8002814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00a      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002824:	4b87      	ldr	r3, [pc, #540]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	4984      	ldr	r1, [pc, #528]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00a      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002846:	4b7f      	ldr	r3, [pc, #508]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	497b      	ldr	r1, [pc, #492]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002856:	4313      	orrs	r3, r2
 8002858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0320 	and.w	r3, r3, #32
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00a      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002868:	4b76      	ldr	r3, [pc, #472]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800286a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	4973      	ldr	r1, [pc, #460]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00a      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800288a:	4b6e      	ldr	r3, [pc, #440]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800288c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002890:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	496a      	ldr	r1, [pc, #424]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00a      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028ac:	4b65      	ldr	r3, [pc, #404]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	4962      	ldr	r1, [pc, #392]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00a      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028ce:	4b5d      	ldr	r3, [pc, #372]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	4959      	ldr	r1, [pc, #356]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00a      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028f0:	4b54      	ldr	r3, [pc, #336]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028f6:	f023 0203 	bic.w	r2, r3, #3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fe:	4951      	ldr	r1, [pc, #324]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002912:	4b4c      	ldr	r3, [pc, #304]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002918:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	4948      	ldr	r1, [pc, #288]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002930:	2b00      	cmp	r3, #0
 8002932:	d015      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002934:	4b43      	ldr	r3, [pc, #268]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	4940      	ldr	r1, [pc, #256]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002952:	d105      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002954:	4b3b      	ldr	r3, [pc, #236]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	4a3a      	ldr	r2, [pc, #232]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800295a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800295e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002968:	2b00      	cmp	r3, #0
 800296a:	d015      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800296c:	4b35      	ldr	r3, [pc, #212]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002972:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297a:	4932      	ldr	r1, [pc, #200]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002986:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800298a:	d105      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800298c:	4b2d      	ldr	r3, [pc, #180]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	4a2c      	ldr	r2, [pc, #176]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002992:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002996:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d015      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80029a4:	4b27      	ldr	r3, [pc, #156]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b2:	4924      	ldr	r1, [pc, #144]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029c2:	d105      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029c4:	4b1f      	ldr	r3, [pc, #124]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4a1e      	ldr	r2, [pc, #120]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d015      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029dc:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ea:	4916      	ldr	r1, [pc, #88]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029fa:	d105      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029fc:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	4a10      	ldr	r2, [pc, #64]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a06:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d019      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a14:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	4908      	ldr	r1, [pc, #32]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a32:	d109      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a34:	4b03      	ldr	r3, [pc, #12]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4a02      	ldr	r2, [pc, #8]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a3e:	60d3      	str	r3, [r2, #12]
 8002a40:	e002      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002a42:	bf00      	nop
 8002a44:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d015      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a54:	4b29      	ldr	r3, [pc, #164]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	4926      	ldr	r1, [pc, #152]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a72:	d105      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a74:	4b21      	ldr	r3, [pc, #132]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	4a20      	ldr	r2, [pc, #128]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d015      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002a8c:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a92:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a9a:	4918      	ldr	r1, [pc, #96]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aaa:	d105      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002aac:	4b13      	ldr	r3, [pc, #76]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4a12      	ldr	r2, [pc, #72]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d015      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002ac4:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ac6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002aca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad2:	490a      	ldr	r1, [pc, #40]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ade:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ae2:	d105      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ae4:	4b05      	ldr	r3, [pc, #20]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	4a04      	ldr	r2, [pc, #16]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002aea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002af0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000

08002b00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e042      	b.n	8002b98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d106      	bne.n	8002b2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7fd ff6d 	bl	8000a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2224      	movs	r2, #36	; 0x24
 8002b2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0201 	bic.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fbb2 	bl	80032b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f8b3 	bl	8002cbc <UART_SetConfig>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e01b      	b.n	8002b98 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0201 	orr.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 fc31 	bl	80033f8 <UART_CheckIdleState>
 8002b96:	4603      	mov	r3, r0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	; 0x28
 8002ba4:	af02      	add	r7, sp, #8
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	4613      	mov	r3, r2
 8002bae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb6:	2b20      	cmp	r3, #32
 8002bb8:	d17b      	bne.n	8002cb2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d002      	beq.n	8002bc6 <HAL_UART_Transmit+0x26>
 8002bc0:	88fb      	ldrh	r3, [r7, #6]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e074      	b.n	8002cb4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2221      	movs	r2, #33	; 0x21
 8002bd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bda:	f7fe f8bd 	bl	8000d58 <HAL_GetTick>
 8002bde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	88fa      	ldrh	r2, [r7, #6]
 8002be4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	88fa      	ldrh	r2, [r7, #6]
 8002bec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bf8:	d108      	bne.n	8002c0c <HAL_UART_Transmit+0x6c>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d104      	bne.n	8002c0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	61bb      	str	r3, [r7, #24]
 8002c0a:	e003      	b.n	8002c14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c14:	e030      	b.n	8002c78 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	2180      	movs	r1, #128	; 0x80
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 fc93 	bl	800354c <UART_WaitOnFlagUntilTimeout>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e03d      	b.n	8002cb4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10b      	bne.n	8002c56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c4c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	3302      	adds	r3, #2
 8002c52:	61bb      	str	r3, [r7, #24]
 8002c54:	e007      	b.n	8002c66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	781a      	ldrb	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	3301      	adds	r3, #1
 8002c64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1c8      	bne.n	8002c16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2140      	movs	r1, #64	; 0x40
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 fc5c 	bl	800354c <UART_WaitOnFlagUntilTimeout>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d005      	beq.n	8002ca6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e006      	b.n	8002cb4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e000      	b.n	8002cb4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002cb2:	2302      	movs	r3, #2
  }
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3720      	adds	r7, #32
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cc0:	b08c      	sub	sp, #48	; 0x30
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	4baa      	ldr	r3, [pc, #680]	; (8002f94 <UART_SetConfig+0x2d8>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	6812      	ldr	r2, [r2, #0]
 8002cf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002cf4:	430b      	orrs	r3, r1
 8002cf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a9f      	ldr	r2, [pc, #636]	; (8002f98 <UART_SetConfig+0x2dc>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d004      	beq.n	8002d28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d24:	4313      	orrs	r3, r2
 8002d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002d32:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d46:	f023 010f 	bic.w	r1, r3, #15
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a90      	ldr	r2, [pc, #576]	; (8002f9c <UART_SetConfig+0x2e0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d125      	bne.n	8002dac <UART_SetConfig+0xf0>
 8002d60:	4b8f      	ldr	r3, [pc, #572]	; (8002fa0 <UART_SetConfig+0x2e4>)
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	d81a      	bhi.n	8002da4 <UART_SetConfig+0xe8>
 8002d6e:	a201      	add	r2, pc, #4	; (adr r2, 8002d74 <UART_SetConfig+0xb8>)
 8002d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d74:	08002d85 	.word	0x08002d85
 8002d78:	08002d95 	.word	0x08002d95
 8002d7c:	08002d8d 	.word	0x08002d8d
 8002d80:	08002d9d 	.word	0x08002d9d
 8002d84:	2301      	movs	r3, #1
 8002d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d8a:	e116      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d92:	e112      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002d94:	2304      	movs	r3, #4
 8002d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d9a:	e10e      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002d9c:	2308      	movs	r3, #8
 8002d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002da2:	e10a      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002da4:	2310      	movs	r3, #16
 8002da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002daa:	e106      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a7c      	ldr	r2, [pc, #496]	; (8002fa4 <UART_SetConfig+0x2e8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d138      	bne.n	8002e28 <UART_SetConfig+0x16c>
 8002db6:	4b7a      	ldr	r3, [pc, #488]	; (8002fa0 <UART_SetConfig+0x2e4>)
 8002db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dbc:	f003 030c 	and.w	r3, r3, #12
 8002dc0:	2b0c      	cmp	r3, #12
 8002dc2:	d82d      	bhi.n	8002e20 <UART_SetConfig+0x164>
 8002dc4:	a201      	add	r2, pc, #4	; (adr r2, 8002dcc <UART_SetConfig+0x110>)
 8002dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dca:	bf00      	nop
 8002dcc:	08002e01 	.word	0x08002e01
 8002dd0:	08002e21 	.word	0x08002e21
 8002dd4:	08002e21 	.word	0x08002e21
 8002dd8:	08002e21 	.word	0x08002e21
 8002ddc:	08002e11 	.word	0x08002e11
 8002de0:	08002e21 	.word	0x08002e21
 8002de4:	08002e21 	.word	0x08002e21
 8002de8:	08002e21 	.word	0x08002e21
 8002dec:	08002e09 	.word	0x08002e09
 8002df0:	08002e21 	.word	0x08002e21
 8002df4:	08002e21 	.word	0x08002e21
 8002df8:	08002e21 	.word	0x08002e21
 8002dfc:	08002e19 	.word	0x08002e19
 8002e00:	2300      	movs	r3, #0
 8002e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e06:	e0d8      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e0e:	e0d4      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002e10:	2304      	movs	r3, #4
 8002e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e16:	e0d0      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002e18:	2308      	movs	r3, #8
 8002e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e1e:	e0cc      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002e20:	2310      	movs	r3, #16
 8002e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e26:	e0c8      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a5e      	ldr	r2, [pc, #376]	; (8002fa8 <UART_SetConfig+0x2ec>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d125      	bne.n	8002e7e <UART_SetConfig+0x1c2>
 8002e32:	4b5b      	ldr	r3, [pc, #364]	; (8002fa0 <UART_SetConfig+0x2e4>)
 8002e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e3c:	2b30      	cmp	r3, #48	; 0x30
 8002e3e:	d016      	beq.n	8002e6e <UART_SetConfig+0x1b2>
 8002e40:	2b30      	cmp	r3, #48	; 0x30
 8002e42:	d818      	bhi.n	8002e76 <UART_SetConfig+0x1ba>
 8002e44:	2b20      	cmp	r3, #32
 8002e46:	d00a      	beq.n	8002e5e <UART_SetConfig+0x1a2>
 8002e48:	2b20      	cmp	r3, #32
 8002e4a:	d814      	bhi.n	8002e76 <UART_SetConfig+0x1ba>
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <UART_SetConfig+0x19a>
 8002e50:	2b10      	cmp	r3, #16
 8002e52:	d008      	beq.n	8002e66 <UART_SetConfig+0x1aa>
 8002e54:	e00f      	b.n	8002e76 <UART_SetConfig+0x1ba>
 8002e56:	2300      	movs	r3, #0
 8002e58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e5c:	e0ad      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e64:	e0a9      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002e66:	2304      	movs	r3, #4
 8002e68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e6c:	e0a5      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002e6e:	2308      	movs	r3, #8
 8002e70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e74:	e0a1      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002e76:	2310      	movs	r3, #16
 8002e78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e7c:	e09d      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a4a      	ldr	r2, [pc, #296]	; (8002fac <UART_SetConfig+0x2f0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d125      	bne.n	8002ed4 <UART_SetConfig+0x218>
 8002e88:	4b45      	ldr	r3, [pc, #276]	; (8002fa0 <UART_SetConfig+0x2e4>)
 8002e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e92:	2bc0      	cmp	r3, #192	; 0xc0
 8002e94:	d016      	beq.n	8002ec4 <UART_SetConfig+0x208>
 8002e96:	2bc0      	cmp	r3, #192	; 0xc0
 8002e98:	d818      	bhi.n	8002ecc <UART_SetConfig+0x210>
 8002e9a:	2b80      	cmp	r3, #128	; 0x80
 8002e9c:	d00a      	beq.n	8002eb4 <UART_SetConfig+0x1f8>
 8002e9e:	2b80      	cmp	r3, #128	; 0x80
 8002ea0:	d814      	bhi.n	8002ecc <UART_SetConfig+0x210>
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <UART_SetConfig+0x1f0>
 8002ea6:	2b40      	cmp	r3, #64	; 0x40
 8002ea8:	d008      	beq.n	8002ebc <UART_SetConfig+0x200>
 8002eaa:	e00f      	b.n	8002ecc <UART_SetConfig+0x210>
 8002eac:	2300      	movs	r3, #0
 8002eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002eb2:	e082      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002eba:	e07e      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002ebc:	2304      	movs	r3, #4
 8002ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ec2:	e07a      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002ec4:	2308      	movs	r3, #8
 8002ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002eca:	e076      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002ecc:	2310      	movs	r3, #16
 8002ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ed2:	e072      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a35      	ldr	r2, [pc, #212]	; (8002fb0 <UART_SetConfig+0x2f4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d12a      	bne.n	8002f34 <UART_SetConfig+0x278>
 8002ede:	4b30      	ldr	r3, [pc, #192]	; (8002fa0 <UART_SetConfig+0x2e4>)
 8002ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eec:	d01a      	beq.n	8002f24 <UART_SetConfig+0x268>
 8002eee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ef2:	d81b      	bhi.n	8002f2c <UART_SetConfig+0x270>
 8002ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ef8:	d00c      	beq.n	8002f14 <UART_SetConfig+0x258>
 8002efa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002efe:	d815      	bhi.n	8002f2c <UART_SetConfig+0x270>
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <UART_SetConfig+0x250>
 8002f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f08:	d008      	beq.n	8002f1c <UART_SetConfig+0x260>
 8002f0a:	e00f      	b.n	8002f2c <UART_SetConfig+0x270>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f12:	e052      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002f14:	2302      	movs	r3, #2
 8002f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f1a:	e04e      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002f1c:	2304      	movs	r3, #4
 8002f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f22:	e04a      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002f24:	2308      	movs	r3, #8
 8002f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f2a:	e046      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f32:	e042      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a17      	ldr	r2, [pc, #92]	; (8002f98 <UART_SetConfig+0x2dc>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d13a      	bne.n	8002fb4 <UART_SetConfig+0x2f8>
 8002f3e:	4b18      	ldr	r3, [pc, #96]	; (8002fa0 <UART_SetConfig+0x2e4>)
 8002f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f4c:	d01a      	beq.n	8002f84 <UART_SetConfig+0x2c8>
 8002f4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f52:	d81b      	bhi.n	8002f8c <UART_SetConfig+0x2d0>
 8002f54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f58:	d00c      	beq.n	8002f74 <UART_SetConfig+0x2b8>
 8002f5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f5e:	d815      	bhi.n	8002f8c <UART_SetConfig+0x2d0>
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <UART_SetConfig+0x2b0>
 8002f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f68:	d008      	beq.n	8002f7c <UART_SetConfig+0x2c0>
 8002f6a:	e00f      	b.n	8002f8c <UART_SetConfig+0x2d0>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f72:	e022      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002f74:	2302      	movs	r3, #2
 8002f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f7a:	e01e      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002f7c:	2304      	movs	r3, #4
 8002f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f82:	e01a      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002f84:	2308      	movs	r3, #8
 8002f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f8a:	e016      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002f8c:	2310      	movs	r3, #16
 8002f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f92:	e012      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002f94:	cfff69f3 	.word	0xcfff69f3
 8002f98:	40008000 	.word	0x40008000
 8002f9c:	40013800 	.word	0x40013800
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40004400 	.word	0x40004400
 8002fa8:	40004800 	.word	0x40004800
 8002fac:	40004c00 	.word	0x40004c00
 8002fb0:	40005000 	.word	0x40005000
 8002fb4:	2310      	movs	r3, #16
 8002fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4aae      	ldr	r2, [pc, #696]	; (8003278 <UART_SetConfig+0x5bc>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	f040 8097 	bne.w	80030f4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d823      	bhi.n	8003016 <UART_SetConfig+0x35a>
 8002fce:	a201      	add	r2, pc, #4	; (adr r2, 8002fd4 <UART_SetConfig+0x318>)
 8002fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd4:	08002ff9 	.word	0x08002ff9
 8002fd8:	08003017 	.word	0x08003017
 8002fdc:	08003001 	.word	0x08003001
 8002fe0:	08003017 	.word	0x08003017
 8002fe4:	08003007 	.word	0x08003007
 8002fe8:	08003017 	.word	0x08003017
 8002fec:	08003017 	.word	0x08003017
 8002ff0:	08003017 	.word	0x08003017
 8002ff4:	0800300f 	.word	0x0800300f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ff8:	f7ff fac2 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 8002ffc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002ffe:	e010      	b.n	8003022 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003000:	4b9e      	ldr	r3, [pc, #632]	; (800327c <UART_SetConfig+0x5c0>)
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003004:	e00d      	b.n	8003022 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003006:	f7ff fa4d 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 800300a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800300c:	e009      	b.n	8003022 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800300e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003014:	e005      	b.n	8003022 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003016:	2300      	movs	r3, #0
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003020:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 8130 	beq.w	800328a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	4a94      	ldr	r2, [pc, #592]	; (8003280 <UART_SetConfig+0x5c4>)
 8003030:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003034:	461a      	mov	r2, r3
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	fbb3 f3f2 	udiv	r3, r3, r2
 800303c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	4413      	add	r3, r2
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	429a      	cmp	r2, r3
 800304c:	d305      	bcc.n	800305a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	429a      	cmp	r2, r3
 8003058:	d903      	bls.n	8003062 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003060:	e113      	b.n	800328a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	2200      	movs	r2, #0
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	60fa      	str	r2, [r7, #12]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	4a84      	ldr	r2, [pc, #528]	; (8003280 <UART_SetConfig+0x5c4>)
 8003070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003074:	b29b      	uxth	r3, r3
 8003076:	2200      	movs	r2, #0
 8003078:	603b      	str	r3, [r7, #0]
 800307a:	607a      	str	r2, [r7, #4]
 800307c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003080:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003084:	f7fd f91c 	bl	80002c0 <__aeabi_uldivmod>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4610      	mov	r0, r2
 800308e:	4619      	mov	r1, r3
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	020b      	lsls	r3, r1, #8
 800309a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800309e:	0202      	lsls	r2, r0, #8
 80030a0:	6979      	ldr	r1, [r7, #20]
 80030a2:	6849      	ldr	r1, [r1, #4]
 80030a4:	0849      	lsrs	r1, r1, #1
 80030a6:	2000      	movs	r0, #0
 80030a8:	460c      	mov	r4, r1
 80030aa:	4605      	mov	r5, r0
 80030ac:	eb12 0804 	adds.w	r8, r2, r4
 80030b0:	eb43 0905 	adc.w	r9, r3, r5
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	469a      	mov	sl, r3
 80030bc:	4693      	mov	fp, r2
 80030be:	4652      	mov	r2, sl
 80030c0:	465b      	mov	r3, fp
 80030c2:	4640      	mov	r0, r8
 80030c4:	4649      	mov	r1, r9
 80030c6:	f7fd f8fb 	bl	80002c0 <__aeabi_uldivmod>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4613      	mov	r3, r2
 80030d0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030d8:	d308      	bcc.n	80030ec <UART_SetConfig+0x430>
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030e0:	d204      	bcs.n	80030ec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6a3a      	ldr	r2, [r7, #32]
 80030e8:	60da      	str	r2, [r3, #12]
 80030ea:	e0ce      	b.n	800328a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80030f2:	e0ca      	b.n	800328a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030fc:	d166      	bne.n	80031cc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80030fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003102:	2b08      	cmp	r3, #8
 8003104:	d827      	bhi.n	8003156 <UART_SetConfig+0x49a>
 8003106:	a201      	add	r2, pc, #4	; (adr r2, 800310c <UART_SetConfig+0x450>)
 8003108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310c:	08003131 	.word	0x08003131
 8003110:	08003139 	.word	0x08003139
 8003114:	08003141 	.word	0x08003141
 8003118:	08003157 	.word	0x08003157
 800311c:	08003147 	.word	0x08003147
 8003120:	08003157 	.word	0x08003157
 8003124:	08003157 	.word	0x08003157
 8003128:	08003157 	.word	0x08003157
 800312c:	0800314f 	.word	0x0800314f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003130:	f7ff fa26 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 8003134:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003136:	e014      	b.n	8003162 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003138:	f7ff fa38 	bl	80025ac <HAL_RCC_GetPCLK2Freq>
 800313c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800313e:	e010      	b.n	8003162 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003140:	4b4e      	ldr	r3, [pc, #312]	; (800327c <UART_SetConfig+0x5c0>)
 8003142:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003144:	e00d      	b.n	8003162 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003146:	f7ff f9ad 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 800314a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800314c:	e009      	b.n	8003162 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800314e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003152:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003154:	e005      	b.n	8003162 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003160:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 8090 	beq.w	800328a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	4a44      	ldr	r2, [pc, #272]	; (8003280 <UART_SetConfig+0x5c4>)
 8003170:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003174:	461a      	mov	r2, r3
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	fbb3 f3f2 	udiv	r3, r3, r2
 800317c:	005a      	lsls	r2, r3, #1
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	085b      	lsrs	r3, r3, #1
 8003184:	441a      	add	r2, r3
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	fbb2 f3f3 	udiv	r3, r2, r3
 800318e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	2b0f      	cmp	r3, #15
 8003194:	d916      	bls.n	80031c4 <UART_SetConfig+0x508>
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800319c:	d212      	bcs.n	80031c4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	f023 030f 	bic.w	r3, r3, #15
 80031a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	085b      	lsrs	r3, r3, #1
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	8bfb      	ldrh	r3, [r7, #30]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	8bfa      	ldrh	r2, [r7, #30]
 80031c0:	60da      	str	r2, [r3, #12]
 80031c2:	e062      	b.n	800328a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80031ca:	e05e      	b.n	800328a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d828      	bhi.n	8003226 <UART_SetConfig+0x56a>
 80031d4:	a201      	add	r2, pc, #4	; (adr r2, 80031dc <UART_SetConfig+0x520>)
 80031d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031da:	bf00      	nop
 80031dc:	08003201 	.word	0x08003201
 80031e0:	08003209 	.word	0x08003209
 80031e4:	08003211 	.word	0x08003211
 80031e8:	08003227 	.word	0x08003227
 80031ec:	08003217 	.word	0x08003217
 80031f0:	08003227 	.word	0x08003227
 80031f4:	08003227 	.word	0x08003227
 80031f8:	08003227 	.word	0x08003227
 80031fc:	0800321f 	.word	0x0800321f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003200:	f7ff f9be 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 8003204:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003206:	e014      	b.n	8003232 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003208:	f7ff f9d0 	bl	80025ac <HAL_RCC_GetPCLK2Freq>
 800320c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800320e:	e010      	b.n	8003232 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003210:	4b1a      	ldr	r3, [pc, #104]	; (800327c <UART_SetConfig+0x5c0>)
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003214:	e00d      	b.n	8003232 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003216:	f7ff f945 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 800321a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800321c:	e009      	b.n	8003232 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800321e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003224:	e005      	b.n	8003232 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003230:	bf00      	nop
    }

    if (pclk != 0U)
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	2b00      	cmp	r3, #0
 8003236:	d028      	beq.n	800328a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	4a10      	ldr	r2, [pc, #64]	; (8003280 <UART_SetConfig+0x5c4>)
 800323e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003242:	461a      	mov	r2, r3
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	fbb3 f2f2 	udiv	r2, r3, r2
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	085b      	lsrs	r3, r3, #1
 8003250:	441a      	add	r2, r3
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	fbb2 f3f3 	udiv	r3, r2, r3
 800325a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	2b0f      	cmp	r3, #15
 8003260:	d910      	bls.n	8003284 <UART_SetConfig+0x5c8>
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003268:	d20c      	bcs.n	8003284 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	b29a      	uxth	r2, r3
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	60da      	str	r2, [r3, #12]
 8003274:	e009      	b.n	800328a <UART_SetConfig+0x5ce>
 8003276:	bf00      	nop
 8003278:	40008000 	.word	0x40008000
 800327c:	00f42400 	.word	0x00f42400
 8003280:	080047c0 	.word	0x080047c0
      }
      else
      {
        ret = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2201      	movs	r2, #1
 800328e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2201      	movs	r2, #1
 8003296:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2200      	movs	r2, #0
 800329e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2200      	movs	r2, #0
 80032a4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80032a6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3730      	adds	r7, #48	; 0x30
 80032ae:	46bd      	mov	sp, r7
 80032b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080032b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00a      	beq.n	8003322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003326:	f003 0304 	and.w	r3, r3, #4
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00a      	beq.n	8003344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003348:	f003 0310 	and.w	r3, r3, #16
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00a      	beq.n	8003366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336a:	f003 0320 	and.w	r3, r3, #32
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00a      	beq.n	8003388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003390:	2b00      	cmp	r3, #0
 8003392:	d01a      	beq.n	80033ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033b2:	d10a      	bne.n	80033ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	605a      	str	r2, [r3, #4]
  }
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b098      	sub	sp, #96	; 0x60
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003408:	f7fd fca6 	bl	8000d58 <HAL_GetTick>
 800340c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b08      	cmp	r3, #8
 800341a:	d12f      	bne.n	800347c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800341c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003424:	2200      	movs	r2, #0
 8003426:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f88e 	bl	800354c <UART_WaitOnFlagUntilTimeout>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d022      	beq.n	800347c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343e:	e853 3f00 	ldrex	r3, [r3]
 8003442:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800344a:	653b      	str	r3, [r7, #80]	; 0x50
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	461a      	mov	r2, r3
 8003452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003454:	647b      	str	r3, [r7, #68]	; 0x44
 8003456:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003458:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800345a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800345c:	e841 2300 	strex	r3, r2, [r1]
 8003460:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1e6      	bne.n	8003436 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2220      	movs	r2, #32
 800346c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e063      	b.n	8003544 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	2b04      	cmp	r3, #4
 8003488:	d149      	bne.n	800351e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800348a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003492:	2200      	movs	r2, #0
 8003494:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 f857 	bl	800354c <UART_WaitOnFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d03c      	beq.n	800351e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	e853 3f00 	ldrex	r3, [r3]
 80034b0:	623b      	str	r3, [r7, #32]
   return(result);
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034c2:	633b      	str	r3, [r7, #48]	; 0x30
 80034c4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ca:	e841 2300 	strex	r3, r2, [r1]
 80034ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1e6      	bne.n	80034a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3308      	adds	r3, #8
 80034dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	e853 3f00 	ldrex	r3, [r3]
 80034e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f023 0301 	bic.w	r3, r3, #1
 80034ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	3308      	adds	r3, #8
 80034f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034f6:	61fa      	str	r2, [r7, #28]
 80034f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fa:	69b9      	ldr	r1, [r7, #24]
 80034fc:	69fa      	ldr	r2, [r7, #28]
 80034fe:	e841 2300 	strex	r3, r2, [r1]
 8003502:	617b      	str	r3, [r7, #20]
   return(result);
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1e5      	bne.n	80034d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2220      	movs	r2, #32
 800350e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e012      	b.n	8003544 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2220      	movs	r2, #32
 8003522:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2220      	movs	r2, #32
 800352a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3758      	adds	r7, #88	; 0x58
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	4613      	mov	r3, r2
 800355a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800355c:	e04f      	b.n	80035fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003564:	d04b      	beq.n	80035fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003566:	f7fd fbf7 	bl	8000d58 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	429a      	cmp	r2, r3
 8003574:	d302      	bcc.n	800357c <UART_WaitOnFlagUntilTimeout+0x30>
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e04e      	b.n	800361e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0304 	and.w	r3, r3, #4
 800358a:	2b00      	cmp	r3, #0
 800358c:	d037      	beq.n	80035fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2b80      	cmp	r3, #128	; 0x80
 8003592:	d034      	beq.n	80035fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2b40      	cmp	r3, #64	; 0x40
 8003598:	d031      	beq.n	80035fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d110      	bne.n	80035ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2208      	movs	r2, #8
 80035ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 f838 	bl	8003626 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2208      	movs	r2, #8
 80035ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e029      	b.n	800361e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d8:	d111      	bne.n	80035fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 f81e 	bl	8003626 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e00f      	b.n	800361e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	69da      	ldr	r2, [r3, #28]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	4013      	ands	r3, r2
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	429a      	cmp	r2, r3
 800360c:	bf0c      	ite	eq
 800360e:	2301      	moveq	r3, #1
 8003610:	2300      	movne	r3, #0
 8003612:	b2db      	uxtb	r3, r3
 8003614:	461a      	mov	r2, r3
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	429a      	cmp	r2, r3
 800361a:	d0a0      	beq.n	800355e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003626:	b480      	push	{r7}
 8003628:	b095      	sub	sp, #84	; 0x54
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003636:	e853 3f00 	ldrex	r3, [r3]
 800363a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800363c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800364c:	643b      	str	r3, [r7, #64]	; 0x40
 800364e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003650:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003652:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003654:	e841 2300 	strex	r3, r2, [r1]
 8003658:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800365a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1e6      	bne.n	800362e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3308      	adds	r3, #8
 8003666:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	e853 3f00 	ldrex	r3, [r3]
 800366e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003676:	f023 0301 	bic.w	r3, r3, #1
 800367a:	64bb      	str	r3, [r7, #72]	; 0x48
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3308      	adds	r3, #8
 8003682:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003684:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003686:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800368a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800368c:	e841 2300 	strex	r3, r2, [r1]
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1e3      	bne.n	8003660 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800369c:	2b01      	cmp	r3, #1
 800369e:	d118      	bne.n	80036d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	e853 3f00 	ldrex	r3, [r3]
 80036ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f023 0310 	bic.w	r3, r3, #16
 80036b4:	647b      	str	r3, [r7, #68]	; 0x44
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	461a      	mov	r2, r3
 80036bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036be:	61bb      	str	r3, [r7, #24]
 80036c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c2:	6979      	ldr	r1, [r7, #20]
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	e841 2300 	strex	r3, r2, [r1]
 80036ca:	613b      	str	r3, [r7, #16]
   return(result);
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1e6      	bne.n	80036a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80036e6:	bf00      	nop
 80036e8:	3754      	adds	r7, #84	; 0x54
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b085      	sub	sp, #20
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_UARTEx_DisableFifoMode+0x16>
 8003704:	2302      	movs	r3, #2
 8003706:	e027      	b.n	8003758 <HAL_UARTEx_DisableFifoMode+0x66>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2224      	movs	r2, #36	; 0x24
 8003714:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0201 	bic.w	r2, r2, #1
 800372e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003736:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2220      	movs	r2, #32
 800374a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003778:	2302      	movs	r3, #2
 800377a:	e02d      	b.n	80037d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2224      	movs	r2, #36	; 0x24
 8003788:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0201 	bic.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f84f 	bl	800385c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2220      	movs	r2, #32
 80037ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e02d      	b.n	8003854 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2224      	movs	r2, #36	; 0x24
 8003804:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0201 	bic.w	r2, r2, #1
 800381e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f811 	bl	800385c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2220      	movs	r2, #32
 8003846:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003868:	2b00      	cmp	r3, #0
 800386a:	d108      	bne.n	800387e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800387c:	e031      	b.n	80038e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800387e:	2308      	movs	r3, #8
 8003880:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003882:	2308      	movs	r3, #8
 8003884:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	0e5b      	lsrs	r3, r3, #25
 800388e:	b2db      	uxtb	r3, r3
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	0f5b      	lsrs	r3, r3, #29
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038a6:	7bbb      	ldrb	r3, [r7, #14]
 80038a8:	7b3a      	ldrb	r2, [r7, #12]
 80038aa:	4911      	ldr	r1, [pc, #68]	; (80038f0 <UARTEx_SetNbDataToProcess+0x94>)
 80038ac:	5c8a      	ldrb	r2, [r1, r2]
 80038ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038b2:	7b3a      	ldrb	r2, [r7, #12]
 80038b4:	490f      	ldr	r1, [pc, #60]	; (80038f4 <UARTEx_SetNbDataToProcess+0x98>)
 80038b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80038bc:	b29a      	uxth	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	7b7a      	ldrb	r2, [r7, #13]
 80038c8:	4909      	ldr	r1, [pc, #36]	; (80038f0 <UARTEx_SetNbDataToProcess+0x94>)
 80038ca:	5c8a      	ldrb	r2, [r1, r2]
 80038cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038d0:	7b7a      	ldrb	r2, [r7, #13]
 80038d2:	4908      	ldr	r1, [pc, #32]	; (80038f4 <UARTEx_SetNbDataToProcess+0x98>)
 80038d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80038da:	b29a      	uxth	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80038e2:	bf00      	nop
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	080047d8 	.word	0x080047d8
 80038f4:	080047e0 	.word	0x080047e0

080038f8 <std>:
 80038f8:	2300      	movs	r3, #0
 80038fa:	b510      	push	{r4, lr}
 80038fc:	4604      	mov	r4, r0
 80038fe:	e9c0 3300 	strd	r3, r3, [r0]
 8003902:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003906:	6083      	str	r3, [r0, #8]
 8003908:	8181      	strh	r1, [r0, #12]
 800390a:	6643      	str	r3, [r0, #100]	; 0x64
 800390c:	81c2      	strh	r2, [r0, #14]
 800390e:	6183      	str	r3, [r0, #24]
 8003910:	4619      	mov	r1, r3
 8003912:	2208      	movs	r2, #8
 8003914:	305c      	adds	r0, #92	; 0x5c
 8003916:	f000 f8c3 	bl	8003aa0 <memset>
 800391a:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <std+0x58>)
 800391c:	6263      	str	r3, [r4, #36]	; 0x24
 800391e:	4b0d      	ldr	r3, [pc, #52]	; (8003954 <std+0x5c>)
 8003920:	62a3      	str	r3, [r4, #40]	; 0x28
 8003922:	4b0d      	ldr	r3, [pc, #52]	; (8003958 <std+0x60>)
 8003924:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003926:	4b0d      	ldr	r3, [pc, #52]	; (800395c <std+0x64>)
 8003928:	6323      	str	r3, [r4, #48]	; 0x30
 800392a:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <std+0x68>)
 800392c:	6224      	str	r4, [r4, #32]
 800392e:	429c      	cmp	r4, r3
 8003930:	d006      	beq.n	8003940 <std+0x48>
 8003932:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003936:	4294      	cmp	r4, r2
 8003938:	d002      	beq.n	8003940 <std+0x48>
 800393a:	33d0      	adds	r3, #208	; 0xd0
 800393c:	429c      	cmp	r4, r3
 800393e:	d105      	bne.n	800394c <std+0x54>
 8003940:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003948:	f000 b8dc 	b.w	8003b04 <__retarget_lock_init_recursive>
 800394c:	bd10      	pop	{r4, pc}
 800394e:	bf00      	nop
 8003950:	08004365 	.word	0x08004365
 8003954:	08004387 	.word	0x08004387
 8003958:	080043bf 	.word	0x080043bf
 800395c:	080043e3 	.word	0x080043e3
 8003960:	200001c8 	.word	0x200001c8

08003964 <stdio_exit_handler>:
 8003964:	4a02      	ldr	r2, [pc, #8]	; (8003970 <stdio_exit_handler+0xc>)
 8003966:	4903      	ldr	r1, [pc, #12]	; (8003974 <stdio_exit_handler+0x10>)
 8003968:	4803      	ldr	r0, [pc, #12]	; (8003978 <stdio_exit_handler+0x14>)
 800396a:	f000 b869 	b.w	8003a40 <_fwalk_sglue>
 800396e:	bf00      	nop
 8003970:	20000014 	.word	0x20000014
 8003974:	080042fd 	.word	0x080042fd
 8003978:	20000020 	.word	0x20000020

0800397c <cleanup_stdio>:
 800397c:	6841      	ldr	r1, [r0, #4]
 800397e:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <cleanup_stdio+0x34>)
 8003980:	4299      	cmp	r1, r3
 8003982:	b510      	push	{r4, lr}
 8003984:	4604      	mov	r4, r0
 8003986:	d001      	beq.n	800398c <cleanup_stdio+0x10>
 8003988:	f000 fcb8 	bl	80042fc <_fflush_r>
 800398c:	68a1      	ldr	r1, [r4, #8]
 800398e:	4b09      	ldr	r3, [pc, #36]	; (80039b4 <cleanup_stdio+0x38>)
 8003990:	4299      	cmp	r1, r3
 8003992:	d002      	beq.n	800399a <cleanup_stdio+0x1e>
 8003994:	4620      	mov	r0, r4
 8003996:	f000 fcb1 	bl	80042fc <_fflush_r>
 800399a:	68e1      	ldr	r1, [r4, #12]
 800399c:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <cleanup_stdio+0x3c>)
 800399e:	4299      	cmp	r1, r3
 80039a0:	d004      	beq.n	80039ac <cleanup_stdio+0x30>
 80039a2:	4620      	mov	r0, r4
 80039a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039a8:	f000 bca8 	b.w	80042fc <_fflush_r>
 80039ac:	bd10      	pop	{r4, pc}
 80039ae:	bf00      	nop
 80039b0:	200001c8 	.word	0x200001c8
 80039b4:	20000230 	.word	0x20000230
 80039b8:	20000298 	.word	0x20000298

080039bc <global_stdio_init.part.0>:
 80039bc:	b510      	push	{r4, lr}
 80039be:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <global_stdio_init.part.0+0x30>)
 80039c0:	4c0b      	ldr	r4, [pc, #44]	; (80039f0 <global_stdio_init.part.0+0x34>)
 80039c2:	4a0c      	ldr	r2, [pc, #48]	; (80039f4 <global_stdio_init.part.0+0x38>)
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	4620      	mov	r0, r4
 80039c8:	2200      	movs	r2, #0
 80039ca:	2104      	movs	r1, #4
 80039cc:	f7ff ff94 	bl	80038f8 <std>
 80039d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80039d4:	2201      	movs	r2, #1
 80039d6:	2109      	movs	r1, #9
 80039d8:	f7ff ff8e 	bl	80038f8 <std>
 80039dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80039e0:	2202      	movs	r2, #2
 80039e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039e6:	2112      	movs	r1, #18
 80039e8:	f7ff bf86 	b.w	80038f8 <std>
 80039ec:	20000300 	.word	0x20000300
 80039f0:	200001c8 	.word	0x200001c8
 80039f4:	08003965 	.word	0x08003965

080039f8 <__sfp_lock_acquire>:
 80039f8:	4801      	ldr	r0, [pc, #4]	; (8003a00 <__sfp_lock_acquire+0x8>)
 80039fa:	f000 b884 	b.w	8003b06 <__retarget_lock_acquire_recursive>
 80039fe:	bf00      	nop
 8003a00:	20000305 	.word	0x20000305

08003a04 <__sfp_lock_release>:
 8003a04:	4801      	ldr	r0, [pc, #4]	; (8003a0c <__sfp_lock_release+0x8>)
 8003a06:	f000 b87f 	b.w	8003b08 <__retarget_lock_release_recursive>
 8003a0a:	bf00      	nop
 8003a0c:	20000305 	.word	0x20000305

08003a10 <__sinit>:
 8003a10:	b510      	push	{r4, lr}
 8003a12:	4604      	mov	r4, r0
 8003a14:	f7ff fff0 	bl	80039f8 <__sfp_lock_acquire>
 8003a18:	6a23      	ldr	r3, [r4, #32]
 8003a1a:	b11b      	cbz	r3, 8003a24 <__sinit+0x14>
 8003a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a20:	f7ff bff0 	b.w	8003a04 <__sfp_lock_release>
 8003a24:	4b04      	ldr	r3, [pc, #16]	; (8003a38 <__sinit+0x28>)
 8003a26:	6223      	str	r3, [r4, #32]
 8003a28:	4b04      	ldr	r3, [pc, #16]	; (8003a3c <__sinit+0x2c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1f5      	bne.n	8003a1c <__sinit+0xc>
 8003a30:	f7ff ffc4 	bl	80039bc <global_stdio_init.part.0>
 8003a34:	e7f2      	b.n	8003a1c <__sinit+0xc>
 8003a36:	bf00      	nop
 8003a38:	0800397d 	.word	0x0800397d
 8003a3c:	20000300 	.word	0x20000300

08003a40 <_fwalk_sglue>:
 8003a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a44:	4607      	mov	r7, r0
 8003a46:	4688      	mov	r8, r1
 8003a48:	4614      	mov	r4, r2
 8003a4a:	2600      	movs	r6, #0
 8003a4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a50:	f1b9 0901 	subs.w	r9, r9, #1
 8003a54:	d505      	bpl.n	8003a62 <_fwalk_sglue+0x22>
 8003a56:	6824      	ldr	r4, [r4, #0]
 8003a58:	2c00      	cmp	r4, #0
 8003a5a:	d1f7      	bne.n	8003a4c <_fwalk_sglue+0xc>
 8003a5c:	4630      	mov	r0, r6
 8003a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a62:	89ab      	ldrh	r3, [r5, #12]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d907      	bls.n	8003a78 <_fwalk_sglue+0x38>
 8003a68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	d003      	beq.n	8003a78 <_fwalk_sglue+0x38>
 8003a70:	4629      	mov	r1, r5
 8003a72:	4638      	mov	r0, r7
 8003a74:	47c0      	blx	r8
 8003a76:	4306      	orrs	r6, r0
 8003a78:	3568      	adds	r5, #104	; 0x68
 8003a7a:	e7e9      	b.n	8003a50 <_fwalk_sglue+0x10>

08003a7c <iprintf>:
 8003a7c:	b40f      	push	{r0, r1, r2, r3}
 8003a7e:	b507      	push	{r0, r1, r2, lr}
 8003a80:	4906      	ldr	r1, [pc, #24]	; (8003a9c <iprintf+0x20>)
 8003a82:	ab04      	add	r3, sp, #16
 8003a84:	6808      	ldr	r0, [r1, #0]
 8003a86:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a8a:	6881      	ldr	r1, [r0, #8]
 8003a8c:	9301      	str	r3, [sp, #4]
 8003a8e:	f000 f865 	bl	8003b5c <_vfiprintf_r>
 8003a92:	b003      	add	sp, #12
 8003a94:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a98:	b004      	add	sp, #16
 8003a9a:	4770      	bx	lr
 8003a9c:	2000006c 	.word	0x2000006c

08003aa0 <memset>:
 8003aa0:	4402      	add	r2, r0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d100      	bne.n	8003aaa <memset+0xa>
 8003aa8:	4770      	bx	lr
 8003aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8003aae:	e7f9      	b.n	8003aa4 <memset+0x4>

08003ab0 <__errno>:
 8003ab0:	4b01      	ldr	r3, [pc, #4]	; (8003ab8 <__errno+0x8>)
 8003ab2:	6818      	ldr	r0, [r3, #0]
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	2000006c 	.word	0x2000006c

08003abc <__libc_init_array>:
 8003abc:	b570      	push	{r4, r5, r6, lr}
 8003abe:	4d0d      	ldr	r5, [pc, #52]	; (8003af4 <__libc_init_array+0x38>)
 8003ac0:	4c0d      	ldr	r4, [pc, #52]	; (8003af8 <__libc_init_array+0x3c>)
 8003ac2:	1b64      	subs	r4, r4, r5
 8003ac4:	10a4      	asrs	r4, r4, #2
 8003ac6:	2600      	movs	r6, #0
 8003ac8:	42a6      	cmp	r6, r4
 8003aca:	d109      	bne.n	8003ae0 <__libc_init_array+0x24>
 8003acc:	4d0b      	ldr	r5, [pc, #44]	; (8003afc <__libc_init_array+0x40>)
 8003ace:	4c0c      	ldr	r4, [pc, #48]	; (8003b00 <__libc_init_array+0x44>)
 8003ad0:	f000 fe46 	bl	8004760 <_init>
 8003ad4:	1b64      	subs	r4, r4, r5
 8003ad6:	10a4      	asrs	r4, r4, #2
 8003ad8:	2600      	movs	r6, #0
 8003ada:	42a6      	cmp	r6, r4
 8003adc:	d105      	bne.n	8003aea <__libc_init_array+0x2e>
 8003ade:	bd70      	pop	{r4, r5, r6, pc}
 8003ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ae4:	4798      	blx	r3
 8003ae6:	3601      	adds	r6, #1
 8003ae8:	e7ee      	b.n	8003ac8 <__libc_init_array+0xc>
 8003aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aee:	4798      	blx	r3
 8003af0:	3601      	adds	r6, #1
 8003af2:	e7f2      	b.n	8003ada <__libc_init_array+0x1e>
 8003af4:	08004824 	.word	0x08004824
 8003af8:	08004824 	.word	0x08004824
 8003afc:	08004824 	.word	0x08004824
 8003b00:	08004828 	.word	0x08004828

08003b04 <__retarget_lock_init_recursive>:
 8003b04:	4770      	bx	lr

08003b06 <__retarget_lock_acquire_recursive>:
 8003b06:	4770      	bx	lr

08003b08 <__retarget_lock_release_recursive>:
 8003b08:	4770      	bx	lr

08003b0a <__sfputc_r>:
 8003b0a:	6893      	ldr	r3, [r2, #8]
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	b410      	push	{r4}
 8003b12:	6093      	str	r3, [r2, #8]
 8003b14:	da08      	bge.n	8003b28 <__sfputc_r+0x1e>
 8003b16:	6994      	ldr	r4, [r2, #24]
 8003b18:	42a3      	cmp	r3, r4
 8003b1a:	db01      	blt.n	8003b20 <__sfputc_r+0x16>
 8003b1c:	290a      	cmp	r1, #10
 8003b1e:	d103      	bne.n	8003b28 <__sfputc_r+0x1e>
 8003b20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b24:	f000 bc61 	b.w	80043ea <__swbuf_r>
 8003b28:	6813      	ldr	r3, [r2, #0]
 8003b2a:	1c58      	adds	r0, r3, #1
 8003b2c:	6010      	str	r0, [r2, #0]
 8003b2e:	7019      	strb	r1, [r3, #0]
 8003b30:	4608      	mov	r0, r1
 8003b32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <__sfputs_r>:
 8003b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3a:	4606      	mov	r6, r0
 8003b3c:	460f      	mov	r7, r1
 8003b3e:	4614      	mov	r4, r2
 8003b40:	18d5      	adds	r5, r2, r3
 8003b42:	42ac      	cmp	r4, r5
 8003b44:	d101      	bne.n	8003b4a <__sfputs_r+0x12>
 8003b46:	2000      	movs	r0, #0
 8003b48:	e007      	b.n	8003b5a <__sfputs_r+0x22>
 8003b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b4e:	463a      	mov	r2, r7
 8003b50:	4630      	mov	r0, r6
 8003b52:	f7ff ffda 	bl	8003b0a <__sfputc_r>
 8003b56:	1c43      	adds	r3, r0, #1
 8003b58:	d1f3      	bne.n	8003b42 <__sfputs_r+0xa>
 8003b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003b5c <_vfiprintf_r>:
 8003b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b60:	460d      	mov	r5, r1
 8003b62:	b09d      	sub	sp, #116	; 0x74
 8003b64:	4614      	mov	r4, r2
 8003b66:	4698      	mov	r8, r3
 8003b68:	4606      	mov	r6, r0
 8003b6a:	b118      	cbz	r0, 8003b74 <_vfiprintf_r+0x18>
 8003b6c:	6a03      	ldr	r3, [r0, #32]
 8003b6e:	b90b      	cbnz	r3, 8003b74 <_vfiprintf_r+0x18>
 8003b70:	f7ff ff4e 	bl	8003a10 <__sinit>
 8003b74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b76:	07d9      	lsls	r1, r3, #31
 8003b78:	d405      	bmi.n	8003b86 <_vfiprintf_r+0x2a>
 8003b7a:	89ab      	ldrh	r3, [r5, #12]
 8003b7c:	059a      	lsls	r2, r3, #22
 8003b7e:	d402      	bmi.n	8003b86 <_vfiprintf_r+0x2a>
 8003b80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b82:	f7ff ffc0 	bl	8003b06 <__retarget_lock_acquire_recursive>
 8003b86:	89ab      	ldrh	r3, [r5, #12]
 8003b88:	071b      	lsls	r3, r3, #28
 8003b8a:	d501      	bpl.n	8003b90 <_vfiprintf_r+0x34>
 8003b8c:	692b      	ldr	r3, [r5, #16]
 8003b8e:	b99b      	cbnz	r3, 8003bb8 <_vfiprintf_r+0x5c>
 8003b90:	4629      	mov	r1, r5
 8003b92:	4630      	mov	r0, r6
 8003b94:	f000 fc66 	bl	8004464 <__swsetup_r>
 8003b98:	b170      	cbz	r0, 8003bb8 <_vfiprintf_r+0x5c>
 8003b9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b9c:	07dc      	lsls	r4, r3, #31
 8003b9e:	d504      	bpl.n	8003baa <_vfiprintf_r+0x4e>
 8003ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ba4:	b01d      	add	sp, #116	; 0x74
 8003ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003baa:	89ab      	ldrh	r3, [r5, #12]
 8003bac:	0598      	lsls	r0, r3, #22
 8003bae:	d4f7      	bmi.n	8003ba0 <_vfiprintf_r+0x44>
 8003bb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003bb2:	f7ff ffa9 	bl	8003b08 <__retarget_lock_release_recursive>
 8003bb6:	e7f3      	b.n	8003ba0 <_vfiprintf_r+0x44>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	9309      	str	r3, [sp, #36]	; 0x24
 8003bbc:	2320      	movs	r3, #32
 8003bbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bc6:	2330      	movs	r3, #48	; 0x30
 8003bc8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003d7c <_vfiprintf_r+0x220>
 8003bcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bd0:	f04f 0901 	mov.w	r9, #1
 8003bd4:	4623      	mov	r3, r4
 8003bd6:	469a      	mov	sl, r3
 8003bd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bdc:	b10a      	cbz	r2, 8003be2 <_vfiprintf_r+0x86>
 8003bde:	2a25      	cmp	r2, #37	; 0x25
 8003be0:	d1f9      	bne.n	8003bd6 <_vfiprintf_r+0x7a>
 8003be2:	ebba 0b04 	subs.w	fp, sl, r4
 8003be6:	d00b      	beq.n	8003c00 <_vfiprintf_r+0xa4>
 8003be8:	465b      	mov	r3, fp
 8003bea:	4622      	mov	r2, r4
 8003bec:	4629      	mov	r1, r5
 8003bee:	4630      	mov	r0, r6
 8003bf0:	f7ff ffa2 	bl	8003b38 <__sfputs_r>
 8003bf4:	3001      	adds	r0, #1
 8003bf6:	f000 80a9 	beq.w	8003d4c <_vfiprintf_r+0x1f0>
 8003bfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003bfc:	445a      	add	r2, fp
 8003bfe:	9209      	str	r2, [sp, #36]	; 0x24
 8003c00:	f89a 3000 	ldrb.w	r3, [sl]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 80a1 	beq.w	8003d4c <_vfiprintf_r+0x1f0>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c14:	f10a 0a01 	add.w	sl, sl, #1
 8003c18:	9304      	str	r3, [sp, #16]
 8003c1a:	9307      	str	r3, [sp, #28]
 8003c1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c20:	931a      	str	r3, [sp, #104]	; 0x68
 8003c22:	4654      	mov	r4, sl
 8003c24:	2205      	movs	r2, #5
 8003c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c2a:	4854      	ldr	r0, [pc, #336]	; (8003d7c <_vfiprintf_r+0x220>)
 8003c2c:	f7fc faf8 	bl	8000220 <memchr>
 8003c30:	9a04      	ldr	r2, [sp, #16]
 8003c32:	b9d8      	cbnz	r0, 8003c6c <_vfiprintf_r+0x110>
 8003c34:	06d1      	lsls	r1, r2, #27
 8003c36:	bf44      	itt	mi
 8003c38:	2320      	movmi	r3, #32
 8003c3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c3e:	0713      	lsls	r3, r2, #28
 8003c40:	bf44      	itt	mi
 8003c42:	232b      	movmi	r3, #43	; 0x2b
 8003c44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c48:	f89a 3000 	ldrb.w	r3, [sl]
 8003c4c:	2b2a      	cmp	r3, #42	; 0x2a
 8003c4e:	d015      	beq.n	8003c7c <_vfiprintf_r+0x120>
 8003c50:	9a07      	ldr	r2, [sp, #28]
 8003c52:	4654      	mov	r4, sl
 8003c54:	2000      	movs	r0, #0
 8003c56:	f04f 0c0a 	mov.w	ip, #10
 8003c5a:	4621      	mov	r1, r4
 8003c5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c60:	3b30      	subs	r3, #48	; 0x30
 8003c62:	2b09      	cmp	r3, #9
 8003c64:	d94d      	bls.n	8003d02 <_vfiprintf_r+0x1a6>
 8003c66:	b1b0      	cbz	r0, 8003c96 <_vfiprintf_r+0x13a>
 8003c68:	9207      	str	r2, [sp, #28]
 8003c6a:	e014      	b.n	8003c96 <_vfiprintf_r+0x13a>
 8003c6c:	eba0 0308 	sub.w	r3, r0, r8
 8003c70:	fa09 f303 	lsl.w	r3, r9, r3
 8003c74:	4313      	orrs	r3, r2
 8003c76:	9304      	str	r3, [sp, #16]
 8003c78:	46a2      	mov	sl, r4
 8003c7a:	e7d2      	b.n	8003c22 <_vfiprintf_r+0xc6>
 8003c7c:	9b03      	ldr	r3, [sp, #12]
 8003c7e:	1d19      	adds	r1, r3, #4
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	9103      	str	r1, [sp, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	bfbb      	ittet	lt
 8003c88:	425b      	neglt	r3, r3
 8003c8a:	f042 0202 	orrlt.w	r2, r2, #2
 8003c8e:	9307      	strge	r3, [sp, #28]
 8003c90:	9307      	strlt	r3, [sp, #28]
 8003c92:	bfb8      	it	lt
 8003c94:	9204      	strlt	r2, [sp, #16]
 8003c96:	7823      	ldrb	r3, [r4, #0]
 8003c98:	2b2e      	cmp	r3, #46	; 0x2e
 8003c9a:	d10c      	bne.n	8003cb6 <_vfiprintf_r+0x15a>
 8003c9c:	7863      	ldrb	r3, [r4, #1]
 8003c9e:	2b2a      	cmp	r3, #42	; 0x2a
 8003ca0:	d134      	bne.n	8003d0c <_vfiprintf_r+0x1b0>
 8003ca2:	9b03      	ldr	r3, [sp, #12]
 8003ca4:	1d1a      	adds	r2, r3, #4
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	9203      	str	r2, [sp, #12]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	bfb8      	it	lt
 8003cae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003cb2:	3402      	adds	r4, #2
 8003cb4:	9305      	str	r3, [sp, #20]
 8003cb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003d8c <_vfiprintf_r+0x230>
 8003cba:	7821      	ldrb	r1, [r4, #0]
 8003cbc:	2203      	movs	r2, #3
 8003cbe:	4650      	mov	r0, sl
 8003cc0:	f7fc faae 	bl	8000220 <memchr>
 8003cc4:	b138      	cbz	r0, 8003cd6 <_vfiprintf_r+0x17a>
 8003cc6:	9b04      	ldr	r3, [sp, #16]
 8003cc8:	eba0 000a 	sub.w	r0, r0, sl
 8003ccc:	2240      	movs	r2, #64	; 0x40
 8003cce:	4082      	lsls	r2, r0
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	3401      	adds	r4, #1
 8003cd4:	9304      	str	r3, [sp, #16]
 8003cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cda:	4829      	ldr	r0, [pc, #164]	; (8003d80 <_vfiprintf_r+0x224>)
 8003cdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ce0:	2206      	movs	r2, #6
 8003ce2:	f7fc fa9d 	bl	8000220 <memchr>
 8003ce6:	2800      	cmp	r0, #0
 8003ce8:	d03f      	beq.n	8003d6a <_vfiprintf_r+0x20e>
 8003cea:	4b26      	ldr	r3, [pc, #152]	; (8003d84 <_vfiprintf_r+0x228>)
 8003cec:	bb1b      	cbnz	r3, 8003d36 <_vfiprintf_r+0x1da>
 8003cee:	9b03      	ldr	r3, [sp, #12]
 8003cf0:	3307      	adds	r3, #7
 8003cf2:	f023 0307 	bic.w	r3, r3, #7
 8003cf6:	3308      	adds	r3, #8
 8003cf8:	9303      	str	r3, [sp, #12]
 8003cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cfc:	443b      	add	r3, r7
 8003cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8003d00:	e768      	b.n	8003bd4 <_vfiprintf_r+0x78>
 8003d02:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d06:	460c      	mov	r4, r1
 8003d08:	2001      	movs	r0, #1
 8003d0a:	e7a6      	b.n	8003c5a <_vfiprintf_r+0xfe>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	3401      	adds	r4, #1
 8003d10:	9305      	str	r3, [sp, #20]
 8003d12:	4619      	mov	r1, r3
 8003d14:	f04f 0c0a 	mov.w	ip, #10
 8003d18:	4620      	mov	r0, r4
 8003d1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d1e:	3a30      	subs	r2, #48	; 0x30
 8003d20:	2a09      	cmp	r2, #9
 8003d22:	d903      	bls.n	8003d2c <_vfiprintf_r+0x1d0>
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0c6      	beq.n	8003cb6 <_vfiprintf_r+0x15a>
 8003d28:	9105      	str	r1, [sp, #20]
 8003d2a:	e7c4      	b.n	8003cb6 <_vfiprintf_r+0x15a>
 8003d2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d30:	4604      	mov	r4, r0
 8003d32:	2301      	movs	r3, #1
 8003d34:	e7f0      	b.n	8003d18 <_vfiprintf_r+0x1bc>
 8003d36:	ab03      	add	r3, sp, #12
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	462a      	mov	r2, r5
 8003d3c:	4b12      	ldr	r3, [pc, #72]	; (8003d88 <_vfiprintf_r+0x22c>)
 8003d3e:	a904      	add	r1, sp, #16
 8003d40:	4630      	mov	r0, r6
 8003d42:	f3af 8000 	nop.w
 8003d46:	4607      	mov	r7, r0
 8003d48:	1c78      	adds	r0, r7, #1
 8003d4a:	d1d6      	bne.n	8003cfa <_vfiprintf_r+0x19e>
 8003d4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d4e:	07d9      	lsls	r1, r3, #31
 8003d50:	d405      	bmi.n	8003d5e <_vfiprintf_r+0x202>
 8003d52:	89ab      	ldrh	r3, [r5, #12]
 8003d54:	059a      	lsls	r2, r3, #22
 8003d56:	d402      	bmi.n	8003d5e <_vfiprintf_r+0x202>
 8003d58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d5a:	f7ff fed5 	bl	8003b08 <__retarget_lock_release_recursive>
 8003d5e:	89ab      	ldrh	r3, [r5, #12]
 8003d60:	065b      	lsls	r3, r3, #25
 8003d62:	f53f af1d 	bmi.w	8003ba0 <_vfiprintf_r+0x44>
 8003d66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d68:	e71c      	b.n	8003ba4 <_vfiprintf_r+0x48>
 8003d6a:	ab03      	add	r3, sp, #12
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	462a      	mov	r2, r5
 8003d70:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <_vfiprintf_r+0x22c>)
 8003d72:	a904      	add	r1, sp, #16
 8003d74:	4630      	mov	r0, r6
 8003d76:	f000 f919 	bl	8003fac <_printf_i>
 8003d7a:	e7e4      	b.n	8003d46 <_vfiprintf_r+0x1ea>
 8003d7c:	080047e8 	.word	0x080047e8
 8003d80:	080047f2 	.word	0x080047f2
 8003d84:	00000000 	.word	0x00000000
 8003d88:	08003b39 	.word	0x08003b39
 8003d8c:	080047ee 	.word	0x080047ee

08003d90 <sbrk_aligned>:
 8003d90:	b570      	push	{r4, r5, r6, lr}
 8003d92:	4e0e      	ldr	r6, [pc, #56]	; (8003dcc <sbrk_aligned+0x3c>)
 8003d94:	460c      	mov	r4, r1
 8003d96:	6831      	ldr	r1, [r6, #0]
 8003d98:	4605      	mov	r5, r0
 8003d9a:	b911      	cbnz	r1, 8003da2 <sbrk_aligned+0x12>
 8003d9c:	f000 fc72 	bl	8004684 <_sbrk_r>
 8003da0:	6030      	str	r0, [r6, #0]
 8003da2:	4621      	mov	r1, r4
 8003da4:	4628      	mov	r0, r5
 8003da6:	f000 fc6d 	bl	8004684 <_sbrk_r>
 8003daa:	1c43      	adds	r3, r0, #1
 8003dac:	d00a      	beq.n	8003dc4 <sbrk_aligned+0x34>
 8003dae:	1cc4      	adds	r4, r0, #3
 8003db0:	f024 0403 	bic.w	r4, r4, #3
 8003db4:	42a0      	cmp	r0, r4
 8003db6:	d007      	beq.n	8003dc8 <sbrk_aligned+0x38>
 8003db8:	1a21      	subs	r1, r4, r0
 8003dba:	4628      	mov	r0, r5
 8003dbc:	f000 fc62 	bl	8004684 <_sbrk_r>
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	d101      	bne.n	8003dc8 <sbrk_aligned+0x38>
 8003dc4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003dc8:	4620      	mov	r0, r4
 8003dca:	bd70      	pop	{r4, r5, r6, pc}
 8003dcc:	2000030c 	.word	0x2000030c

08003dd0 <_malloc_r>:
 8003dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dd4:	1ccd      	adds	r5, r1, #3
 8003dd6:	f025 0503 	bic.w	r5, r5, #3
 8003dda:	3508      	adds	r5, #8
 8003ddc:	2d0c      	cmp	r5, #12
 8003dde:	bf38      	it	cc
 8003de0:	250c      	movcc	r5, #12
 8003de2:	2d00      	cmp	r5, #0
 8003de4:	4607      	mov	r7, r0
 8003de6:	db01      	blt.n	8003dec <_malloc_r+0x1c>
 8003de8:	42a9      	cmp	r1, r5
 8003dea:	d905      	bls.n	8003df8 <_malloc_r+0x28>
 8003dec:	230c      	movs	r3, #12
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	2600      	movs	r6, #0
 8003df2:	4630      	mov	r0, r6
 8003df4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003df8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003ecc <_malloc_r+0xfc>
 8003dfc:	f000 faa6 	bl	800434c <__malloc_lock>
 8003e00:	f8d8 3000 	ldr.w	r3, [r8]
 8003e04:	461c      	mov	r4, r3
 8003e06:	bb5c      	cbnz	r4, 8003e60 <_malloc_r+0x90>
 8003e08:	4629      	mov	r1, r5
 8003e0a:	4638      	mov	r0, r7
 8003e0c:	f7ff ffc0 	bl	8003d90 <sbrk_aligned>
 8003e10:	1c43      	adds	r3, r0, #1
 8003e12:	4604      	mov	r4, r0
 8003e14:	d155      	bne.n	8003ec2 <_malloc_r+0xf2>
 8003e16:	f8d8 4000 	ldr.w	r4, [r8]
 8003e1a:	4626      	mov	r6, r4
 8003e1c:	2e00      	cmp	r6, #0
 8003e1e:	d145      	bne.n	8003eac <_malloc_r+0xdc>
 8003e20:	2c00      	cmp	r4, #0
 8003e22:	d048      	beq.n	8003eb6 <_malloc_r+0xe6>
 8003e24:	6823      	ldr	r3, [r4, #0]
 8003e26:	4631      	mov	r1, r6
 8003e28:	4638      	mov	r0, r7
 8003e2a:	eb04 0903 	add.w	r9, r4, r3
 8003e2e:	f000 fc29 	bl	8004684 <_sbrk_r>
 8003e32:	4581      	cmp	r9, r0
 8003e34:	d13f      	bne.n	8003eb6 <_malloc_r+0xe6>
 8003e36:	6821      	ldr	r1, [r4, #0]
 8003e38:	1a6d      	subs	r5, r5, r1
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	4638      	mov	r0, r7
 8003e3e:	f7ff ffa7 	bl	8003d90 <sbrk_aligned>
 8003e42:	3001      	adds	r0, #1
 8003e44:	d037      	beq.n	8003eb6 <_malloc_r+0xe6>
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	442b      	add	r3, r5
 8003e4a:	6023      	str	r3, [r4, #0]
 8003e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d038      	beq.n	8003ec6 <_malloc_r+0xf6>
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	42a2      	cmp	r2, r4
 8003e58:	d12b      	bne.n	8003eb2 <_malloc_r+0xe2>
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	605a      	str	r2, [r3, #4]
 8003e5e:	e00f      	b.n	8003e80 <_malloc_r+0xb0>
 8003e60:	6822      	ldr	r2, [r4, #0]
 8003e62:	1b52      	subs	r2, r2, r5
 8003e64:	d41f      	bmi.n	8003ea6 <_malloc_r+0xd6>
 8003e66:	2a0b      	cmp	r2, #11
 8003e68:	d917      	bls.n	8003e9a <_malloc_r+0xca>
 8003e6a:	1961      	adds	r1, r4, r5
 8003e6c:	42a3      	cmp	r3, r4
 8003e6e:	6025      	str	r5, [r4, #0]
 8003e70:	bf18      	it	ne
 8003e72:	6059      	strne	r1, [r3, #4]
 8003e74:	6863      	ldr	r3, [r4, #4]
 8003e76:	bf08      	it	eq
 8003e78:	f8c8 1000 	streq.w	r1, [r8]
 8003e7c:	5162      	str	r2, [r4, r5]
 8003e7e:	604b      	str	r3, [r1, #4]
 8003e80:	4638      	mov	r0, r7
 8003e82:	f104 060b 	add.w	r6, r4, #11
 8003e86:	f000 fa67 	bl	8004358 <__malloc_unlock>
 8003e8a:	f026 0607 	bic.w	r6, r6, #7
 8003e8e:	1d23      	adds	r3, r4, #4
 8003e90:	1af2      	subs	r2, r6, r3
 8003e92:	d0ae      	beq.n	8003df2 <_malloc_r+0x22>
 8003e94:	1b9b      	subs	r3, r3, r6
 8003e96:	50a3      	str	r3, [r4, r2]
 8003e98:	e7ab      	b.n	8003df2 <_malloc_r+0x22>
 8003e9a:	42a3      	cmp	r3, r4
 8003e9c:	6862      	ldr	r2, [r4, #4]
 8003e9e:	d1dd      	bne.n	8003e5c <_malloc_r+0x8c>
 8003ea0:	f8c8 2000 	str.w	r2, [r8]
 8003ea4:	e7ec      	b.n	8003e80 <_malloc_r+0xb0>
 8003ea6:	4623      	mov	r3, r4
 8003ea8:	6864      	ldr	r4, [r4, #4]
 8003eaa:	e7ac      	b.n	8003e06 <_malloc_r+0x36>
 8003eac:	4634      	mov	r4, r6
 8003eae:	6876      	ldr	r6, [r6, #4]
 8003eb0:	e7b4      	b.n	8003e1c <_malloc_r+0x4c>
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	e7cc      	b.n	8003e50 <_malloc_r+0x80>
 8003eb6:	230c      	movs	r3, #12
 8003eb8:	603b      	str	r3, [r7, #0]
 8003eba:	4638      	mov	r0, r7
 8003ebc:	f000 fa4c 	bl	8004358 <__malloc_unlock>
 8003ec0:	e797      	b.n	8003df2 <_malloc_r+0x22>
 8003ec2:	6025      	str	r5, [r4, #0]
 8003ec4:	e7dc      	b.n	8003e80 <_malloc_r+0xb0>
 8003ec6:	605b      	str	r3, [r3, #4]
 8003ec8:	deff      	udf	#255	; 0xff
 8003eca:	bf00      	nop
 8003ecc:	20000308 	.word	0x20000308

08003ed0 <_printf_common>:
 8003ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ed4:	4616      	mov	r6, r2
 8003ed6:	4699      	mov	r9, r3
 8003ed8:	688a      	ldr	r2, [r1, #8]
 8003eda:	690b      	ldr	r3, [r1, #16]
 8003edc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	bfb8      	it	lt
 8003ee4:	4613      	movlt	r3, r2
 8003ee6:	6033      	str	r3, [r6, #0]
 8003ee8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003eec:	4607      	mov	r7, r0
 8003eee:	460c      	mov	r4, r1
 8003ef0:	b10a      	cbz	r2, 8003ef6 <_printf_common+0x26>
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	6033      	str	r3, [r6, #0]
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	0699      	lsls	r1, r3, #26
 8003efa:	bf42      	ittt	mi
 8003efc:	6833      	ldrmi	r3, [r6, #0]
 8003efe:	3302      	addmi	r3, #2
 8003f00:	6033      	strmi	r3, [r6, #0]
 8003f02:	6825      	ldr	r5, [r4, #0]
 8003f04:	f015 0506 	ands.w	r5, r5, #6
 8003f08:	d106      	bne.n	8003f18 <_printf_common+0x48>
 8003f0a:	f104 0a19 	add.w	sl, r4, #25
 8003f0e:	68e3      	ldr	r3, [r4, #12]
 8003f10:	6832      	ldr	r2, [r6, #0]
 8003f12:	1a9b      	subs	r3, r3, r2
 8003f14:	42ab      	cmp	r3, r5
 8003f16:	dc26      	bgt.n	8003f66 <_printf_common+0x96>
 8003f18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f1c:	1e13      	subs	r3, r2, #0
 8003f1e:	6822      	ldr	r2, [r4, #0]
 8003f20:	bf18      	it	ne
 8003f22:	2301      	movne	r3, #1
 8003f24:	0692      	lsls	r2, r2, #26
 8003f26:	d42b      	bmi.n	8003f80 <_printf_common+0xb0>
 8003f28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f2c:	4649      	mov	r1, r9
 8003f2e:	4638      	mov	r0, r7
 8003f30:	47c0      	blx	r8
 8003f32:	3001      	adds	r0, #1
 8003f34:	d01e      	beq.n	8003f74 <_printf_common+0xa4>
 8003f36:	6823      	ldr	r3, [r4, #0]
 8003f38:	6922      	ldr	r2, [r4, #16]
 8003f3a:	f003 0306 	and.w	r3, r3, #6
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	bf02      	ittt	eq
 8003f42:	68e5      	ldreq	r5, [r4, #12]
 8003f44:	6833      	ldreq	r3, [r6, #0]
 8003f46:	1aed      	subeq	r5, r5, r3
 8003f48:	68a3      	ldr	r3, [r4, #8]
 8003f4a:	bf0c      	ite	eq
 8003f4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f50:	2500      	movne	r5, #0
 8003f52:	4293      	cmp	r3, r2
 8003f54:	bfc4      	itt	gt
 8003f56:	1a9b      	subgt	r3, r3, r2
 8003f58:	18ed      	addgt	r5, r5, r3
 8003f5a:	2600      	movs	r6, #0
 8003f5c:	341a      	adds	r4, #26
 8003f5e:	42b5      	cmp	r5, r6
 8003f60:	d11a      	bne.n	8003f98 <_printf_common+0xc8>
 8003f62:	2000      	movs	r0, #0
 8003f64:	e008      	b.n	8003f78 <_printf_common+0xa8>
 8003f66:	2301      	movs	r3, #1
 8003f68:	4652      	mov	r2, sl
 8003f6a:	4649      	mov	r1, r9
 8003f6c:	4638      	mov	r0, r7
 8003f6e:	47c0      	blx	r8
 8003f70:	3001      	adds	r0, #1
 8003f72:	d103      	bne.n	8003f7c <_printf_common+0xac>
 8003f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f7c:	3501      	adds	r5, #1
 8003f7e:	e7c6      	b.n	8003f0e <_printf_common+0x3e>
 8003f80:	18e1      	adds	r1, r4, r3
 8003f82:	1c5a      	adds	r2, r3, #1
 8003f84:	2030      	movs	r0, #48	; 0x30
 8003f86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f8a:	4422      	add	r2, r4
 8003f8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f94:	3302      	adds	r3, #2
 8003f96:	e7c7      	b.n	8003f28 <_printf_common+0x58>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	4622      	mov	r2, r4
 8003f9c:	4649      	mov	r1, r9
 8003f9e:	4638      	mov	r0, r7
 8003fa0:	47c0      	blx	r8
 8003fa2:	3001      	adds	r0, #1
 8003fa4:	d0e6      	beq.n	8003f74 <_printf_common+0xa4>
 8003fa6:	3601      	adds	r6, #1
 8003fa8:	e7d9      	b.n	8003f5e <_printf_common+0x8e>
	...

08003fac <_printf_i>:
 8003fac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fb0:	7e0f      	ldrb	r7, [r1, #24]
 8003fb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fb4:	2f78      	cmp	r7, #120	; 0x78
 8003fb6:	4691      	mov	r9, r2
 8003fb8:	4680      	mov	r8, r0
 8003fba:	460c      	mov	r4, r1
 8003fbc:	469a      	mov	sl, r3
 8003fbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003fc2:	d807      	bhi.n	8003fd4 <_printf_i+0x28>
 8003fc4:	2f62      	cmp	r7, #98	; 0x62
 8003fc6:	d80a      	bhi.n	8003fde <_printf_i+0x32>
 8003fc8:	2f00      	cmp	r7, #0
 8003fca:	f000 80d4 	beq.w	8004176 <_printf_i+0x1ca>
 8003fce:	2f58      	cmp	r7, #88	; 0x58
 8003fd0:	f000 80c0 	beq.w	8004154 <_printf_i+0x1a8>
 8003fd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fdc:	e03a      	b.n	8004054 <_printf_i+0xa8>
 8003fde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fe2:	2b15      	cmp	r3, #21
 8003fe4:	d8f6      	bhi.n	8003fd4 <_printf_i+0x28>
 8003fe6:	a101      	add	r1, pc, #4	; (adr r1, 8003fec <_printf_i+0x40>)
 8003fe8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fec:	08004045 	.word	0x08004045
 8003ff0:	08004059 	.word	0x08004059
 8003ff4:	08003fd5 	.word	0x08003fd5
 8003ff8:	08003fd5 	.word	0x08003fd5
 8003ffc:	08003fd5 	.word	0x08003fd5
 8004000:	08003fd5 	.word	0x08003fd5
 8004004:	08004059 	.word	0x08004059
 8004008:	08003fd5 	.word	0x08003fd5
 800400c:	08003fd5 	.word	0x08003fd5
 8004010:	08003fd5 	.word	0x08003fd5
 8004014:	08003fd5 	.word	0x08003fd5
 8004018:	0800415d 	.word	0x0800415d
 800401c:	08004085 	.word	0x08004085
 8004020:	08004117 	.word	0x08004117
 8004024:	08003fd5 	.word	0x08003fd5
 8004028:	08003fd5 	.word	0x08003fd5
 800402c:	0800417f 	.word	0x0800417f
 8004030:	08003fd5 	.word	0x08003fd5
 8004034:	08004085 	.word	0x08004085
 8004038:	08003fd5 	.word	0x08003fd5
 800403c:	08003fd5 	.word	0x08003fd5
 8004040:	0800411f 	.word	0x0800411f
 8004044:	682b      	ldr	r3, [r5, #0]
 8004046:	1d1a      	adds	r2, r3, #4
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	602a      	str	r2, [r5, #0]
 800404c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004050:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004054:	2301      	movs	r3, #1
 8004056:	e09f      	b.n	8004198 <_printf_i+0x1ec>
 8004058:	6820      	ldr	r0, [r4, #0]
 800405a:	682b      	ldr	r3, [r5, #0]
 800405c:	0607      	lsls	r7, r0, #24
 800405e:	f103 0104 	add.w	r1, r3, #4
 8004062:	6029      	str	r1, [r5, #0]
 8004064:	d501      	bpl.n	800406a <_printf_i+0xbe>
 8004066:	681e      	ldr	r6, [r3, #0]
 8004068:	e003      	b.n	8004072 <_printf_i+0xc6>
 800406a:	0646      	lsls	r6, r0, #25
 800406c:	d5fb      	bpl.n	8004066 <_printf_i+0xba>
 800406e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004072:	2e00      	cmp	r6, #0
 8004074:	da03      	bge.n	800407e <_printf_i+0xd2>
 8004076:	232d      	movs	r3, #45	; 0x2d
 8004078:	4276      	negs	r6, r6
 800407a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800407e:	485a      	ldr	r0, [pc, #360]	; (80041e8 <_printf_i+0x23c>)
 8004080:	230a      	movs	r3, #10
 8004082:	e012      	b.n	80040aa <_printf_i+0xfe>
 8004084:	682b      	ldr	r3, [r5, #0]
 8004086:	6820      	ldr	r0, [r4, #0]
 8004088:	1d19      	adds	r1, r3, #4
 800408a:	6029      	str	r1, [r5, #0]
 800408c:	0605      	lsls	r5, r0, #24
 800408e:	d501      	bpl.n	8004094 <_printf_i+0xe8>
 8004090:	681e      	ldr	r6, [r3, #0]
 8004092:	e002      	b.n	800409a <_printf_i+0xee>
 8004094:	0641      	lsls	r1, r0, #25
 8004096:	d5fb      	bpl.n	8004090 <_printf_i+0xe4>
 8004098:	881e      	ldrh	r6, [r3, #0]
 800409a:	4853      	ldr	r0, [pc, #332]	; (80041e8 <_printf_i+0x23c>)
 800409c:	2f6f      	cmp	r7, #111	; 0x6f
 800409e:	bf0c      	ite	eq
 80040a0:	2308      	moveq	r3, #8
 80040a2:	230a      	movne	r3, #10
 80040a4:	2100      	movs	r1, #0
 80040a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040aa:	6865      	ldr	r5, [r4, #4]
 80040ac:	60a5      	str	r5, [r4, #8]
 80040ae:	2d00      	cmp	r5, #0
 80040b0:	bfa2      	ittt	ge
 80040b2:	6821      	ldrge	r1, [r4, #0]
 80040b4:	f021 0104 	bicge.w	r1, r1, #4
 80040b8:	6021      	strge	r1, [r4, #0]
 80040ba:	b90e      	cbnz	r6, 80040c0 <_printf_i+0x114>
 80040bc:	2d00      	cmp	r5, #0
 80040be:	d04b      	beq.n	8004158 <_printf_i+0x1ac>
 80040c0:	4615      	mov	r5, r2
 80040c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80040c6:	fb03 6711 	mls	r7, r3, r1, r6
 80040ca:	5dc7      	ldrb	r7, [r0, r7]
 80040cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040d0:	4637      	mov	r7, r6
 80040d2:	42bb      	cmp	r3, r7
 80040d4:	460e      	mov	r6, r1
 80040d6:	d9f4      	bls.n	80040c2 <_printf_i+0x116>
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d10b      	bne.n	80040f4 <_printf_i+0x148>
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	07de      	lsls	r6, r3, #31
 80040e0:	d508      	bpl.n	80040f4 <_printf_i+0x148>
 80040e2:	6923      	ldr	r3, [r4, #16]
 80040e4:	6861      	ldr	r1, [r4, #4]
 80040e6:	4299      	cmp	r1, r3
 80040e8:	bfde      	ittt	le
 80040ea:	2330      	movle	r3, #48	; 0x30
 80040ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040f0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80040f4:	1b52      	subs	r2, r2, r5
 80040f6:	6122      	str	r2, [r4, #16]
 80040f8:	f8cd a000 	str.w	sl, [sp]
 80040fc:	464b      	mov	r3, r9
 80040fe:	aa03      	add	r2, sp, #12
 8004100:	4621      	mov	r1, r4
 8004102:	4640      	mov	r0, r8
 8004104:	f7ff fee4 	bl	8003ed0 <_printf_common>
 8004108:	3001      	adds	r0, #1
 800410a:	d14a      	bne.n	80041a2 <_printf_i+0x1f6>
 800410c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004110:	b004      	add	sp, #16
 8004112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	f043 0320 	orr.w	r3, r3, #32
 800411c:	6023      	str	r3, [r4, #0]
 800411e:	4833      	ldr	r0, [pc, #204]	; (80041ec <_printf_i+0x240>)
 8004120:	2778      	movs	r7, #120	; 0x78
 8004122:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	6829      	ldr	r1, [r5, #0]
 800412a:	061f      	lsls	r7, r3, #24
 800412c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004130:	d402      	bmi.n	8004138 <_printf_i+0x18c>
 8004132:	065f      	lsls	r7, r3, #25
 8004134:	bf48      	it	mi
 8004136:	b2b6      	uxthmi	r6, r6
 8004138:	07df      	lsls	r7, r3, #31
 800413a:	bf48      	it	mi
 800413c:	f043 0320 	orrmi.w	r3, r3, #32
 8004140:	6029      	str	r1, [r5, #0]
 8004142:	bf48      	it	mi
 8004144:	6023      	strmi	r3, [r4, #0]
 8004146:	b91e      	cbnz	r6, 8004150 <_printf_i+0x1a4>
 8004148:	6823      	ldr	r3, [r4, #0]
 800414a:	f023 0320 	bic.w	r3, r3, #32
 800414e:	6023      	str	r3, [r4, #0]
 8004150:	2310      	movs	r3, #16
 8004152:	e7a7      	b.n	80040a4 <_printf_i+0xf8>
 8004154:	4824      	ldr	r0, [pc, #144]	; (80041e8 <_printf_i+0x23c>)
 8004156:	e7e4      	b.n	8004122 <_printf_i+0x176>
 8004158:	4615      	mov	r5, r2
 800415a:	e7bd      	b.n	80040d8 <_printf_i+0x12c>
 800415c:	682b      	ldr	r3, [r5, #0]
 800415e:	6826      	ldr	r6, [r4, #0]
 8004160:	6961      	ldr	r1, [r4, #20]
 8004162:	1d18      	adds	r0, r3, #4
 8004164:	6028      	str	r0, [r5, #0]
 8004166:	0635      	lsls	r5, r6, #24
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	d501      	bpl.n	8004170 <_printf_i+0x1c4>
 800416c:	6019      	str	r1, [r3, #0]
 800416e:	e002      	b.n	8004176 <_printf_i+0x1ca>
 8004170:	0670      	lsls	r0, r6, #25
 8004172:	d5fb      	bpl.n	800416c <_printf_i+0x1c0>
 8004174:	8019      	strh	r1, [r3, #0]
 8004176:	2300      	movs	r3, #0
 8004178:	6123      	str	r3, [r4, #16]
 800417a:	4615      	mov	r5, r2
 800417c:	e7bc      	b.n	80040f8 <_printf_i+0x14c>
 800417e:	682b      	ldr	r3, [r5, #0]
 8004180:	1d1a      	adds	r2, r3, #4
 8004182:	602a      	str	r2, [r5, #0]
 8004184:	681d      	ldr	r5, [r3, #0]
 8004186:	6862      	ldr	r2, [r4, #4]
 8004188:	2100      	movs	r1, #0
 800418a:	4628      	mov	r0, r5
 800418c:	f7fc f848 	bl	8000220 <memchr>
 8004190:	b108      	cbz	r0, 8004196 <_printf_i+0x1ea>
 8004192:	1b40      	subs	r0, r0, r5
 8004194:	6060      	str	r0, [r4, #4]
 8004196:	6863      	ldr	r3, [r4, #4]
 8004198:	6123      	str	r3, [r4, #16]
 800419a:	2300      	movs	r3, #0
 800419c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041a0:	e7aa      	b.n	80040f8 <_printf_i+0x14c>
 80041a2:	6923      	ldr	r3, [r4, #16]
 80041a4:	462a      	mov	r2, r5
 80041a6:	4649      	mov	r1, r9
 80041a8:	4640      	mov	r0, r8
 80041aa:	47d0      	blx	sl
 80041ac:	3001      	adds	r0, #1
 80041ae:	d0ad      	beq.n	800410c <_printf_i+0x160>
 80041b0:	6823      	ldr	r3, [r4, #0]
 80041b2:	079b      	lsls	r3, r3, #30
 80041b4:	d413      	bmi.n	80041de <_printf_i+0x232>
 80041b6:	68e0      	ldr	r0, [r4, #12]
 80041b8:	9b03      	ldr	r3, [sp, #12]
 80041ba:	4298      	cmp	r0, r3
 80041bc:	bfb8      	it	lt
 80041be:	4618      	movlt	r0, r3
 80041c0:	e7a6      	b.n	8004110 <_printf_i+0x164>
 80041c2:	2301      	movs	r3, #1
 80041c4:	4632      	mov	r2, r6
 80041c6:	4649      	mov	r1, r9
 80041c8:	4640      	mov	r0, r8
 80041ca:	47d0      	blx	sl
 80041cc:	3001      	adds	r0, #1
 80041ce:	d09d      	beq.n	800410c <_printf_i+0x160>
 80041d0:	3501      	adds	r5, #1
 80041d2:	68e3      	ldr	r3, [r4, #12]
 80041d4:	9903      	ldr	r1, [sp, #12]
 80041d6:	1a5b      	subs	r3, r3, r1
 80041d8:	42ab      	cmp	r3, r5
 80041da:	dcf2      	bgt.n	80041c2 <_printf_i+0x216>
 80041dc:	e7eb      	b.n	80041b6 <_printf_i+0x20a>
 80041de:	2500      	movs	r5, #0
 80041e0:	f104 0619 	add.w	r6, r4, #25
 80041e4:	e7f5      	b.n	80041d2 <_printf_i+0x226>
 80041e6:	bf00      	nop
 80041e8:	080047f9 	.word	0x080047f9
 80041ec:	0800480a 	.word	0x0800480a

080041f0 <__sflush_r>:
 80041f0:	898a      	ldrh	r2, [r1, #12]
 80041f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041f6:	4605      	mov	r5, r0
 80041f8:	0710      	lsls	r0, r2, #28
 80041fa:	460c      	mov	r4, r1
 80041fc:	d458      	bmi.n	80042b0 <__sflush_r+0xc0>
 80041fe:	684b      	ldr	r3, [r1, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	dc05      	bgt.n	8004210 <__sflush_r+0x20>
 8004204:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004206:	2b00      	cmp	r3, #0
 8004208:	dc02      	bgt.n	8004210 <__sflush_r+0x20>
 800420a:	2000      	movs	r0, #0
 800420c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004210:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004212:	2e00      	cmp	r6, #0
 8004214:	d0f9      	beq.n	800420a <__sflush_r+0x1a>
 8004216:	2300      	movs	r3, #0
 8004218:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800421c:	682f      	ldr	r7, [r5, #0]
 800421e:	6a21      	ldr	r1, [r4, #32]
 8004220:	602b      	str	r3, [r5, #0]
 8004222:	d032      	beq.n	800428a <__sflush_r+0x9a>
 8004224:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	075a      	lsls	r2, r3, #29
 800422a:	d505      	bpl.n	8004238 <__sflush_r+0x48>
 800422c:	6863      	ldr	r3, [r4, #4]
 800422e:	1ac0      	subs	r0, r0, r3
 8004230:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004232:	b10b      	cbz	r3, 8004238 <__sflush_r+0x48>
 8004234:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004236:	1ac0      	subs	r0, r0, r3
 8004238:	2300      	movs	r3, #0
 800423a:	4602      	mov	r2, r0
 800423c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800423e:	6a21      	ldr	r1, [r4, #32]
 8004240:	4628      	mov	r0, r5
 8004242:	47b0      	blx	r6
 8004244:	1c43      	adds	r3, r0, #1
 8004246:	89a3      	ldrh	r3, [r4, #12]
 8004248:	d106      	bne.n	8004258 <__sflush_r+0x68>
 800424a:	6829      	ldr	r1, [r5, #0]
 800424c:	291d      	cmp	r1, #29
 800424e:	d82b      	bhi.n	80042a8 <__sflush_r+0xb8>
 8004250:	4a29      	ldr	r2, [pc, #164]	; (80042f8 <__sflush_r+0x108>)
 8004252:	410a      	asrs	r2, r1
 8004254:	07d6      	lsls	r6, r2, #31
 8004256:	d427      	bmi.n	80042a8 <__sflush_r+0xb8>
 8004258:	2200      	movs	r2, #0
 800425a:	6062      	str	r2, [r4, #4]
 800425c:	04d9      	lsls	r1, r3, #19
 800425e:	6922      	ldr	r2, [r4, #16]
 8004260:	6022      	str	r2, [r4, #0]
 8004262:	d504      	bpl.n	800426e <__sflush_r+0x7e>
 8004264:	1c42      	adds	r2, r0, #1
 8004266:	d101      	bne.n	800426c <__sflush_r+0x7c>
 8004268:	682b      	ldr	r3, [r5, #0]
 800426a:	b903      	cbnz	r3, 800426e <__sflush_r+0x7e>
 800426c:	6560      	str	r0, [r4, #84]	; 0x54
 800426e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004270:	602f      	str	r7, [r5, #0]
 8004272:	2900      	cmp	r1, #0
 8004274:	d0c9      	beq.n	800420a <__sflush_r+0x1a>
 8004276:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800427a:	4299      	cmp	r1, r3
 800427c:	d002      	beq.n	8004284 <__sflush_r+0x94>
 800427e:	4628      	mov	r0, r5
 8004280:	f000 fa22 	bl	80046c8 <_free_r>
 8004284:	2000      	movs	r0, #0
 8004286:	6360      	str	r0, [r4, #52]	; 0x34
 8004288:	e7c0      	b.n	800420c <__sflush_r+0x1c>
 800428a:	2301      	movs	r3, #1
 800428c:	4628      	mov	r0, r5
 800428e:	47b0      	blx	r6
 8004290:	1c41      	adds	r1, r0, #1
 8004292:	d1c8      	bne.n	8004226 <__sflush_r+0x36>
 8004294:	682b      	ldr	r3, [r5, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0c5      	beq.n	8004226 <__sflush_r+0x36>
 800429a:	2b1d      	cmp	r3, #29
 800429c:	d001      	beq.n	80042a2 <__sflush_r+0xb2>
 800429e:	2b16      	cmp	r3, #22
 80042a0:	d101      	bne.n	80042a6 <__sflush_r+0xb6>
 80042a2:	602f      	str	r7, [r5, #0]
 80042a4:	e7b1      	b.n	800420a <__sflush_r+0x1a>
 80042a6:	89a3      	ldrh	r3, [r4, #12]
 80042a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042ac:	81a3      	strh	r3, [r4, #12]
 80042ae:	e7ad      	b.n	800420c <__sflush_r+0x1c>
 80042b0:	690f      	ldr	r7, [r1, #16]
 80042b2:	2f00      	cmp	r7, #0
 80042b4:	d0a9      	beq.n	800420a <__sflush_r+0x1a>
 80042b6:	0793      	lsls	r3, r2, #30
 80042b8:	680e      	ldr	r6, [r1, #0]
 80042ba:	bf08      	it	eq
 80042bc:	694b      	ldreq	r3, [r1, #20]
 80042be:	600f      	str	r7, [r1, #0]
 80042c0:	bf18      	it	ne
 80042c2:	2300      	movne	r3, #0
 80042c4:	eba6 0807 	sub.w	r8, r6, r7
 80042c8:	608b      	str	r3, [r1, #8]
 80042ca:	f1b8 0f00 	cmp.w	r8, #0
 80042ce:	dd9c      	ble.n	800420a <__sflush_r+0x1a>
 80042d0:	6a21      	ldr	r1, [r4, #32]
 80042d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80042d4:	4643      	mov	r3, r8
 80042d6:	463a      	mov	r2, r7
 80042d8:	4628      	mov	r0, r5
 80042da:	47b0      	blx	r6
 80042dc:	2800      	cmp	r0, #0
 80042de:	dc06      	bgt.n	80042ee <__sflush_r+0xfe>
 80042e0:	89a3      	ldrh	r3, [r4, #12]
 80042e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042e6:	81a3      	strh	r3, [r4, #12]
 80042e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042ec:	e78e      	b.n	800420c <__sflush_r+0x1c>
 80042ee:	4407      	add	r7, r0
 80042f0:	eba8 0800 	sub.w	r8, r8, r0
 80042f4:	e7e9      	b.n	80042ca <__sflush_r+0xda>
 80042f6:	bf00      	nop
 80042f8:	dfbffffe 	.word	0xdfbffffe

080042fc <_fflush_r>:
 80042fc:	b538      	push	{r3, r4, r5, lr}
 80042fe:	690b      	ldr	r3, [r1, #16]
 8004300:	4605      	mov	r5, r0
 8004302:	460c      	mov	r4, r1
 8004304:	b913      	cbnz	r3, 800430c <_fflush_r+0x10>
 8004306:	2500      	movs	r5, #0
 8004308:	4628      	mov	r0, r5
 800430a:	bd38      	pop	{r3, r4, r5, pc}
 800430c:	b118      	cbz	r0, 8004316 <_fflush_r+0x1a>
 800430e:	6a03      	ldr	r3, [r0, #32]
 8004310:	b90b      	cbnz	r3, 8004316 <_fflush_r+0x1a>
 8004312:	f7ff fb7d 	bl	8003a10 <__sinit>
 8004316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0f3      	beq.n	8004306 <_fflush_r+0xa>
 800431e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004320:	07d0      	lsls	r0, r2, #31
 8004322:	d404      	bmi.n	800432e <_fflush_r+0x32>
 8004324:	0599      	lsls	r1, r3, #22
 8004326:	d402      	bmi.n	800432e <_fflush_r+0x32>
 8004328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800432a:	f7ff fbec 	bl	8003b06 <__retarget_lock_acquire_recursive>
 800432e:	4628      	mov	r0, r5
 8004330:	4621      	mov	r1, r4
 8004332:	f7ff ff5d 	bl	80041f0 <__sflush_r>
 8004336:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004338:	07da      	lsls	r2, r3, #31
 800433a:	4605      	mov	r5, r0
 800433c:	d4e4      	bmi.n	8004308 <_fflush_r+0xc>
 800433e:	89a3      	ldrh	r3, [r4, #12]
 8004340:	059b      	lsls	r3, r3, #22
 8004342:	d4e1      	bmi.n	8004308 <_fflush_r+0xc>
 8004344:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004346:	f7ff fbdf 	bl	8003b08 <__retarget_lock_release_recursive>
 800434a:	e7dd      	b.n	8004308 <_fflush_r+0xc>

0800434c <__malloc_lock>:
 800434c:	4801      	ldr	r0, [pc, #4]	; (8004354 <__malloc_lock+0x8>)
 800434e:	f7ff bbda 	b.w	8003b06 <__retarget_lock_acquire_recursive>
 8004352:	bf00      	nop
 8004354:	20000304 	.word	0x20000304

08004358 <__malloc_unlock>:
 8004358:	4801      	ldr	r0, [pc, #4]	; (8004360 <__malloc_unlock+0x8>)
 800435a:	f7ff bbd5 	b.w	8003b08 <__retarget_lock_release_recursive>
 800435e:	bf00      	nop
 8004360:	20000304 	.word	0x20000304

08004364 <__sread>:
 8004364:	b510      	push	{r4, lr}
 8004366:	460c      	mov	r4, r1
 8004368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800436c:	f000 f978 	bl	8004660 <_read_r>
 8004370:	2800      	cmp	r0, #0
 8004372:	bfab      	itete	ge
 8004374:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004376:	89a3      	ldrhlt	r3, [r4, #12]
 8004378:	181b      	addge	r3, r3, r0
 800437a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800437e:	bfac      	ite	ge
 8004380:	6563      	strge	r3, [r4, #84]	; 0x54
 8004382:	81a3      	strhlt	r3, [r4, #12]
 8004384:	bd10      	pop	{r4, pc}

08004386 <__swrite>:
 8004386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800438a:	461f      	mov	r7, r3
 800438c:	898b      	ldrh	r3, [r1, #12]
 800438e:	05db      	lsls	r3, r3, #23
 8004390:	4605      	mov	r5, r0
 8004392:	460c      	mov	r4, r1
 8004394:	4616      	mov	r6, r2
 8004396:	d505      	bpl.n	80043a4 <__swrite+0x1e>
 8004398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800439c:	2302      	movs	r3, #2
 800439e:	2200      	movs	r2, #0
 80043a0:	f000 f94c 	bl	800463c <_lseek_r>
 80043a4:	89a3      	ldrh	r3, [r4, #12]
 80043a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043ae:	81a3      	strh	r3, [r4, #12]
 80043b0:	4632      	mov	r2, r6
 80043b2:	463b      	mov	r3, r7
 80043b4:	4628      	mov	r0, r5
 80043b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043ba:	f000 b973 	b.w	80046a4 <_write_r>

080043be <__sseek>:
 80043be:	b510      	push	{r4, lr}
 80043c0:	460c      	mov	r4, r1
 80043c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043c6:	f000 f939 	bl	800463c <_lseek_r>
 80043ca:	1c43      	adds	r3, r0, #1
 80043cc:	89a3      	ldrh	r3, [r4, #12]
 80043ce:	bf15      	itete	ne
 80043d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80043d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80043d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80043da:	81a3      	strheq	r3, [r4, #12]
 80043dc:	bf18      	it	ne
 80043de:	81a3      	strhne	r3, [r4, #12]
 80043e0:	bd10      	pop	{r4, pc}

080043e2 <__sclose>:
 80043e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043e6:	f000 b8f7 	b.w	80045d8 <_close_r>

080043ea <__swbuf_r>:
 80043ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ec:	460e      	mov	r6, r1
 80043ee:	4614      	mov	r4, r2
 80043f0:	4605      	mov	r5, r0
 80043f2:	b118      	cbz	r0, 80043fc <__swbuf_r+0x12>
 80043f4:	6a03      	ldr	r3, [r0, #32]
 80043f6:	b90b      	cbnz	r3, 80043fc <__swbuf_r+0x12>
 80043f8:	f7ff fb0a 	bl	8003a10 <__sinit>
 80043fc:	69a3      	ldr	r3, [r4, #24]
 80043fe:	60a3      	str	r3, [r4, #8]
 8004400:	89a3      	ldrh	r3, [r4, #12]
 8004402:	071a      	lsls	r2, r3, #28
 8004404:	d525      	bpl.n	8004452 <__swbuf_r+0x68>
 8004406:	6923      	ldr	r3, [r4, #16]
 8004408:	b31b      	cbz	r3, 8004452 <__swbuf_r+0x68>
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	6922      	ldr	r2, [r4, #16]
 800440e:	1a98      	subs	r0, r3, r2
 8004410:	6963      	ldr	r3, [r4, #20]
 8004412:	b2f6      	uxtb	r6, r6
 8004414:	4283      	cmp	r3, r0
 8004416:	4637      	mov	r7, r6
 8004418:	dc04      	bgt.n	8004424 <__swbuf_r+0x3a>
 800441a:	4621      	mov	r1, r4
 800441c:	4628      	mov	r0, r5
 800441e:	f7ff ff6d 	bl	80042fc <_fflush_r>
 8004422:	b9e0      	cbnz	r0, 800445e <__swbuf_r+0x74>
 8004424:	68a3      	ldr	r3, [r4, #8]
 8004426:	3b01      	subs	r3, #1
 8004428:	60a3      	str	r3, [r4, #8]
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	6022      	str	r2, [r4, #0]
 8004430:	701e      	strb	r6, [r3, #0]
 8004432:	6962      	ldr	r2, [r4, #20]
 8004434:	1c43      	adds	r3, r0, #1
 8004436:	429a      	cmp	r2, r3
 8004438:	d004      	beq.n	8004444 <__swbuf_r+0x5a>
 800443a:	89a3      	ldrh	r3, [r4, #12]
 800443c:	07db      	lsls	r3, r3, #31
 800443e:	d506      	bpl.n	800444e <__swbuf_r+0x64>
 8004440:	2e0a      	cmp	r6, #10
 8004442:	d104      	bne.n	800444e <__swbuf_r+0x64>
 8004444:	4621      	mov	r1, r4
 8004446:	4628      	mov	r0, r5
 8004448:	f7ff ff58 	bl	80042fc <_fflush_r>
 800444c:	b938      	cbnz	r0, 800445e <__swbuf_r+0x74>
 800444e:	4638      	mov	r0, r7
 8004450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004452:	4621      	mov	r1, r4
 8004454:	4628      	mov	r0, r5
 8004456:	f000 f805 	bl	8004464 <__swsetup_r>
 800445a:	2800      	cmp	r0, #0
 800445c:	d0d5      	beq.n	800440a <__swbuf_r+0x20>
 800445e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004462:	e7f4      	b.n	800444e <__swbuf_r+0x64>

08004464 <__swsetup_r>:
 8004464:	b538      	push	{r3, r4, r5, lr}
 8004466:	4b2a      	ldr	r3, [pc, #168]	; (8004510 <__swsetup_r+0xac>)
 8004468:	4605      	mov	r5, r0
 800446a:	6818      	ldr	r0, [r3, #0]
 800446c:	460c      	mov	r4, r1
 800446e:	b118      	cbz	r0, 8004478 <__swsetup_r+0x14>
 8004470:	6a03      	ldr	r3, [r0, #32]
 8004472:	b90b      	cbnz	r3, 8004478 <__swsetup_r+0x14>
 8004474:	f7ff facc 	bl	8003a10 <__sinit>
 8004478:	89a3      	ldrh	r3, [r4, #12]
 800447a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800447e:	0718      	lsls	r0, r3, #28
 8004480:	d422      	bmi.n	80044c8 <__swsetup_r+0x64>
 8004482:	06d9      	lsls	r1, r3, #27
 8004484:	d407      	bmi.n	8004496 <__swsetup_r+0x32>
 8004486:	2309      	movs	r3, #9
 8004488:	602b      	str	r3, [r5, #0]
 800448a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800448e:	81a3      	strh	r3, [r4, #12]
 8004490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004494:	e034      	b.n	8004500 <__swsetup_r+0x9c>
 8004496:	0758      	lsls	r0, r3, #29
 8004498:	d512      	bpl.n	80044c0 <__swsetup_r+0x5c>
 800449a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800449c:	b141      	cbz	r1, 80044b0 <__swsetup_r+0x4c>
 800449e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044a2:	4299      	cmp	r1, r3
 80044a4:	d002      	beq.n	80044ac <__swsetup_r+0x48>
 80044a6:	4628      	mov	r0, r5
 80044a8:	f000 f90e 	bl	80046c8 <_free_r>
 80044ac:	2300      	movs	r3, #0
 80044ae:	6363      	str	r3, [r4, #52]	; 0x34
 80044b0:	89a3      	ldrh	r3, [r4, #12]
 80044b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80044b6:	81a3      	strh	r3, [r4, #12]
 80044b8:	2300      	movs	r3, #0
 80044ba:	6063      	str	r3, [r4, #4]
 80044bc:	6923      	ldr	r3, [r4, #16]
 80044be:	6023      	str	r3, [r4, #0]
 80044c0:	89a3      	ldrh	r3, [r4, #12]
 80044c2:	f043 0308 	orr.w	r3, r3, #8
 80044c6:	81a3      	strh	r3, [r4, #12]
 80044c8:	6923      	ldr	r3, [r4, #16]
 80044ca:	b94b      	cbnz	r3, 80044e0 <__swsetup_r+0x7c>
 80044cc:	89a3      	ldrh	r3, [r4, #12]
 80044ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80044d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044d6:	d003      	beq.n	80044e0 <__swsetup_r+0x7c>
 80044d8:	4621      	mov	r1, r4
 80044da:	4628      	mov	r0, r5
 80044dc:	f000 f840 	bl	8004560 <__smakebuf_r>
 80044e0:	89a0      	ldrh	r0, [r4, #12]
 80044e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044e6:	f010 0301 	ands.w	r3, r0, #1
 80044ea:	d00a      	beq.n	8004502 <__swsetup_r+0x9e>
 80044ec:	2300      	movs	r3, #0
 80044ee:	60a3      	str	r3, [r4, #8]
 80044f0:	6963      	ldr	r3, [r4, #20]
 80044f2:	425b      	negs	r3, r3
 80044f4:	61a3      	str	r3, [r4, #24]
 80044f6:	6923      	ldr	r3, [r4, #16]
 80044f8:	b943      	cbnz	r3, 800450c <__swsetup_r+0xa8>
 80044fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80044fe:	d1c4      	bne.n	800448a <__swsetup_r+0x26>
 8004500:	bd38      	pop	{r3, r4, r5, pc}
 8004502:	0781      	lsls	r1, r0, #30
 8004504:	bf58      	it	pl
 8004506:	6963      	ldrpl	r3, [r4, #20]
 8004508:	60a3      	str	r3, [r4, #8]
 800450a:	e7f4      	b.n	80044f6 <__swsetup_r+0x92>
 800450c:	2000      	movs	r0, #0
 800450e:	e7f7      	b.n	8004500 <__swsetup_r+0x9c>
 8004510:	2000006c 	.word	0x2000006c

08004514 <__swhatbuf_r>:
 8004514:	b570      	push	{r4, r5, r6, lr}
 8004516:	460c      	mov	r4, r1
 8004518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800451c:	2900      	cmp	r1, #0
 800451e:	b096      	sub	sp, #88	; 0x58
 8004520:	4615      	mov	r5, r2
 8004522:	461e      	mov	r6, r3
 8004524:	da0d      	bge.n	8004542 <__swhatbuf_r+0x2e>
 8004526:	89a3      	ldrh	r3, [r4, #12]
 8004528:	f013 0f80 	tst.w	r3, #128	; 0x80
 800452c:	f04f 0100 	mov.w	r1, #0
 8004530:	bf0c      	ite	eq
 8004532:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004536:	2340      	movne	r3, #64	; 0x40
 8004538:	2000      	movs	r0, #0
 800453a:	6031      	str	r1, [r6, #0]
 800453c:	602b      	str	r3, [r5, #0]
 800453e:	b016      	add	sp, #88	; 0x58
 8004540:	bd70      	pop	{r4, r5, r6, pc}
 8004542:	466a      	mov	r2, sp
 8004544:	f000 f858 	bl	80045f8 <_fstat_r>
 8004548:	2800      	cmp	r0, #0
 800454a:	dbec      	blt.n	8004526 <__swhatbuf_r+0x12>
 800454c:	9901      	ldr	r1, [sp, #4]
 800454e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004552:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004556:	4259      	negs	r1, r3
 8004558:	4159      	adcs	r1, r3
 800455a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800455e:	e7eb      	b.n	8004538 <__swhatbuf_r+0x24>

08004560 <__smakebuf_r>:
 8004560:	898b      	ldrh	r3, [r1, #12]
 8004562:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004564:	079d      	lsls	r5, r3, #30
 8004566:	4606      	mov	r6, r0
 8004568:	460c      	mov	r4, r1
 800456a:	d507      	bpl.n	800457c <__smakebuf_r+0x1c>
 800456c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004570:	6023      	str	r3, [r4, #0]
 8004572:	6123      	str	r3, [r4, #16]
 8004574:	2301      	movs	r3, #1
 8004576:	6163      	str	r3, [r4, #20]
 8004578:	b002      	add	sp, #8
 800457a:	bd70      	pop	{r4, r5, r6, pc}
 800457c:	ab01      	add	r3, sp, #4
 800457e:	466a      	mov	r2, sp
 8004580:	f7ff ffc8 	bl	8004514 <__swhatbuf_r>
 8004584:	9900      	ldr	r1, [sp, #0]
 8004586:	4605      	mov	r5, r0
 8004588:	4630      	mov	r0, r6
 800458a:	f7ff fc21 	bl	8003dd0 <_malloc_r>
 800458e:	b948      	cbnz	r0, 80045a4 <__smakebuf_r+0x44>
 8004590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004594:	059a      	lsls	r2, r3, #22
 8004596:	d4ef      	bmi.n	8004578 <__smakebuf_r+0x18>
 8004598:	f023 0303 	bic.w	r3, r3, #3
 800459c:	f043 0302 	orr.w	r3, r3, #2
 80045a0:	81a3      	strh	r3, [r4, #12]
 80045a2:	e7e3      	b.n	800456c <__smakebuf_r+0xc>
 80045a4:	89a3      	ldrh	r3, [r4, #12]
 80045a6:	6020      	str	r0, [r4, #0]
 80045a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ac:	81a3      	strh	r3, [r4, #12]
 80045ae:	9b00      	ldr	r3, [sp, #0]
 80045b0:	6163      	str	r3, [r4, #20]
 80045b2:	9b01      	ldr	r3, [sp, #4]
 80045b4:	6120      	str	r0, [r4, #16]
 80045b6:	b15b      	cbz	r3, 80045d0 <__smakebuf_r+0x70>
 80045b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045bc:	4630      	mov	r0, r6
 80045be:	f000 f82d 	bl	800461c <_isatty_r>
 80045c2:	b128      	cbz	r0, 80045d0 <__smakebuf_r+0x70>
 80045c4:	89a3      	ldrh	r3, [r4, #12]
 80045c6:	f023 0303 	bic.w	r3, r3, #3
 80045ca:	f043 0301 	orr.w	r3, r3, #1
 80045ce:	81a3      	strh	r3, [r4, #12]
 80045d0:	89a3      	ldrh	r3, [r4, #12]
 80045d2:	431d      	orrs	r5, r3
 80045d4:	81a5      	strh	r5, [r4, #12]
 80045d6:	e7cf      	b.n	8004578 <__smakebuf_r+0x18>

080045d8 <_close_r>:
 80045d8:	b538      	push	{r3, r4, r5, lr}
 80045da:	4d06      	ldr	r5, [pc, #24]	; (80045f4 <_close_r+0x1c>)
 80045dc:	2300      	movs	r3, #0
 80045de:	4604      	mov	r4, r0
 80045e0:	4608      	mov	r0, r1
 80045e2:	602b      	str	r3, [r5, #0]
 80045e4:	f7fc faad 	bl	8000b42 <_close>
 80045e8:	1c43      	adds	r3, r0, #1
 80045ea:	d102      	bne.n	80045f2 <_close_r+0x1a>
 80045ec:	682b      	ldr	r3, [r5, #0]
 80045ee:	b103      	cbz	r3, 80045f2 <_close_r+0x1a>
 80045f0:	6023      	str	r3, [r4, #0]
 80045f2:	bd38      	pop	{r3, r4, r5, pc}
 80045f4:	20000310 	.word	0x20000310

080045f8 <_fstat_r>:
 80045f8:	b538      	push	{r3, r4, r5, lr}
 80045fa:	4d07      	ldr	r5, [pc, #28]	; (8004618 <_fstat_r+0x20>)
 80045fc:	2300      	movs	r3, #0
 80045fe:	4604      	mov	r4, r0
 8004600:	4608      	mov	r0, r1
 8004602:	4611      	mov	r1, r2
 8004604:	602b      	str	r3, [r5, #0]
 8004606:	f7fc faa8 	bl	8000b5a <_fstat>
 800460a:	1c43      	adds	r3, r0, #1
 800460c:	d102      	bne.n	8004614 <_fstat_r+0x1c>
 800460e:	682b      	ldr	r3, [r5, #0]
 8004610:	b103      	cbz	r3, 8004614 <_fstat_r+0x1c>
 8004612:	6023      	str	r3, [r4, #0]
 8004614:	bd38      	pop	{r3, r4, r5, pc}
 8004616:	bf00      	nop
 8004618:	20000310 	.word	0x20000310

0800461c <_isatty_r>:
 800461c:	b538      	push	{r3, r4, r5, lr}
 800461e:	4d06      	ldr	r5, [pc, #24]	; (8004638 <_isatty_r+0x1c>)
 8004620:	2300      	movs	r3, #0
 8004622:	4604      	mov	r4, r0
 8004624:	4608      	mov	r0, r1
 8004626:	602b      	str	r3, [r5, #0]
 8004628:	f7fc faa7 	bl	8000b7a <_isatty>
 800462c:	1c43      	adds	r3, r0, #1
 800462e:	d102      	bne.n	8004636 <_isatty_r+0x1a>
 8004630:	682b      	ldr	r3, [r5, #0]
 8004632:	b103      	cbz	r3, 8004636 <_isatty_r+0x1a>
 8004634:	6023      	str	r3, [r4, #0]
 8004636:	bd38      	pop	{r3, r4, r5, pc}
 8004638:	20000310 	.word	0x20000310

0800463c <_lseek_r>:
 800463c:	b538      	push	{r3, r4, r5, lr}
 800463e:	4d07      	ldr	r5, [pc, #28]	; (800465c <_lseek_r+0x20>)
 8004640:	4604      	mov	r4, r0
 8004642:	4608      	mov	r0, r1
 8004644:	4611      	mov	r1, r2
 8004646:	2200      	movs	r2, #0
 8004648:	602a      	str	r2, [r5, #0]
 800464a:	461a      	mov	r2, r3
 800464c:	f7fc faa0 	bl	8000b90 <_lseek>
 8004650:	1c43      	adds	r3, r0, #1
 8004652:	d102      	bne.n	800465a <_lseek_r+0x1e>
 8004654:	682b      	ldr	r3, [r5, #0]
 8004656:	b103      	cbz	r3, 800465a <_lseek_r+0x1e>
 8004658:	6023      	str	r3, [r4, #0]
 800465a:	bd38      	pop	{r3, r4, r5, pc}
 800465c:	20000310 	.word	0x20000310

08004660 <_read_r>:
 8004660:	b538      	push	{r3, r4, r5, lr}
 8004662:	4d07      	ldr	r5, [pc, #28]	; (8004680 <_read_r+0x20>)
 8004664:	4604      	mov	r4, r0
 8004666:	4608      	mov	r0, r1
 8004668:	4611      	mov	r1, r2
 800466a:	2200      	movs	r2, #0
 800466c:	602a      	str	r2, [r5, #0]
 800466e:	461a      	mov	r2, r3
 8004670:	f7fc fa4a 	bl	8000b08 <_read>
 8004674:	1c43      	adds	r3, r0, #1
 8004676:	d102      	bne.n	800467e <_read_r+0x1e>
 8004678:	682b      	ldr	r3, [r5, #0]
 800467a:	b103      	cbz	r3, 800467e <_read_r+0x1e>
 800467c:	6023      	str	r3, [r4, #0]
 800467e:	bd38      	pop	{r3, r4, r5, pc}
 8004680:	20000310 	.word	0x20000310

08004684 <_sbrk_r>:
 8004684:	b538      	push	{r3, r4, r5, lr}
 8004686:	4d06      	ldr	r5, [pc, #24]	; (80046a0 <_sbrk_r+0x1c>)
 8004688:	2300      	movs	r3, #0
 800468a:	4604      	mov	r4, r0
 800468c:	4608      	mov	r0, r1
 800468e:	602b      	str	r3, [r5, #0]
 8004690:	f7fc fa8c 	bl	8000bac <_sbrk>
 8004694:	1c43      	adds	r3, r0, #1
 8004696:	d102      	bne.n	800469e <_sbrk_r+0x1a>
 8004698:	682b      	ldr	r3, [r5, #0]
 800469a:	b103      	cbz	r3, 800469e <_sbrk_r+0x1a>
 800469c:	6023      	str	r3, [r4, #0]
 800469e:	bd38      	pop	{r3, r4, r5, pc}
 80046a0:	20000310 	.word	0x20000310

080046a4 <_write_r>:
 80046a4:	b538      	push	{r3, r4, r5, lr}
 80046a6:	4d07      	ldr	r5, [pc, #28]	; (80046c4 <_write_r+0x20>)
 80046a8:	4604      	mov	r4, r0
 80046aa:	4608      	mov	r0, r1
 80046ac:	4611      	mov	r1, r2
 80046ae:	2200      	movs	r2, #0
 80046b0:	602a      	str	r2, [r5, #0]
 80046b2:	461a      	mov	r2, r3
 80046b4:	f7fb ff82 	bl	80005bc <_write>
 80046b8:	1c43      	adds	r3, r0, #1
 80046ba:	d102      	bne.n	80046c2 <_write_r+0x1e>
 80046bc:	682b      	ldr	r3, [r5, #0]
 80046be:	b103      	cbz	r3, 80046c2 <_write_r+0x1e>
 80046c0:	6023      	str	r3, [r4, #0]
 80046c2:	bd38      	pop	{r3, r4, r5, pc}
 80046c4:	20000310 	.word	0x20000310

080046c8 <_free_r>:
 80046c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046ca:	2900      	cmp	r1, #0
 80046cc:	d044      	beq.n	8004758 <_free_r+0x90>
 80046ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046d2:	9001      	str	r0, [sp, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f1a1 0404 	sub.w	r4, r1, #4
 80046da:	bfb8      	it	lt
 80046dc:	18e4      	addlt	r4, r4, r3
 80046de:	f7ff fe35 	bl	800434c <__malloc_lock>
 80046e2:	4a1e      	ldr	r2, [pc, #120]	; (800475c <_free_r+0x94>)
 80046e4:	9801      	ldr	r0, [sp, #4]
 80046e6:	6813      	ldr	r3, [r2, #0]
 80046e8:	b933      	cbnz	r3, 80046f8 <_free_r+0x30>
 80046ea:	6063      	str	r3, [r4, #4]
 80046ec:	6014      	str	r4, [r2, #0]
 80046ee:	b003      	add	sp, #12
 80046f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046f4:	f7ff be30 	b.w	8004358 <__malloc_unlock>
 80046f8:	42a3      	cmp	r3, r4
 80046fa:	d908      	bls.n	800470e <_free_r+0x46>
 80046fc:	6825      	ldr	r5, [r4, #0]
 80046fe:	1961      	adds	r1, r4, r5
 8004700:	428b      	cmp	r3, r1
 8004702:	bf01      	itttt	eq
 8004704:	6819      	ldreq	r1, [r3, #0]
 8004706:	685b      	ldreq	r3, [r3, #4]
 8004708:	1949      	addeq	r1, r1, r5
 800470a:	6021      	streq	r1, [r4, #0]
 800470c:	e7ed      	b.n	80046ea <_free_r+0x22>
 800470e:	461a      	mov	r2, r3
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	b10b      	cbz	r3, 8004718 <_free_r+0x50>
 8004714:	42a3      	cmp	r3, r4
 8004716:	d9fa      	bls.n	800470e <_free_r+0x46>
 8004718:	6811      	ldr	r1, [r2, #0]
 800471a:	1855      	adds	r5, r2, r1
 800471c:	42a5      	cmp	r5, r4
 800471e:	d10b      	bne.n	8004738 <_free_r+0x70>
 8004720:	6824      	ldr	r4, [r4, #0]
 8004722:	4421      	add	r1, r4
 8004724:	1854      	adds	r4, r2, r1
 8004726:	42a3      	cmp	r3, r4
 8004728:	6011      	str	r1, [r2, #0]
 800472a:	d1e0      	bne.n	80046ee <_free_r+0x26>
 800472c:	681c      	ldr	r4, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	6053      	str	r3, [r2, #4]
 8004732:	440c      	add	r4, r1
 8004734:	6014      	str	r4, [r2, #0]
 8004736:	e7da      	b.n	80046ee <_free_r+0x26>
 8004738:	d902      	bls.n	8004740 <_free_r+0x78>
 800473a:	230c      	movs	r3, #12
 800473c:	6003      	str	r3, [r0, #0]
 800473e:	e7d6      	b.n	80046ee <_free_r+0x26>
 8004740:	6825      	ldr	r5, [r4, #0]
 8004742:	1961      	adds	r1, r4, r5
 8004744:	428b      	cmp	r3, r1
 8004746:	bf04      	itt	eq
 8004748:	6819      	ldreq	r1, [r3, #0]
 800474a:	685b      	ldreq	r3, [r3, #4]
 800474c:	6063      	str	r3, [r4, #4]
 800474e:	bf04      	itt	eq
 8004750:	1949      	addeq	r1, r1, r5
 8004752:	6021      	streq	r1, [r4, #0]
 8004754:	6054      	str	r4, [r2, #4]
 8004756:	e7ca      	b.n	80046ee <_free_r+0x26>
 8004758:	b003      	add	sp, #12
 800475a:	bd30      	pop	{r4, r5, pc}
 800475c:	20000308 	.word	0x20000308

08004760 <_init>:
 8004760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004762:	bf00      	nop
 8004764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004766:	bc08      	pop	{r3}
 8004768:	469e      	mov	lr, r3
 800476a:	4770      	bx	lr

0800476c <_fini>:
 800476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476e:	bf00      	nop
 8004770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004772:	bc08      	pop	{r3}
 8004774:	469e      	mov	lr, r3
 8004776:	4770      	bx	lr
